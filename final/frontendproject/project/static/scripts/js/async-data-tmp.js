(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _index = require('../../lib/index');

var _index2 = _interopRequireDefault(_index);

var _utils = require('../../lib/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var App = function (_React$Component) {
  _inherits(App, _React$Component);

  function App() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, App);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = App.__proto__ || Object.getPrototypeOf(App)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      unitedStates: (0, _utils.getStates)()
    }, _this.handleSubmit = function (e) {
      console.log('submit button');
      console.log(_this.state.value);
      window.open('midterms', "_blank");
      window.open('midterms/bpatel/?name=' + _this.state.value, "_blank");
      window.open('midterms/grubin/?name=' + _this.state.value, "_blank");
      window.open('midterms/hshah/?name=' + _this.state.value, "_blank");
      window.open('midterms/rwilliams/?name=' + _this.state.value, "_blank");
    }, _this.requestTimer = null, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(App, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'h1',
          null,
          'Stock Look-up'
        ),
        _react2.default.createElement(
          'p',
          null,
          'This is a simple front-end that provides suggestions based on the typed search input. Suggested    securities are listings from common US exchanges (NYSE, NASDAQ, AMEX).'
        ),
        _react2.default.createElement(
          'form',
          { onSubmit: this.handleSubmit },
          _react2.default.createElement(
            'label',
            { htmlFor: 'stocks-autocomplete' },
            'Enter a ticker:'
          ),
          _react2.default.createElement(_index2.default, {
            inputProps: { id: 'stocks-autocomplete' },
            wrapperStyle: { position: 'relative', display: 'inline-block' },
            value: this.state.value,
            items: this.state.unitedStates,

            getItemValue: function getItemValue(item) {
              return item.abbr;
            },

            onSelect: function onSelect(value, item) {
              // set the menu to only the selected item
              _this2.setState({ value: value, unitedStates: [item] });
              // or you could reset it to a default list again
              // this.setState({ unitedStates: getStates() })
            },
            onChange: function onChange(event, value) {
              console.log("on change event!");
              _this2.setState({ value: value });
              clearTimeout(_this2.requestTimer);
              _this2.requestTimer = (0, _utils.fakeRequest)(value, function (items) {
                _this2.setState({ unitedStates: items });
              });
            },

            renderMenu: function renderMenu(children) {
              return _react2.default.createElement(
                'div',
                { className: 'menu' },
                children
              );
            },
            renderItem: function renderItem(item, isHighlighted) {
              return _react2.default.createElement(
                'div',
                {
                  className: 'item ' + (isHighlighted ? 'item-highlighted' : ''),
                  key: item.abbr + item.name + item.exchange
                },
                '' + item.abbr + '  ' + item.name + '  ' + item.exchange
              );
            }
          }),
          _react2.default.createElement(
            'button',
            {
              onClick: function onClick() {
                return _this2.handleSubmit;
              }
            },
            open ? 'Search' : 'Submit'
          )
        )
      );
    }
  }]);

  return App;
}(_react2.default.Component);

_reactDom2.default.render(_react2.default.createElement(App, null), document.getElementById('container'));

if (module.hot) {
  module.hot.accept();
}

},{"../../lib/index":4,"../../lib/utils":5,"react":193,"react-dom":41}],2:[function(require,module,exports){
(function (global){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PropTypes = require('prop-types');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var scrollIntoView = require('dom-scroll-into-view');

var IMPERATIVE_API = ['blur', 'checkValidity', 'click', 'focus', 'select', 'setCustomValidity', 'setSelectionRange', 'setRangeText'];

function getScrollOffset() {
  return {
    x: window.pageXOffset !== undefined ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft,
    y: window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop
  };
}

var Autocomplete = function (_React$Component) {
  _inherits(Autocomplete, _React$Component);

  function Autocomplete(props) {
    _classCallCheck(this, Autocomplete);

    var _this = _possibleConstructorReturn(this, (Autocomplete.__proto__ || Object.getPrototypeOf(Autocomplete)).call(this, props));

    _this.state = {
      isOpen: false,
      highlightedIndex: null
    };
    _this._debugStates = [];
    _this.ensureHighlightedIndex = _this.ensureHighlightedIndex.bind(_this);
    _this.exposeAPI = _this.exposeAPI.bind(_this);
    _this.handleInputFocus = _this.handleInputFocus.bind(_this);
    _this.handleInputBlur = _this.handleInputBlur.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleKeyDown = _this.handleKeyDown.bind(_this);
    _this.handleInputClick = _this.handleInputClick.bind(_this);
    _this.maybeAutoCompleteText = _this.maybeAutoCompleteText.bind(_this);
    return _this;
  }

  _createClass(Autocomplete, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      // this.refs is frozen, so we need to assign a new object to it
      this.refs = {};
      this._ignoreBlur = false;
      this._ignoreFocus = false;
      this._scrollOffset = null;
      this._scrollTimer = null;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearTimeout(this._scrollTimer);
      this._scrollTimer = null;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.highlightedIndex !== null) {
        this.setState(this.ensureHighlightedIndex);
      }
      if (nextProps.autoHighlight && (this.props.value !== nextProps.value || this.state.highlightedIndex === null)) {
        this.setState(this.maybeAutoCompleteText);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.isOpen()) {
        this.setMenuPositions();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.state.isOpen && !prevState.isOpen || 'open' in this.props && this.props.open && !prevProps.open) this.setMenuPositions();

      this.maybeScrollItemIntoView();
      if (prevState.isOpen !== this.state.isOpen) {
        this.props.onMenuVisibilityChange(this.state.isOpen);
      }
    }
  }, {
    key: 'exposeAPI',
    value: function exposeAPI(el) {
      var _this2 = this;

      this.refs.input = el;
      IMPERATIVE_API.forEach(function (ev) {
        return _this2[ev] = el && el[ev] && el[ev].bind(el);
      });
    }
  }, {
    key: 'maybeScrollItemIntoView',
    value: function maybeScrollItemIntoView() {
      if (this.isOpen() && this.state.highlightedIndex !== null) {
        var itemNode = this.refs['item-' + this.state.highlightedIndex];
        var menuNode = this.refs.menu;
        scrollIntoView(findDOMNode(itemNode), findDOMNode(menuNode), { onlyScrollIfNeeded: true });
      }
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      if (Autocomplete.keyDownHandlers[event.key]) Autocomplete.keyDownHandlers[event.key].call(this, event);else if (!this.isOpen()) {
        this.setState({
          isOpen: true
        });
      }
    }
  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      this.props.onChange(event, event.target.value);
    }
  }, {
    key: 'getFilteredItems',
    value: function getFilteredItems(props) {
      var items = props.items;

      if (props.shouldItemRender) {
        items = items.filter(function (item) {
          return props.shouldItemRender(item, props.value);
        });
      }

      if (props.sortItems) {
        items.sort(function (a, b) {
          return props.sortItems(a, b, props.value);
        });
      }

      return items;
    }
  }, {
    key: 'maybeAutoCompleteText',
    value: function maybeAutoCompleteText(state, props) {
      var highlightedIndex = state.highlightedIndex;
      var value = props.value,
          getItemValue = props.getItemValue;

      var index = highlightedIndex === null ? 0 : highlightedIndex;
      var items = this.getFilteredItems(props);
      for (var i = 0; i < items.length; i++) {
        if (props.isItemSelectable(items[index])) break;
        index = (index + 1) % items.length;
      }
      var matchedItem = items[index] && props.isItemSelectable(items[index]) ? items[index] : null;
      if (value !== '' && matchedItem) {
        var itemValue = getItemValue(matchedItem);
        var itemValueDoesMatch = itemValue.toLowerCase().indexOf(value.toLowerCase()) === 0;
        if (itemValueDoesMatch) {
          return { highlightedIndex: index };
        }
      }
      return { highlightedIndex: null };
    }
  }, {
    key: 'ensureHighlightedIndex',
    value: function ensureHighlightedIndex(state, props) {
      if (state.highlightedIndex >= this.getFilteredItems(props).length) {
        return { highlightedIndex: null };
      }
    }
  }, {
    key: 'setMenuPositions',
    value: function setMenuPositions() {
      var node = this.refs.input;
      var rect = node.getBoundingClientRect();
      var computedStyle = global.window.getComputedStyle(node);
      var marginBottom = parseInt(computedStyle.marginBottom, 10) || 0;
      var marginLeft = parseInt(computedStyle.marginLeft, 10) || 0;
      var marginRight = parseInt(computedStyle.marginRight, 10) || 0;
      this.setState({
        menuTop: rect.bottom + marginBottom,
        menuLeft: rect.left + marginLeft,
        menuWidth: rect.width + marginLeft + marginRight
      });
    }
  }, {
    key: 'highlightItemFromMouse',
    value: function highlightItemFromMouse(index) {
      this.setState({ highlightedIndex: index });
    }
  }, {
    key: 'selectItemFromMouse',
    value: function selectItemFromMouse(item) {
      var _this3 = this;

      var value = this.props.getItemValue(item);
      // The menu will de-render before a mouseLeave event
      // happens. Clear the flag to release control over focus
      this.setIgnoreBlur(false);
      this.setState({
        isOpen: false,
        highlightedIndex: null
      }, function () {
        _this3.props.onSelect(value, item);
      });
    }
  }, {
    key: 'setIgnoreBlur',
    value: function setIgnoreBlur(ignore) {
      this._ignoreBlur = ignore;
    }
  }, {
    key: 'renderMenu',
    value: function renderMenu() {
      var _this4 = this;

      var items = this.getFilteredItems(this.props).map(function (item, index) {
        var element = _this4.props.renderItem(item, _this4.state.highlightedIndex === index, { cursor: 'default' });
        return React.cloneElement(element, {
          onMouseEnter: _this4.props.isItemSelectable(item) ? function () {
            return _this4.highlightItemFromMouse(index);
          } : null,
          onClick: _this4.props.isItemSelectable(item) ? function () {
            return _this4.selectItemFromMouse(item);
          } : null,
          ref: function ref(e) {
            return _this4.refs['item-' + index] = e;
          }
        });
      });
      var style = {
        left: this.state.menuLeft,
        top: this.state.menuTop,
        minWidth: this.state.menuWidth
      };
      var menu = this.props.renderMenu(items, this.props.value, style);
      return React.cloneElement(menu, {
        ref: function ref(e) {
          return _this4.refs.menu = e;
        },
        // Ignore blur to prevent menu from de-rendering before we can process click
        onTouchStart: function onTouchStart() {
          return _this4.setIgnoreBlur(true);
        },
        onMouseEnter: function onMouseEnter() {
          return _this4.setIgnoreBlur(true);
        },
        onMouseLeave: function onMouseLeave() {
          return _this4.setIgnoreBlur(false);
        }
      });
    }
  }, {
    key: 'handleInputBlur',
    value: function handleInputBlur(event) {
      var _this5 = this;

      if (this._ignoreBlur) {
        this._ignoreFocus = true;
        this._scrollOffset = getScrollOffset();
        this.refs.input.focus();
        return;
      }
      var setStateCallback = void 0;
      var highlightedIndex = this.state.highlightedIndex;

      if (this.props.selectOnBlur && highlightedIndex !== null) {
        var items = this.getFilteredItems(this.props);
        var item = items[highlightedIndex];
        var value = this.props.getItemValue(item);
        setStateCallback = function setStateCallback() {
          return _this5.props.onSelect(value, item);
        };
      }
      this.setState({
        isOpen: false,
        highlightedIndex: null
      }, setStateCallback);
      var onBlur = this.props.inputProps.onBlur;

      if (onBlur) {
        onBlur(event);
      }
    }
  }, {
    key: 'handleInputFocus',
    value: function handleInputFocus(event) {
      var _this6 = this;

      if (this._ignoreFocus) {
        this._ignoreFocus = false;
        var _scrollOffset = this._scrollOffset,
            x = _scrollOffset.x,
            y = _scrollOffset.y;

        this._scrollOffset = null;
        // Focus will cause the browser to scroll the <input> into view.
        // This can cause the mouse coords to change, which in turn
        // could cause a new highlight to happen, cancelling the click
        // event (when selecting with the mouse)
        window.scrollTo(x, y);
        // Some browsers wait until all focus event handlers have been
        // processed before scrolling the <input> into view, so let's
        // scroll again on the next tick to ensure we're back to where
        // the user was before focus was lost. We could do the deferred
        // scroll only, but that causes a jarring split second jump in
        // some browsers that scroll before the focus event handlers
        // are triggered.
        clearTimeout(this._scrollTimer);
        this._scrollTimer = setTimeout(function () {
          _this6._scrollTimer = null;
          window.scrollTo(x, y);
        }, 0);
        return;
      }
      this.setState({ isOpen: true });
      var onFocus = this.props.inputProps.onFocus;

      if (onFocus) {
        onFocus(event);
      }
    }
  }, {
    key: 'isInputFocused',
    value: function isInputFocused() {
      var el = this.refs.input;
      return el.ownerDocument && el === el.ownerDocument.activeElement;
    }
  }, {
    key: 'handleInputClick',
    value: function handleInputClick() {
      // Input will not be focused if it's disabled
      if (this.isInputFocused() && !this.isOpen()) this.setState({ isOpen: true });
    }
  }, {
    key: 'composeEventHandlers',
    value: function composeEventHandlers(internal, external) {
      return external ? function (e) {
        internal(e);external(e);
      } : internal;
    }
  }, {
    key: 'isOpen',
    value: function isOpen() {
      return 'open' in this.props ? this.props.open : this.state.isOpen;
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.debug) {
        // you don't like it, you love it
        this._debugStates.push({
          id: this._debugStates.length,
          state: this.state
        });
      }

      var inputProps = this.props.inputProps;

      var open = this.isOpen();
      return React.createElement(
        'div',
        _extends({ style: _extends({}, this.props.wrapperStyle) }, this.props.wrapperProps),
        this.props.renderInput(_extends({}, inputProps, {
          role: 'combobox',
          'aria-autocomplete': 'list',
          'aria-expanded': open,
          autoComplete: 'off',
          ref: this.exposeAPI,
          onFocus: this.handleInputFocus,
          onBlur: this.handleInputBlur,
          onChange: this.handleChange,
          onKeyDown: this.composeEventHandlers(this.handleKeyDown, inputProps.onKeyDown),
          onClick: this.composeEventHandlers(this.handleInputClick, inputProps.onClick),
          value: this.props.value
        })),
        open && this.renderMenu(),
        this.props.debug && React.createElement(
          'pre',
          { style: { marginLeft: 300 } },
          JSON.stringify(this._debugStates.slice(Math.max(0, this._debugStates.length - 5), this._debugStates.length), null, 2)
        )
      );
    }
  }]);

  return Autocomplete;
}(React.Component);

Autocomplete.propTypes = {
  /**
   * The items to display in the dropdown menu
   */
  items: PropTypes.array.isRequired,
  /**
   * The value to display in the input field
   */
  value: PropTypes.any,
  /**
   * Arguments: `event: Event, value: String`
   *
   * Invoked every time the user changes the input's value.
   */
  onChange: PropTypes.func,
  /**
   * Arguments: `value: String, item: Any`
   *
   * Invoked when the user selects an item from the dropdown menu.
   */
  onSelect: PropTypes.func,
  /**
   * Arguments: `item: Any, value: String`
   *
   * Invoked for each entry in `items` and its return value is used to
   * determine whether or not it should be displayed in the dropdown menu.
   * By default all items are always rendered.
   */
  shouldItemRender: PropTypes.func,
  /**
   * Arguments: `item: Any`
   *
   * Invoked when attempting to select an item. The return value is used to
   * determine whether the item should be selectable or not.
   * By default all items are selectable.
   */
  isItemSelectable: PropTypes.func,
  /**
   * Arguments: `itemA: Any, itemB: Any, value: String`
   *
   * The function which is used to sort `items` before display.
   */
  sortItems: PropTypes.func,
  /**
   * Arguments: `item: Any`
   *
   * Used to read the display value from each entry in `items`.
   */
  getItemValue: PropTypes.func.isRequired,
  /**
   * Arguments: `item: Any, isHighlighted: Boolean, styles: Object`
   *
   * Invoked for each entry in `items` that also passes `shouldItemRender` to
   * generate the render tree for each item in the dropdown menu. `styles` is
   * an optional set of styles that can be applied to improve the look/feel
   * of the items in the dropdown menu.
   */
  renderItem: PropTypes.func.isRequired,
  /**
   * Arguments: `items: Array<Any>, value: String, styles: Object`
   *
   * Invoked to generate the render tree for the dropdown menu. Ensure the
   * returned tree includes every entry in `items` or else the highlight order
   * and keyboard navigation logic will break. `styles` will contain
   * { top, left, minWidth } which are the coordinates of the top-left corner
   * and the width of the dropdown menu.
   */
  renderMenu: PropTypes.func,
  /**
   * Styles that are applied to the dropdown menu in the default `renderMenu`
   * implementation. If you override `renderMenu` and you want to use
   * `menuStyle` you must manually apply them (`this.props.menuStyle`).
   */
  menuStyle: PropTypes.object,
  /**
   * Arguments: `props: Object`
   *
   * Invoked to generate the input element. The `props` argument is the result
   * of merging `props.inputProps` with a selection of props that are required
   * both for functionality and accessibility. At the very least you need to
   * apply `props.ref` and all `props.on<event>` event handlers. Failing to do
   * this will cause `Autocomplete` to behave unexpectedly.
   */
  renderInput: PropTypes.func,
  /**
   * Props passed to `props.renderInput`. By default these props will be
   * applied to the `<input />` element rendered by `Autocomplete`, unless you
   * have specified a custom value for `props.renderInput`. Any properties
   * supported by `HTMLInputElement` can be specified, apart from the
   * following which are set by `Autocomplete`: value, autoComplete, role,
   * aria-autocomplete. `inputProps` is commonly used for (but not limited to)
   * placeholder, event handlers (onFocus, onBlur, etc.), autoFocus, etc..
   */
  inputProps: PropTypes.object,
  /**
   * Props that are applied to the element which wraps the `<input />` and
   * dropdown menu elements rendered by `Autocomplete`.
   */
  wrapperProps: PropTypes.object,
  /**
   * This is a shorthand for `wrapperProps={{ style: <your styles> }}`.
   * Note that `wrapperStyle` is applied before `wrapperProps`, so the latter
   * will win if it contains a `style` entry.
   */
  wrapperStyle: PropTypes.object,
  /**
   * Whether or not to automatically highlight the top match in the dropdown
   * menu.
   */
  autoHighlight: PropTypes.bool,
  /**
   * Whether or not to automatically select the highlighted item when the
   * `<input>` loses focus.
   */
  selectOnBlur: PropTypes.bool,
  /**
   * Arguments: `isOpen: Boolean`
   *
   * Invoked every time the dropdown menu's visibility changes (i.e. every
   * time it is displayed/hidden).
   */
  onMenuVisibilityChange: PropTypes.func,
  /**
   * Used to override the internal logic which displays/hides the dropdown
   * menu. This is useful if you want to force a certain state based on your
   * UX/business logic. Use it together with `onMenuVisibilityChange` for
   * fine-grained control over the dropdown menu dynamics.
   */
  open: PropTypes.bool,
  debug: PropTypes.bool
};
Autocomplete.defaultProps = {
  value: '',
  wrapperProps: {},
  wrapperStyle: {
    display: 'inline-block'
  },
  inputProps: {},
  renderInput: function renderInput(props) {
    return React.createElement('input', props);
  },
  onChange: function onChange() {},
  onSelect: function onSelect() {},
  isItemSelectable: function isItemSelectable() {
    return true;
  },
  renderMenu: function renderMenu(items, value, style) {
    return React.createElement('div', { style: _extends({}, style, this.menuStyle), children: items });
  },

  menuStyle: {
    borderRadius: '3px',
    boxShadow: '0 2px 12px rgba(0, 0, 0, 0.1)',
    background: 'rgba(255, 255, 255, 0.9)',
    padding: '2px 0',
    fontSize: '90%',
    position: 'fixed',
    overflow: 'auto',
    maxHeight: '50%' // TODO: don't cheat, let it flow to the bottom
  },
  autoHighlight: true,
  selectOnBlur: false,
  onMenuVisibilityChange: function onMenuVisibilityChange() {}
};
Autocomplete.keyDownHandlers = {
  ArrowDown: function ArrowDown(event) {
    event.preventDefault();
    var items = this.getFilteredItems(this.props);
    if (!items.length) return;
    var highlightedIndex = this.state.highlightedIndex;

    var index = highlightedIndex === null ? -1 : highlightedIndex;
    for (var i = 0; i < items.length; i++) {
      var p = (index + i + 1) % items.length;
      if (this.props.isItemSelectable(items[p])) {
        index = p;
        break;
      }
    }
    if (index > -1 && index !== highlightedIndex) {
      this.setState({
        highlightedIndex: index,
        isOpen: true
      });
    }
  },
  ArrowUp: function ArrowUp(event) {
    event.preventDefault();
    var items = this.getFilteredItems(this.props);
    if (!items.length) return;
    var highlightedIndex = this.state.highlightedIndex;

    var index = highlightedIndex === null ? items.length : highlightedIndex;
    for (var i = 0; i < items.length; i++) {
      var p = (index - (1 + i) + items.length) % items.length;
      if (this.props.isItemSelectable(items[p])) {
        index = p;
        break;
      }
    }
    if (index !== items.length) {
      this.setState({
        highlightedIndex: index,
        isOpen: true
      });
    }
  },
  Enter: function Enter(event) {
    var _this7 = this;

    // Key code 229 is used for selecting items from character selectors (Pinyin, Kana, etc)
    if (event.keyCode !== 13) return;
    // In case the user is currently hovering over the menu
    this.setIgnoreBlur(false);
    if (!this.isOpen()) {
      // menu is closed so there is no selection to accept -> do nothing
      return;
    } else if (this.state.highlightedIndex == null) {
      // input has focus but no menu item is selected + enter is hit -> close the menu, highlight whatever's in input
      this.setState({
        isOpen: false
      }, function () {
        _this7.refs.input.select();
      });
    } else {
      // text entered + menu item has been highlighted + enter is hit -> update value to that of selected menu item, close the menu
      event.preventDefault();
      var item = this.getFilteredItems(this.props)[this.state.highlightedIndex];
      var value = this.props.getItemValue(item);
      this.setState({
        isOpen: false,
        highlightedIndex: null
      }, function () {
        //this.refs.input.focus() // TODO: file issue
        _this7.refs.input.setSelectionRange(value.length, value.length);
        _this7.props.onSelect(value, item);
      });
    }
  },
  Escape: function Escape() {
    // In case the user is currently hovering over the menu
    this.setIgnoreBlur(false);
    this.setState({
      highlightedIndex: null,
      isOpen: false
    });
  },
  Tab: function Tab() {
    // In case the user is currently hovering over the menu
    this.setIgnoreBlur(false);
  }
};


module.exports = Autocomplete;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"dom-scroll-into-view":7,"prop-types":39,"react":193,"react-dom":41}],3:[function(require,module,exports){
module.exports=[
  {
    "abbr": "A",
    "name": "Agilent Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AA",
    "name": "Alcoa Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AABA",
    "name": "Altaba Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AAC",
    "name": "AAC Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AAL",
    "name": "American Airlines Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AAMC",
    "name": "Altisource Asset Management Corp",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AAME",
    "name": "Atlantic American Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AAN",
    "name": "Aaron&#39;s,  Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AAOI",
    "name": "Applied Optoelectronics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AAON",
    "name": "AAON, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AAP",
    "name": "Advance Auto Parts Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AAPL",
    "name": "Apple Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AAT",
    "name": "American Assets Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AAU",
    "name": "Almaden Minerals, Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AAWW",
    "name": "Atlas Air Worldwide Holdings",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AAXJ",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AAXN",
    "name": "Axon Enterprise, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AB",
    "name": "AllianceBernstein Holding L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABAC",
    "name": "Renmin Tianli Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABB",
    "name": "ABB Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABBV",
    "name": "AbbVie Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABC",
    "name": "AmerisourceBergen Corporation (Holding Co)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABCB",
    "name": "Ameris Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABCD",
    "name": "Cambium Learning Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABDC",
    "name": "Alcentra Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABEO",
    "name": "Abeona Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABEOW",
    "name": "Abeona Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABEV",
    "name": "Ambev S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABG",
    "name": "Asbury Automotive Group Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABIL",
    "name": "Ability Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABIO",
    "name": "ARCA biopharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABM",
    "name": "ABM Industries Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABMD",
    "name": "ABIOMED, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABR",
    "name": "Arbor Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABR^A",
    "name": "Arbor Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABR^B",
    "name": "Arbor Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABR^C",
    "name": "Arbor Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABT",
    "name": "Abbott Laboratories",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ABTX",
    "name": "Allegiance Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABUS",
    "name": "Arbutus Biopharma Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ABX",
    "name": "Barrick Gold Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AC",
    "name": "Associated Capital Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACA",
    "name": "Arcosa, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACAD",
    "name": "ACADIA Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACB",
    "name": "Aurora Cannabis Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACBI",
    "name": "Atlantic Capital Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACC",
    "name": "American Campus Communities Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACCO",
    "name": "Acco Brands Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACER",
    "name": "Acer Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACET",
    "name": "Aceto Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACGL",
    "name": "Arch Capital Group Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACGLO",
    "name": "Arch Capital Group Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACGLP",
    "name": "Arch Capital Group Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACH",
    "name": "Aluminum Corporation of China Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACHC",
    "name": "Acadia Healthcare Company, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACHN",
    "name": "Achillion Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACHV",
    "name": "Achieve Life Sciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACIA",
    "name": "Acacia Communications, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACIU",
    "name": "AC Immune SA",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACIW",
    "name": "ACI Worldwide, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACLS",
    "name": "Axcelis Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACM",
    "name": "AECOM",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACMR",
    "name": "ACM Research, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACN",
    "name": "Accenture plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACNB",
    "name": "ACNB Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACOR",
    "name": "Acorda Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACP",
    "name": "Aberdeen Income Credit Strategies Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACRE",
    "name": "Ares Commercial Real Estate Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACRS",
    "name": "Aclaris Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACRX",
    "name": "AcelRx Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACST",
    "name": "Acasti Pharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACT",
    "name": "AdvisorShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACTG",
    "name": "Acacia Research Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACU",
    "name": "Acme United Corporation.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ACV",
    "name": "AllianzGI Diversified Income & Convertible Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ACWI",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACWX",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ACY",
    "name": "AeroCentury Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ADAP",
    "name": "Adaptimmune Therapeutics plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADBE",
    "name": "Adobe Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADC",
    "name": "Agree Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ADES",
    "name": "Advanced Emissions Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADI",
    "name": "Analog Devices, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADIL",
    "name": "Adial Pharmaceuticals, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADILW",
    "name": "Adial Pharmaceuticals, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADM",
    "name": "Archer-Daniels-Midland Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ADMA",
    "name": "ADMA Biologics Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADMP",
    "name": "Adamis Pharmaceuticals Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADMS",
    "name": "Adamas Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADNT",
    "name": "Adient plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ADOM",
    "name": "ADOMANI, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADP",
    "name": "Automatic Data Processing, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADRA",
    "name": "Invesco BLDRS Index Funds Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADRD",
    "name": "Invesco BLDRS Index Funds Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADRE",
    "name": "Invesco BLDRS Index Funds Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADRO",
    "name": "Aduro Biotech, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADRU",
    "name": "Invesco BLDRS Index Funds Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADS",
    "name": "Alliance Data Systems Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ADSK",
    "name": "Autodesk, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADSW",
    "name": "Advanced Disposal Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ADT",
    "name": "ADT Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ADTN",
    "name": "ADTRAN, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADUS",
    "name": "Addus HomeCare Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADVM",
    "name": "Adverum Biotechnologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ADX",
    "name": "Adams Diversified Equity Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ADXS",
    "name": "Advaxis, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AE",
    "name": "Adams Resources & Energy, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AEB",
    "name": "Aegon NV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AED",
    "name": "Aegon NV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AEE",
    "name": "Ameren Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AEF",
    "name": "Aberdeen Emerging Markets Equity Income Fund, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AEG",
    "name": "Aegon NV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AEGN",
    "name": "Aegion Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AEH",
    "name": "Aegon NV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AEHR",
    "name": "Aehr Test Systems",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AEIS",
    "name": "Advanced Energy Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AEL",
    "name": "American Equity Investment Life Holding Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AEM",
    "name": "Agnico Eagle Mines Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AEMD",
    "name": "Aethlon Medical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AEO",
    "name": "American Eagle Outfitters, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AEP",
    "name": "American Electric Power Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AER",
    "name": "Aercap Holdings N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AERI",
    "name": "Aerie Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AES",
    "name": "The AES Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AETI",
    "name": "American Electric Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AEY",
    "name": "ADDvantage Technologies Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AEYE",
    "name": "AudioEye, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AEZS",
    "name": "AEterna Zentaris Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AFB",
    "name": "Alliance National Municipal Income Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFC",
    "name": "Ares Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFG",
    "name": "American Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFGE",
    "name": "American Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFGH",
    "name": "American Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFH",
    "name": "Atlas Financial Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AFHBL",
    "name": "Atlas Financial Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AFI",
    "name": "Armstrong Flooring, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFIN",
    "name": "American Finance Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AFL",
    "name": "Aflac Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFMD",
    "name": "Affimed N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AFSI^A",
    "name": "AmTrust Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFSI^B",
    "name": "AmTrust Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFSI^C",
    "name": "AmTrust Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFSI^D",
    "name": "AmTrust Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFSI^E",
    "name": "AmTrust Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFSI^F",
    "name": "AmTrust Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFSS",
    "name": "AmTrust Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFST",
    "name": "AmTrust Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AFT",
    "name": "Apollo Senior Floating Rate Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AG",
    "name": "First Majestic Silver Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGCO",
    "name": "AGCO Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGD",
    "name": "Aberdeen Global Dynamic Dividend Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGE",
    "name": "AgeX Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AGEN",
    "name": "Agenus Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGFS",
    "name": "AgroFresh Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGFSW",
    "name": "AgroFresh Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGI",
    "name": "Alamos Gold Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGIO",
    "name": "Agios Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGLE",
    "name": "Aeglea BioTherapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGM",
    "name": "Federal Agricultural Mortgage Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGM^A",
    "name": "Federal Agricultural Mortgage Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGM.A",
    "name": "Federal Agricultural Mortgage Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGM^B",
    "name": "Federal Agricultural Mortgage Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGM^C",
    "name": "Federal Agricultural Mortgage Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGMH",
    "name": "AGM Group Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGN",
    "name": "Allergan plc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGNC",
    "name": "AGNC Investment Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGNCB",
    "name": "AGNC Investment Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGNCN",
    "name": "AGNC Investment Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGND",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGO",
    "name": "Assured Guaranty Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGO^B",
    "name": "Assured Guaranty Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGO^E",
    "name": "Assured Guaranty Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGO^F",
    "name": "Assured Guaranty Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGR",
    "name": "Avangrid, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGRO",
    "name": "Adecoagro S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGRX",
    "name": "Agile Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGS",
    "name": "PlayAGS, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGTC",
    "name": "Applied Genetic Technologies Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGX",
    "name": "Argan, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AGYS",
    "name": "Agilysys, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AGZD",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AHC",
    "name": "A.H. Belo Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHH",
    "name": "Armada Hoffler Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHL",
    "name": "Aspen Insurance Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHL^C",
    "name": "Aspen Insurance Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHL^D",
    "name": "Aspen Insurance Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHPA",
    "name": "Avista Healthcare Public Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AHPAU",
    "name": "Avista Healthcare Public Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AHPAW",
    "name": "Avista Healthcare Public Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AHPI",
    "name": "Allied Healthcare Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AHT",
    "name": "Ashford Hospitality Trust Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHT^D",
    "name": "Ashford Hospitality Trust Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHT^F",
    "name": "Ashford Hospitality Trust Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHT^G",
    "name": "Ashford Hospitality Trust Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHT^H",
    "name": "Ashford Hospitality Trust Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AHT^I",
    "name": "Ashford Hospitality Trust Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AI",
    "name": "Arlington Asset Investment Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIA",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AI^B",
    "name": "Arlington Asset Investment Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIC",
    "name": "Arlington Asset Investment Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIF",
    "name": "Apollo Tactical Income Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIG",
    "name": "American International Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIG.WS",
    "name": "American International Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIHS",
    "name": "Senmiao Technology Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AIMC",
    "name": "Altra Industrial Motion Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AIMT",
    "name": "Aimmune Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AIN",
    "name": "Albany International Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AINC",
    "name": "Ashford Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AINV",
    "name": "Apollo Investment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AIPT",
    "name": "Precision Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AIQ",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AIR",
    "name": "AAR Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIRG",
    "name": "Airgain, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AIRI",
    "name": "Air Industries Group",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AIRR",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AIRT",
    "name": "Air T, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AIT",
    "name": "Applied Industrial Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIV",
    "name": "Apartment Investment and Management Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIV^A",
    "name": "Apartment Investment and Management Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIW",
    "name": "Arlington Asset Investment Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIY",
    "name": "Apollo Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIZ",
    "name": "Assurant, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AIZP",
    "name": "Assurant, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AJG",
    "name": "Arthur J. Gallagher & Co.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AJRD",
    "name": "Aerojet Rocketdyne Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AJX",
    "name": "Great Ajax Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AJXA",
    "name": "Great Ajax Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AKAM",
    "name": "Akamai Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AKAO",
    "name": "Achaogen, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AKBA",
    "name": "Akebia Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AKCA",
    "name": "Akcea Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AKER",
    "name": "Akers Biosciences Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AKG",
    "name": "Asanko Gold Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AKO.A",
    "name": "Embotelladora Andina S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AKO.B",
    "name": "Embotelladora Andina S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AKP",
    "name": "Alliance California Municipal Income Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AKR",
    "name": "Acadia Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AKRX",
    "name": "Akorn, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AKS",
    "name": "AK Steel Holding Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AKTS",
    "name": "Akoustis Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AKTX",
    "name": "Akari Therapeutics Plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AL",
    "name": "Air Lease Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALAC",
    "name": "Alberton Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALACR",
    "name": "Alberton Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALACU",
    "name": "Alberton Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALACW",
    "name": "Alberton Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALB",
    "name": "Albemarle Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALBO",
    "name": "Albireo Pharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALCO",
    "name": "Alico, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALDR",
    "name": "Alder BioPharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALDX",
    "name": "Aldeyra Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALE",
    "name": "Allete, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALEX",
    "name": "Alexander & Baldwin, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALG",
    "name": "Alamo Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALGN",
    "name": "Align Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALGR",
    "name": "Allegro Merger Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALGRR",
    "name": "Allegro Merger Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALGRU",
    "name": "Allegro Merger Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALGRW",
    "name": "Allegro Merger Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALGT",
    "name": "Allegiant Travel Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALIM",
    "name": "Alimera Sciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALJJ",
    "name": "ALJ Regional Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALK",
    "name": "Alaska Air Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALKS",
    "name": "Alkermes plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALL",
    "name": "Allstate Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALL^A",
    "name": "Allstate Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALL^B",
    "name": "Allstate Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALL^D",
    "name": "Allstate Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALLE",
    "name": "Allegion plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALL^E",
    "name": "Allstate Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALL^F",
    "name": "Allstate Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALL^G",
    "name": "Allstate Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALLK",
    "name": "Allakos Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALLO",
    "name": "Allogene Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALLT",
    "name": "Allot Communications Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALLY",
    "name": "Ally Financial Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALLY^A",
    "name": "Ally Financial Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALNA",
    "name": "Allena Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALNY",
    "name": "Alnylam Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALO",
    "name": "Alio Gold Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ALOT",
    "name": "AstroNova, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALPN",
    "name": "Alpine Immune Sciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALP^Q",
    "name": "Alabama Power Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALQA",
    "name": "Alliqua BioMedical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALRM",
    "name": "Alarm.com Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALRN",
    "name": "Aileron Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALSK",
    "name": "Alaska Communications Systems Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALSN",
    "name": "Allison Transmission Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALT",
    "name": "Altimmune, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALTM",
    "name": "Altus Midstream Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALTMW",
    "name": "Altus Midstream Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALTR",
    "name": "Altair Engineering Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALTY",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALV",
    "name": "Autoliv, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALX",
    "name": "Alexander&#39;s, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ALXN",
    "name": "Alexion Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALYA",
    "name": "Alithya Group inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ALZH",
    "name": "Alzheon, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AM",
    "name": "Antero Midstream Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMAG",
    "name": "AMAG Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMAL",
    "name": "Amalgamated Bank",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMAT",
    "name": "Applied Materials, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMBA",
    "name": "Ambarella, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMBC",
    "name": "Ambac Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMBCW",
    "name": "Ambac Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMBO",
    "name": "Ambow Education Holding Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AMBR",
    "name": "Amber Road, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMC",
    "name": "AMC Entertainment Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMCA",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMCIU",
    "name": "AMCI Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMCN",
    "name": "AirMedia Group Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMCX",
    "name": "AMC Networks Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMD",
    "name": "Advanced Micro Devices, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AME",
    "name": "AMTEK, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMED",
    "name": "Amedisys Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMEH",
    "name": "Apollo Medical Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMG",
    "name": "Affiliated Managers Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMGN",
    "name": "Amgen Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMGP",
    "name": "Antero Midstream GP LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMH",
    "name": "American Homes 4 Rent",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMH^D",
    "name": "American Homes 4 Rent",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMH^E",
    "name": "American Homes 4 Rent",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMH^F",
    "name": "American Homes 4 Rent",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMH^G",
    "name": "American Homes 4 Rent",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMH^H",
    "name": "American Homes 4 Rent",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMID",
    "name": "American Midstream Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMKR",
    "name": "Amkor Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMMA",
    "name": "Alliance MMA, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMN",
    "name": "AMN Healthcare Services Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMNB",
    "name": "American National Bankshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMOT",
    "name": "Allied Motion Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMOV",
    "name": "America Movil, S.A.B. de C.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMOV",
    "name": "America Movil, S.A.B. de C.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMP",
    "name": "AMERIPRISE FINANCIAL SERVICES, INC.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMPE",
    "name": "Ampio Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AMPH",
    "name": "Amphastar Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMR",
    "name": "Alta Mesa Resources, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMRB",
    "name": "American River Bankshares",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMRC",
    "name": "Ameresco, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMRH",
    "name": "Ameri Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMRHW",
    "name": "Ameri Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMRK",
    "name": "A-Mark Precious Metals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMRN",
    "name": "Amarin Corporation plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMRS",
    "name": "Amyris, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMRWW",
    "name": "Alta Mesa Resources, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMRX",
    "name": "Amneal Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMS",
    "name": "American Shared Hospital Services",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AMSC",
    "name": "American Superconductor Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMSF",
    "name": "AMERISAFE, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMSWA",
    "name": "American Software, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMT",
    "name": "American Tower Corporation (REIT)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMTB",
    "name": "Mercantil Bank Holding Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMTBB",
    "name": "Mercantil Bank Holding Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMTD",
    "name": "TD Ameritrade Holding Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMTX",
    "name": "Aemetis, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMWD",
    "name": "American Woodmark Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AMX",
    "name": "America Movil, S.A.B. de C.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AMZN",
    "name": "Amazon.com, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AN",
    "name": "AutoNation, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANAB",
    "name": "AnaptysBio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANAT",
    "name": "American National Insurance Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANCX",
    "name": "Access National Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANDE",
    "name": "The Andersons, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANDX",
    "name": "Andeavor Logistics LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANET",
    "name": "Arista Networks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANF",
    "name": "Abercrombie & Fitch Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANFI",
    "name": "Amira Nature Foods Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANGI",
    "name": "ANGI Homeservices Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANGO",
    "name": "AngioDynamics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANH",
    "name": "Anworth Mortgage Asset  Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANH^A",
    "name": "Anworth Mortgage Asset  Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANH^B",
    "name": "Anworth Mortgage Asset  Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANH^C",
    "name": "Anworth Mortgage Asset  Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANIK",
    "name": "Anika Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANIP",
    "name": "ANI Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANIX",
    "name": "Anixa Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANSS",
    "name": "ANSYS, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ANTM",
    "name": "Anthem, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ANY",
    "name": "Sphere 3D Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AOBC",
    "name": "American Outdoor Brands Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AOD",
    "name": "Aberdeen Total Dynamic Dividend Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AON",
    "name": "Aon plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AOS",
    "name": "Smith (A.O.) Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AOSL",
    "name": "Alpha and Omega Semiconductor Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AP",
    "name": "Ampco-Pittsburgh Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APA",
    "name": "Apache Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APAM",
    "name": "Artisan Partners Asset Management Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APB",
    "name": "Asia Pacific Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APC",
    "name": "Anadarko Petroleum Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APD",
    "name": "Air Products and Chemicals, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APDN",
    "name": "Applied DNA Sciences Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APDNW",
    "name": "Applied DNA Sciences Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APEI",
    "name": "American Public Education, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APEN",
    "name": "Apollo Endosurgery, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APF",
    "name": "Morgan Stanley Asia-Pacific Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APH",
    "name": "Amphenol Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APHA",
    "name": "Aphria Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APHB",
    "name": "AmpliPhi Biosciences Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "APLE",
    "name": "Apple Hospitality REIT, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APLS",
    "name": "Apellis Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APO",
    "name": "Apollo Global Management, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APO^A",
    "name": "Apollo Global Management, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APO^B",
    "name": "Apollo Global Management, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APOG",
    "name": "Apogee Enterprises, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APOP",
    "name": "Cellect Biotechnology Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APOPW",
    "name": "Cellect Biotechnology Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APPF",
    "name": "AppFolio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APPN",
    "name": "Appian Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APPS",
    "name": "Digital Turbine, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APRI",
    "name": "Apricus Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APRN",
    "name": "Blue Apron Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APT",
    "name": "Alpha Pro Tech, Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "APTI",
    "name": "Apptio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APTO",
    "name": "Aptose Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APTS",
    "name": "Preferred Apartment Communities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APTV",
    "name": "Aptiv PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APTX",
    "name": "Aptinyx Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APU",
    "name": "AmeriGas Partners, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "APVO",
    "name": "Aptevo Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APWC",
    "name": "Asia Pacific Wire & Cable Corporation Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "APY",
    "name": "Apergy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AQ",
    "name": "Aquantia Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AQB",
    "name": "AquaBounty Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AQMS",
    "name": "Aqua Metals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AQN",
    "name": "Algonquin Power & Utilities Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AQNA",
    "name": "Algonquin Power & Utilities Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AQST",
    "name": "Aquestive Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AQUA",
    "name": "Evoqua Water Technologies Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AQXP",
    "name": "Aquinox Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AR",
    "name": "Antero Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARA",
    "name": "American Renal Associates Holdings, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARAV",
    "name": "Aravive, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARAY",
    "name": "Accuray Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARC",
    "name": "ARC Document Solutions, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARCB",
    "name": "ArcBest Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARCC",
    "name": "Ares Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARCE",
    "name": "Arco Platform Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARCH",
    "name": "Arch Coal, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARCI",
    "name": "Appliance Recycling Centers of America, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARCO",
    "name": "Arcos Dorados Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARCT",
    "name": "Arcturus Therapeutics Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARCW",
    "name": "ARC Group Worldwide, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARD",
    "name": "Ardagh Group S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARDC",
    "name": "Ares Dynamic Credit Allocation Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARDM",
    "name": "Aradigm Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARDS",
    "name": "Aridis Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARDX",
    "name": "Ardelyx, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARE",
    "name": "Alexandria Real Estate Equities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARE^D",
    "name": "Alexandria Real Estate Equities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARES",
    "name": "Ares Management Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARES^A",
    "name": "Ares Management Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AREX",
    "name": "Approach Resources Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARGD",
    "name": "Argo Group International Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARGO",
    "name": "Argo Group International Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARGX",
    "name": "argenx SE",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARI",
    "name": "Apollo Commercial Real Estate Finance",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARI^C",
    "name": "Apollo Commercial Real Estate Finance",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARII",
    "name": "American Railcar Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARKR",
    "name": "Ark Restaurants Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARL",
    "name": "American Realty Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARLO",
    "name": "Arlo Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARLP",
    "name": "Alliance Resource Partners, L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARMK",
    "name": "Aramark",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARNA",
    "name": "Arena Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARNC",
    "name": "Arconic Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARNC^",
    "name": "Arconic Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AROC",
    "name": "Archrock, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AROW",
    "name": "Arrow Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARPO",
    "name": "Aerpio Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARQL",
    "name": "ArQule, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARR",
    "name": "ARMOUR Residential REIT, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARR^A",
    "name": "ARMOUR Residential REIT, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARR^B",
    "name": "ARMOUR Residential REIT, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARRS",
    "name": "ARRIS International plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARRY",
    "name": "Array BioPharma Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARTNA",
    "name": "Artesian Resources Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARTW",
    "name": "Art&#39;s-Way Manufacturing Co., Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARTX",
    "name": "Arotech Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARVN",
    "name": "Arvinas, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARW",
    "name": "Arrow Electronics, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ARWR",
    "name": "Arrowhead Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARYA",
    "name": "ARYA Sciences Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARYAU",
    "name": "ARYA Sciences Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ARYAW",
    "name": "ARYA Sciences Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASA",
    "name": "ASA Gold and Precious Metals Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASB",
    "name": "Associated Banc-Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASB^C",
    "name": "Associated Banc-Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASB^D",
    "name": "Associated Banc-Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASB^E",
    "name": "Associated Banc-Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASC",
    "name": "Ardmore Shipping Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASCMA",
    "name": "Ascent Capital Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASET",
    "name": "FlexShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASFI",
    "name": "Asta Funding, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASG",
    "name": "Liberty All-Star Growth Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASGN",
    "name": "ASGN Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASH",
    "name": "Ashland Global Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASIX",
    "name": "AdvanSix Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASLN",
    "name": "ASLAN Pharmaceuticals Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASM",
    "name": "Avino Silver",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ASMB",
    "name": "Assembly Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASML",
    "name": "ASML Holding N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASNA",
    "name": "Ascena Retail Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASND",
    "name": "Ascendis Pharma A/S",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASNS",
    "name": "Arsanis, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASPN",
    "name": "Aspen Aerogels, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASPS",
    "name": "Altisource Portfolio Solutions S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASPU",
    "name": "Aspen Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASR",
    "name": "Grupo Aeroportuario del Sureste, S.A. de C.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASRT",
    "name": "Assertio Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASRV",
    "name": "AmeriServ Financial Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASRVP",
    "name": "AmeriServ Financial Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AST",
    "name": "Asterias Biotherapeutics, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ASTC",
    "name": "Astrotech Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASTE",
    "name": "Astec Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASUR",
    "name": "Asure Software Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASV",
    "name": "ASV Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ASX",
    "name": "ASE Technology Holding Co., Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ASYS",
    "name": "Amtech Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AT",
    "name": "Atlantic Power Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATAI",
    "name": "ATA Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATAX",
    "name": "America First Multifamily Investors, L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATEC",
    "name": "Alphatec Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATEN",
    "name": "A10 Networks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATEST",
    "name": "NASDAQ TEST STOCK",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ATEST.A",
    "name": "NASDAQ TEST STOCK",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ATEST.B",
    "name": "NASDAQ TEST STOCK",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ATEST.C",
    "name": "NASDAQ TEST STOCK",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ATGE",
    "name": "Adtalem Global Education Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATH",
    "name": "Athene Holding Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATHM",
    "name": "Autohome Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATHN",
    "name": "athenahealth, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATHX",
    "name": "Athersys, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATI",
    "name": "Allegheny Technologies Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATIS",
    "name": "Attis Industries Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATISW",
    "name": "Attis Industries Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATKR",
    "name": "Atkore International Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATLC",
    "name": "Atlanticus Holdings Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATLO",
    "name": "Ames National Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATNI",
    "name": "ATN International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATNM",
    "name": "Actinium Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ATNX",
    "name": "Athenex, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATO",
    "name": "Atmos Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATOM",
    "name": "Atomera Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATOS",
    "name": "Atossa Genetics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATR",
    "name": "AptarGroup, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATRA",
    "name": "Atara Biotherapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATRC",
    "name": "AtriCure, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATRI",
    "name": "Atrion Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATRO",
    "name": "Astronics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATRS",
    "name": "Antares Pharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATSG",
    "name": "Air Transport Services Group, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATTO",
    "name": "Atento S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATTU",
    "name": "Attunity Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATU",
    "name": "Actuant Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATUS",
    "name": "Altice USA, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATV",
    "name": "Acorn International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ATVI",
    "name": "Activision Blizzard, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ATXI",
    "name": "Avenue Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AU",
    "name": "AngloGold Ashanti Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AUBN",
    "name": "Auburn National Bancorporation, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AUDC",
    "name": "AudioCodes Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AUG",
    "name": "Auryn Resources Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AUMN",
    "name": "Golden Minerals Company",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AUO",
    "name": "AU Optronics Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AUPH",
    "name": "Aurinia Pharmaceuticals Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AUTL",
    "name": "Autolus Therapeutics plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AUTO",
    "name": "AutoWeb, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AUY",
    "name": "Yamana Gold Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVA",
    "name": "Avista Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVAL",
    "name": "Grupo Aval Acciones y Valores S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVAV",
    "name": "AeroVironment, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVB",
    "name": "AvalonBay Communities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVCO",
    "name": "Avalon GloboCare Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVD",
    "name": "American Vanguard Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVDL",
    "name": "Avadel Pharmaceuticals plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVEO",
    "name": "AVEO Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVGO",
    "name": "Broadcom Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVGR",
    "name": "Avinger, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVH",
    "name": "Avianca Holdings S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVID",
    "name": "Avid Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVK",
    "name": "Advent Claymore Convertible Securities and Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVLR",
    "name": "Avalara, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVNS",
    "name": "Avanos Medical, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVNW",
    "name": "Aviat Networks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVP",
    "name": "Avon Products, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVRO",
    "name": "AVROBIO, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVT",
    "name": "Avnet, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVX",
    "name": "AVX Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVXL",
    "name": "Anavex Life Sciences Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AVY",
    "name": "Avery Dennison Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AVYA",
    "name": "Avaya Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AWF",
    "name": "Alliance World Dollar Government Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AWI",
    "name": "Armstrong World Industries Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AWK",
    "name": "American Water Works",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AWP",
    "name": "Aberdeen Global Premier Properties Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AWR",
    "name": "American States Water Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AWRE",
    "name": "Aware, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AWSM",
    "name": "Cool Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AWX",
    "name": "Avalon Holdings Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AX",
    "name": "Axos Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXAS",
    "name": "Abraxas Petroleum Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AXDX",
    "name": "Accelerate Diagnostics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AXE",
    "name": "Anixter International Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXGN",
    "name": "AxoGen, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AXL",
    "name": "American Axle & Manufacturing Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXNX",
    "name": "Axonics Modulation Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AXO",
    "name": "Axos Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXON",
    "name": "Axovant Sciences Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AXP",
    "name": "American Express Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXR",
    "name": "AMREP Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXS",
    "name": "Axis Capital Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXS^D",
    "name": "Axis Capital Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXS^E",
    "name": "Axis Capital Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXSM",
    "name": "Axsome Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AXTA",
    "name": "Axalta Coating Systems Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AXTI",
    "name": "AXT Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AXU",
    "name": "Alexco Resource Corp",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "AY",
    "name": "Atlantica Yield plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AYI",
    "name": "Acuity Brands, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AYR",
    "name": "Aircastle Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AYTU",
    "name": "Aytu BioScience, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AYX",
    "name": "Alteryx, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AZN",
    "name": "Astrazeneca PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AZO",
    "name": "AutoZone, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AZPN",
    "name": "Aspen Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AZRE",
    "name": "Azure Power Global Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AZRX",
    "name": "AzurRx BioPharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "AZUL",
    "name": "Azul S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "AZZ",
    "name": "AZZ Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "B",
    "name": "Barnes Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BA",
    "name": "Boeing Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BABA",
    "name": "Alibaba Group Holding Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BABY",
    "name": "Natus Medical Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BAC",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAC^A",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAC^B",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAC^C",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAC^E",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAC^K",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAC^L",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAC^W",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAC.WS.A",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAC^Y",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAF",
    "name": "BlackRock Income Investment Quality Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAH",
    "name": "Booz Allen Hamilton Holding Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAK",
    "name": "Braskem S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAM",
    "name": "Brookfield Asset Management Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BANC",
    "name": "Banc of California, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BANC^D",
    "name": "Banc of California, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BANC^E",
    "name": "Banc of California, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAND",
    "name": "Bandwidth Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BANF",
    "name": "BancFirst Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BANFP",
    "name": "BancFirst Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BANR",
    "name": "Banner Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BANX",
    "name": "StoneCastle Financial Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BAP",
    "name": "Credicorp Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BAS",
    "name": "Basic Energy Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BASI",
    "name": "Bioanalytical Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BATRA",
    "name": "Liberty Media Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BATRK",
    "name": "Liberty Media Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BAX",
    "name": "Baxter International Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BB",
    "name": "BlackBerry Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBBY",
    "name": "Bed Bath & Beyond Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BBC",
    "name": "Virtus LifeSci Biotech Clinical Trials ETF",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BBD",
    "name": "Banco Bradesco Sa",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBDC",
    "name": "Barings BDC, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBDO",
    "name": "Banco Bradesco Sa",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBF",
    "name": "BlackRock Municipal Income Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBGI",
    "name": "Beasley Broadcast Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BBH",
    "name": "VanEck Vectors ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BBK",
    "name": "Blackrock Municipal Bond Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBL",
    "name": "BHP Group Plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBN",
    "name": "BalckRock Taxable Municipal Bond Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBOX",
    "name": "Black Box Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BBP",
    "name": "Virtus LifeSci Biotech Products ETF",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BBSI",
    "name": "Barrett Business Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BBT",
    "name": "BB&T Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBT^D",
    "name": "BB&T Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBT^E",
    "name": "BB&T Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBT^F",
    "name": "BB&T Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBT^G",
    "name": "BB&T Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBT^H",
    "name": "BB&T Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBU",
    "name": "Brookfield Business Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBVA",
    "name": "Banco Bilbao Viscaya Argentaria S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBW",
    "name": "Build-A-Bear Workshop, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBX",
    "name": "BBX Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BBY",
    "name": "Best Buy Co., Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BC",
    "name": "Brunswick Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BC^A",
    "name": "Brunswick Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCAC",
    "name": "Bison Capital Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCACR",
    "name": "Bison Capital Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCACU",
    "name": "Bison Capital Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCACW",
    "name": "Bison Capital Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCBP",
    "name": "BCB Bancorp, Inc. (NJ)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCC",
    "name": "Boise Cascade, L.L.C.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCE",
    "name": "BCE, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCEI",
    "name": "Bonanza Creek Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCH",
    "name": "Banco De Chile",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCLI",
    "name": "Brainstorm Cell Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCML",
    "name": "BayCom Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCNA",
    "name": "Reality Shares ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCO",
    "name": "Brink&#39;s Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCOM",
    "name": "B Communications Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCOR",
    "name": "Blucora, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCOV",
    "name": "Brightcove Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCPC",
    "name": "Balchem Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCRH",
    "name": "Blue Capital Reinsurance Holdings Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCRX",
    "name": "BioCryst Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCS",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCS^D.CL",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCSF",
    "name": "Bain Capital Specialty Finance, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BCTF",
    "name": "Bancorp 34, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BCV",
    "name": "Bancroft Fund Limited",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BCV^A",
    "name": "Bancroft Fund Limited",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BCX",
    "name": "BlackRock Resources",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BDC",
    "name": "Belden Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BDC^B",
    "name": "Belden Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BDGE",
    "name": "Bridge Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BDJ",
    "name": "Blackrock Enhanced Equity Dividend Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BDL",
    "name": "Flanigan&#39;s Enterprises, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BDN",
    "name": "Brandywine Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BDR",
    "name": "Blonder Tongue Laboratories, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BDSI",
    "name": "BioDelivery Sciences International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BDX",
    "name": "Becton, Dickinson and Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BDXA",
    "name": "Becton, Dickinson and Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BE",
    "name": "Bloom Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BEAT",
    "name": "BioTelemetry, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BECN",
    "name": "Beacon Roofing Supply, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BEDU",
    "name": "Bright Scholar Education Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BEL",
    "name": "Belmond Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BELFA",
    "name": "Bel Fuse Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BELFB",
    "name": "Bel Fuse Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BEN",
    "name": "Franklin Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BEP",
    "name": "Brookfield Renewable Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BERY",
    "name": "Berry Global Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BF.A",
    "name": "Brown Forman Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BFAM",
    "name": "Bright Horizons Family Solutions Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BF.B",
    "name": "Brown Forman Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BFC",
    "name": "Bank First National Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BFIN",
    "name": "BankFinancial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BFIT",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BFK",
    "name": "BlackRock Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BFO",
    "name": "Blackrock Florida Municipal 2020 Term Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BFR",
    "name": "BBVA Banco Frances S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BFRA",
    "name": "Biofrontera AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BFS",
    "name": "Saul Centers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BFS^C",
    "name": "Saul Centers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BFS^D",
    "name": "Saul Centers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BFST",
    "name": "Business First Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BFY",
    "name": "BlackRock New York Municipal Income Trust II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BFZ",
    "name": "BlackRock California Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BG",
    "name": "Bunge Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BGB",
    "name": "Blackstone / GSO Strategic Credit Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BGCP",
    "name": "BGC Partners, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BGCPV",
    "name": "BGC Partners, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BGFV",
    "name": "Big 5 Sporting Goods Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BGG",
    "name": "Briggs & Stratton Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BGH",
    "name": "Babson Global Short Duration High Yield Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BGI",
    "name": "Birks Group Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BGIO",
    "name": "BlackRock 2022 Global Income Opportunity Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BGNE",
    "name": "BeiGene, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BGR",
    "name": "BlackRock Energy and Resources Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BGRN",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BGS",
    "name": "B&G Foods, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BGSF",
    "name": "BG Staffing Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BGT",
    "name": "Blackrock Global",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BGX",
    "name": "Blackstone GSO Long Short Credit Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BGY",
    "name": "BLACKROCK INTERNATIONAL, LTD.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BH",
    "name": "Biglari Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BH.A",
    "name": "Biglari Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHB",
    "name": "Bar Harbor Bankshares, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BHBK",
    "name": "Blue Hills Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BHC",
    "name": "Bausch Health Companies Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHE",
    "name": "Benchmark Electronics, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHF",
    "name": "Brighthouse Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BHFAL",
    "name": "Brighthouse Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BHGE",
    "name": "Baker Hughes, a GE company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHK",
    "name": "Blackrock Core Bond Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHLB",
    "name": "Berkshire Hills Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHP",
    "name": "BHP Billiton Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHR",
    "name": "Braemar Hotels & Resorts Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHR^B",
    "name": "Braemar Hotels & Resorts Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHR^D",
    "name": "Braemar Hotels & Resorts Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHTG",
    "name": "BioHiTech Global, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BHV",
    "name": "BlackRock Virginia Municipal Bond Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BHVN",
    "name": "Biohaven Pharmaceutical Holding Company Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BIB",
    "name": "ProShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BICK",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BID",
    "name": "Sotheby&#39;s",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BIDU",
    "name": "Baidu, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BIF",
    "name": "USLIFE Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BIG",
    "name": "Big Lots, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BIIB",
    "name": "Biogen Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BILI",
    "name": "Bilibili Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BIO",
    "name": "Bio-Rad Laboratories, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BIO.B",
    "name": "Bio-Rad Laboratories, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BIOC",
    "name": "Biocept, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BIOL",
    "name": "Biolase, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BIOS",
    "name": "BioScrip, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BIP",
    "name": "Brookfield Infrastructure Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BIS",
    "name": "ProShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BIT",
    "name": "BlackRock Multi-Sector Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BITA",
    "name": "Bitauto Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BJ",
    "name": "BJ&#39;s Wholesale Club Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BJRI",
    "name": "BJ&#39;s Restaurants, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BJZ",
    "name": "Blackrock California Municipal 2018 Term Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BK",
    "name": "Bank Of New York Mellon Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BK^C",
    "name": "Bank Of New York Mellon Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKCC",
    "name": "BlackRock Capital Investment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BKD",
    "name": "Brookdale Senior Living Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKE",
    "name": "Buckle, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKEP",
    "name": "Blueknight Energy Partners L.P., L.L.C.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BKEPP",
    "name": "Blueknight Energy Partners L.P., L.L.C.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BKH",
    "name": "Black Hills Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKI",
    "name": "Black Knight, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKJ",
    "name": "Bancorp of New Jersey, Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BKK",
    "name": "Blackrock Municipal 2020 Term Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKN",
    "name": "BlackRock Investment Quality Municipal Trust Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKNG",
    "name": "Booking Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BKS",
    "name": "Barnes & Noble, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKSC",
    "name": "Bank of South Carolina Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BKT",
    "name": "BlackRock Income Trust Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKTI",
    "name": "BK Technologies, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BKU",
    "name": "BankUnited, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BKYI",
    "name": "BIO-key International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BL",
    "name": "BlackLine, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLBD",
    "name": "Blue Bird Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLCM",
    "name": "Bellicum Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLCN",
    "name": "Reality Shares ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLD",
    "name": "TopBuild Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BLDP",
    "name": "Ballard Power Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLDR",
    "name": "Builders FirstSource, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLE",
    "name": "BlackRock Municipal Income Trust II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BLFS",
    "name": "BioLife Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLH",
    "name": "Blackrock New York Municipal 2018 Term Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BLIN",
    "name": "Bridgeline Digital, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLK",
    "name": "BlackRock, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BLKB",
    "name": "Blackbaud, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLL",
    "name": "Ball Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BLMN",
    "name": "Bloomin&#39; Brands, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLMT",
    "name": "BSB Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLNK",
    "name": "Blink Charging Co.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLNKW",
    "name": "Blink Charging Co.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLPH",
    "name": "Bellerophon Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLRX",
    "name": "BioLineRx Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLUE",
    "name": "bluebird bio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BLW",
    "name": "Citigroup Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BLX",
    "name": "Banco Latinoamericano de Comercio Exterior, S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BMA",
    "name": "Macro Bank Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BMCH",
    "name": "BMC Stock Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BME",
    "name": "Blackrock Health Sciences Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BMI",
    "name": "Badger Meter, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BML^G",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BML^H",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BML^J",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BML^L",
    "name": "Bank of America Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BMLP",
    "name": "Bank Of Montreal",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BMO",
    "name": "Bank Of Montreal",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BMRA",
    "name": "Biomerica, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BMRC",
    "name": "Bank of Marin Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BMRN",
    "name": "BioMarin Pharmaceutical Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BMS",
    "name": "Bemis Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BMTC",
    "name": "Bryn Mawr Bank Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BMY",
    "name": "Bristol-Myers Squibb Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BNCL",
    "name": "Beneficial Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BND",
    "name": "Vanguard Bond Index Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BNDW",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BNDX",
    "name": "Vanguard Charlotte Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BNED",
    "name": "Barnes & Noble Education, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BNFT",
    "name": "Benefitfocus, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BNGO",
    "name": "Bionano Genomics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BNGOW",
    "name": "Bionano Genomics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BNS",
    "name": "Bank of Nova Scotia (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BNSO",
    "name": "Bonso Electronics International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BNTC",
    "name": "Benitec Biopharma Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BNTCW",
    "name": "Benitec Biopharma Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BNY",
    "name": "BlackRock New York Investment Quality Municipal Trust Inc. (Th",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BOCH",
    "name": "Bank of Commerce Holdings (CA)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOE",
    "name": "Blackrock Global",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BOH",
    "name": "Bank of Hawaii Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BOJA",
    "name": "Bojangles&#39;, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOKF",
    "name": "BOK Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOKFL",
    "name": "BOK Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOLD",
    "name": "Audentes Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOMN",
    "name": "Boston Omaha Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOOM",
    "name": "DMC Global Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOOT",
    "name": "Boot Barn Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BORN",
    "name": "China New Borun Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BOSC",
    "name": "B.O.S. Better Online Solutions",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOTJ",
    "name": "Bank of the James Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOTZ",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BOX",
    "name": "Box, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BOXL",
    "name": "Boxlight Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BP",
    "name": "BP p.l.c.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BPFH",
    "name": "Boston Private Financial Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BPI",
    "name": "Bridgepoint Education, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BPK",
    "name": "Blackrock Municipal 2018 Term Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BPL",
    "name": "Buckeye Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BPMC",
    "name": "Blueprint Medicines Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BPMP",
    "name": "BP Midstream Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BPMX",
    "name": "BioPharmX Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BPOP",
    "name": "Popular, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BPOPM",
    "name": "Popular, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BPOPN",
    "name": "Popular, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BPR",
    "name": "Brookfield Property REIT Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BPRAP",
    "name": "Brookfield Property REIT Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BPRN",
    "name": "The Bank of Princeton",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BPT",
    "name": "BP Prudhoe Bay Royalty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BPTH",
    "name": "Bio-Path Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BPY",
    "name": "Brookfield Property Partners L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BQH",
    "name": "Blackrock New York Municipal Bond Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BR",
    "name": "Broadridge Financial Solutions, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BRAC",
    "name": "Black Ridge Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRACR",
    "name": "Black Ridge Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRACU",
    "name": "Black Ridge Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRACW",
    "name": "Black Ridge Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRC",
    "name": "Brady Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BREW",
    "name": "Craft Brew Alliance, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRFS",
    "name": "BRF S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BRG",
    "name": "Bluerock Residential Growth REIT, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BRG^A",
    "name": "Bluerock Residential Growth REIT, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BRG^C",
    "name": "Bluerock Residential Growth REIT, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BRG^D",
    "name": "Bluerock Residential Growth REIT, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BRID",
    "name": "Bridgford Foods Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRK.A",
    "name": "Berkshire Hathaway Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BRK.B",
    "name": "Berkshire Hathaway Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BRKL",
    "name": "Brookline Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRKR",
    "name": "Bruker Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRKS",
    "name": "Brooks Automation, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRN",
    "name": "Barnwell Industries, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BRO",
    "name": "Brown & Brown, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BRPA",
    "name": "Big Rock Partners Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRPAR",
    "name": "Big Rock Partners Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRPAU",
    "name": "Big Rock Partners Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRPAW",
    "name": "Big Rock Partners Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRQS",
    "name": "Borqs Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BRS",
    "name": "Bristow Group Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BRSS",
    "name": "Global Brass and Copper Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BRT",
    "name": "BRT Apartments Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BRX",
    "name": "Brixmor Property Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BRY",
    "name": "Berry Petroleum Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BSA",
    "name": "BrightSphere Investment Group plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSAC",
    "name": "Banco Santander Chile",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSBR",
    "name": "Banco Santander Brasil SA",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSD",
    "name": "BlackRock Strategic Municipal Trust Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSE",
    "name": "Blackrock New York Municipal Income Quality Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSET",
    "name": "Bassett Furniture Industries, Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BSGM",
    "name": "BioSig Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BSIG",
    "name": "BrightSphere Investment Group plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSL",
    "name": "Blackstone GSO Senior Floating Rate Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSM",
    "name": "Black Stone Minerals, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSMX",
    "name": "Banco Santander Mexico, S.A., Institucion de Ban",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSQR",
    "name": "BSQUARE Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BSRR",
    "name": "Sierra Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BST",
    "name": "BlackRock Science and Technology Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSTC",
    "name": "BioSpecifics Technologies Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BSTI",
    "name": "BEST Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BSVN",
    "name": "Bank7 Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BSX",
    "name": "Boston Scientific Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BT",
    "name": "BT Group plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BTA",
    "name": "BlackRock Long-Term Municipal Advantage Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BTAI",
    "name": "BioXcel Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BTE",
    "name": "Baytex Energy Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BTEC",
    "name": "Principal Exchange-Traded Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BTG",
    "name": "B2Gold Corp",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BTI",
    "name": "British American Tobacco p.l.c.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BTN",
    "name": "Ballantyne Strong, Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BTO",
    "name": "John Hancock Financial Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BTT",
    "name": "BlackRock Municipal Target Term Trust Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BTU",
    "name": "Peabody Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BTX",
    "name": "BioTime, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BTZ",
    "name": "BlackRock Credit Allocation Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BUD",
    "name": "Anheuser-Busch Inbev SA",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BUI",
    "name": "BlackRock Utility, Infrastructure & Power Opportun",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BURG",
    "name": "Chanticleer Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BURL",
    "name": "Burlington Stores, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BUSE",
    "name": "First Busey Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BV",
    "name": "BrightView Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BVN",
    "name": "Buenaventura Mining Company Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BVNSC",
    "name": "Brandes Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BVSN",
    "name": "BroadVision, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BVX",
    "name": "Bovie Medical Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BVXV",
    "name": "BiondVax Pharmaceuticals Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BVXVW",
    "name": "BiondVax Pharmaceuticals Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BW",
    "name": "Babcock",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BWA",
    "name": "BorgWarner Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BWB",
    "name": "Bridgewater Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BWEN",
    "name": "Broadwind Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BWFG",
    "name": "Bankwell Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BWG",
    "name": "BrandywineGLOBAL Global Income Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BWL.A",
    "name": "Bowl America, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "BWMCU",
    "name": "Boxwood Merger Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BWXT",
    "name": "BWX Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BX",
    "name": "The Blackstone Group L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BXC",
    "name": "BlueLinx Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BXE",
    "name": "Bellatrix Exploration Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BXG",
    "name": "Bluegreen Vacations Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BXMT",
    "name": "Capital Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BXMX",
    "name": "Nuveen S&P 500 Buy-Write Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BXP",
    "name": "Boston Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BXP^B",
    "name": "Boston Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BXS",
    "name": "BancorpSouth Bank",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BY",
    "name": "Byline Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BYD",
    "name": "Boyd Gaming Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BYFC",
    "name": "Broadway Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BYM",
    "name": "Blackrock Municipal Income Quality Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BYSI",
    "name": "BeyondSpring, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "BZH",
    "name": "Beazer Homes USA, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BZM",
    "name": "BlackRock Maryland Municipal Bond Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "BZUN",
    "name": "Baozun Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "C",
    "name": "Citigroup Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAAP",
    "name": "Corporacion America Airports SA",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAAS",
    "name": "China Automotive Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CABO",
    "name": "Cable One, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAC",
    "name": "Camden National Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CACC",
    "name": "Credit Acceptance Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CACG",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CACI",
    "name": "CACI International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CADC",
    "name": "China Advanced Construction Materials Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CADE",
    "name": "Cadence Bancorporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAE",
    "name": "CAE Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAF",
    "name": "Morgan Stanley China A Share Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAG",
    "name": "ConAgra Brands, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAH",
    "name": "Cardinal Health, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAI",
    "name": "CAI International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAI^A",
    "name": "CAI International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAI^B",
    "name": "CAI International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAJ",
    "name": "Canon, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAKE",
    "name": "The Cheesecake Factory Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CAL",
    "name": "Caleres, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CALA",
    "name": "Calithera Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CALM",
    "name": "Cal-Maine Foods, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CALX",
    "name": "Calix, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAMP",
    "name": "CalAmp Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CAMT",
    "name": "Camtek Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CANF",
    "name": "Can-Fite Biopharma Ltd",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CANG",
    "name": "Cango Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAPL",
    "name": "CrossAmerica Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CAPR",
    "name": "Capricor Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CAR",
    "name": "Avis Budget Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CARA",
    "name": "Cara Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CARB",
    "name": "Carbonite, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CARG",
    "name": "CarGurus, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CARO",
    "name": "Carolina Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CARS",
    "name": "Cars.com Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CART",
    "name": "Carolina Trust BancShares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CARV",
    "name": "Carver Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CARZ",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CASA",
    "name": "Casa Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CASH",
    "name": "Meta Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CASI",
    "name": "CASI Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CASM",
    "name": "CAS Medical Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CASS",
    "name": "Cass Information Systems, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CASY",
    "name": "Caseys General Stores, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CAT",
    "name": "Caterpillar, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CATB",
    "name": "Catabasis Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CATC",
    "name": "Cambridge Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CATH",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CATM",
    "name": "Cardtronics plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CATO",
    "name": "Cato Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CATS",
    "name": "Catasys, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CATY",
    "name": "Cathay General Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CATYW",
    "name": "Cathay General Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CAW",
    "name": "CCA Industries, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CB",
    "name": "Chubb Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBAN",
    "name": "Colony Bankcorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBAT",
    "name": "CBAK Energy Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBAY",
    "name": "CymaBay Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBB",
    "name": "Cincinnati Bell Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBB^B",
    "name": "Cincinnati Bell Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBD",
    "name": "Companhia Brasileira de Distribuicao",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBFV",
    "name": "CB Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBH",
    "name": "AllianzGI Convertible & Income 2024 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBIO",
    "name": "Catalyst Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBK",
    "name": "Christopher & Banks Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBL",
    "name": "CBL & Associates Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBL^D",
    "name": "CBL & Associates Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBL^E",
    "name": "CBL & Associates Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBLI",
    "name": "Cleveland BioLabs, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBLK",
    "name": "Carbon Black, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBM",
    "name": "Cambrex Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBMB",
    "name": "CBM Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBMG",
    "name": "Cellular Biomedicine Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBNK",
    "name": "Capital Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBO",
    "name": "CBO (Listing Market - NYSE - Networks A/E)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBOE",
    "name": "Cboe Global Markets, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBPO",
    "name": "China Biologic Products Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBPX",
    "name": "Continental Building Products, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBRE",
    "name": "CBRE Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBRL",
    "name": "Cracker Barrel Old Country Store, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBS",
    "name": "CBS Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBS.A",
    "name": "CBS Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBSH",
    "name": "Commerce Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBSHP",
    "name": "Commerce Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBT",
    "name": "Cabot Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBTX",
    "name": "CBTX, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CBU",
    "name": "Community Bank System, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBX",
    "name": "CBX (Listing Market NYSE Networks AE",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CBZ",
    "name": "CBIZ, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CC",
    "name": "Chemours Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCA",
    "name": "MFS California Insured Municipal Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CCB",
    "name": "Coastal Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCBG",
    "name": "Capital City Bank Group",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCC",
    "name": "Churchill Capital Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCCL",
    "name": "China Ceramics Co., Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCC.U",
    "name": "Churchill Capital Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCC.WS",
    "name": "Churchill Capital Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCD",
    "name": "Calamos Dynamic Convertible & Income Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCEP",
    "name": "Coca-Cola European Partners plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCF",
    "name": "Chase Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CCH",
    "name": "Collier Creek Holdings",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCH.U",
    "name": "Collier Creek Holdings",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCH.WS",
    "name": "Collier Creek Holdings",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCI",
    "name": "Crown Castle International Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCI^A",
    "name": "Crown Castle International Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCIH",
    "name": "ChinaCache International Holdings Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCJ",
    "name": "Cameco Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCK",
    "name": "Crown Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCL",
    "name": "Carnival Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCLP",
    "name": "CSI Compressco LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCM",
    "name": "Concord Medical Services Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCMP",
    "name": "Cabot Microelectronics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCNE",
    "name": "CNB Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCNI",
    "name": "Command Center, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCO",
    "name": "Clear Channel Outdoor Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCOI",
    "name": "Cogent Communications Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCR",
    "name": "CONSOL Coal Resources LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCRC",
    "name": "China Customer Relations Centers, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCRN",
    "name": "Cross Country Healthcare, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCS",
    "name": "Century Communities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCT",
    "name": "Corporate Capital Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCU",
    "name": "Compania Cervecerias Unidas, S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CCXI",
    "name": "ChemoCentryx, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CCZ",
    "name": "Comcast Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CDAY",
    "name": "Ceridian HCM Holding Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CDC",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDE",
    "name": "Coeur Mining, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CDEV",
    "name": "Centennial Resource Development, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDK",
    "name": "CDK Global, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDL",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDLX",
    "name": "Cardlytics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDMO",
    "name": "Avid Bioservices, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDMOP",
    "name": "Avid Bioservices, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDNA",
    "name": "CareDx, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDNS",
    "name": "Cadence Design Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDOR",
    "name": "Condor Hospitality Trust, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CDOR",
    "name": "Condor Hospitality Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDR",
    "name": "Cedar Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CDR^B",
    "name": "Cedar Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CDR^C",
    "name": "Cedar Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CDTI",
    "name": "CDTI Advanced Materials, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDTX",
    "name": "Cidara Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDW",
    "name": "CDW Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDXC",
    "name": "ChromaDex Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDXS",
    "name": "Codexis, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CDZI",
    "name": "Cadiz, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CE",
    "name": "Celanese Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CEA",
    "name": "China Eastern Airlines Corporation Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CECE",
    "name": "CECO Environmental Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CECO",
    "name": "Career Education Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CEE",
    "name": "The Central and Eastern Europe Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CEI",
    "name": "Camber Energy, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CEIX",
    "name": "CNX Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CEL",
    "name": "Cellcom Israel, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CELC",
    "name": "Celcuity Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CELG",
    "name": "Celgene Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CELGZ",
    "name": "Celgene Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CELH",
    "name": "Celsius Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CELP",
    "name": "Cypress Energy Partners, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CEM",
    "name": "ClearBridge MLP and Midstream Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CEMI",
    "name": "Chembio Diagnostics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CEN",
    "name": "Center Coast Brookfield MLP & Energy Infrastructur",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CENT",
    "name": "Central Garden & Pet Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CENTA",
    "name": "Central Garden & Pet Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CENX",
    "name": "Century Aluminum Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CEO",
    "name": "CNOOC Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CEPU",
    "name": "Central Puerto S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CEQP",
    "name": "Crestwood Equity Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CERC",
    "name": "Cerecor Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CERN",
    "name": "Cerner Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CERS",
    "name": "Cerus Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CET",
    "name": "Central Securities Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CETV",
    "name": "Central European Media Enterprises Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CETX",
    "name": "Cemtrex Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CETXP",
    "name": "Cemtrex Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CETXW",
    "name": "Cemtrex Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CEV",
    "name": "Eaton Vance California Municipal Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CEVA",
    "name": "CEVA, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CEY",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CEZ",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CF",
    "name": "CF Industries Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CFA",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CFBI",
    "name": "Community First Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CFBK",
    "name": "Central Federal Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CFFI",
    "name": "C&F Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CFFN",
    "name": "Capitol Federal Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CFG",
    "name": "Citizens Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CFMS",
    "name": "ConforMIS, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CFO",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CFR",
    "name": "Cullen/Frost Bankers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CFR^A",
    "name": "Cullen/Frost Bankers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CFRX",
    "name": "ContraFect Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CFX",
    "name": "Colfax Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CG",
    "name": "The Carlyle Group L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CGA",
    "name": "China Green Agriculture, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CGBD",
    "name": "TCG BDC, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CGC",
    "name": "Canopy Growth Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CGEN",
    "name": "Compugen Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CGIX",
    "name": "Cancer Genetics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CGNX",
    "name": "Cognex Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CGO",
    "name": "Calamos Global Total Return Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CGVIC",
    "name": "Causeway ETMF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHA",
    "name": "China Telecom Corp Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHAP",
    "name": "Chaparral Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHCI",
    "name": "Comstock Holding Companies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHCO",
    "name": "City Holding Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHCT",
    "name": "Community Healthcare Trust Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHD",
    "name": "Church & Dwight Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHDN",
    "name": "Churchill Downs, Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHE",
    "name": "Chemed Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHEF",
    "name": "The Chefs&#39; Warehouse, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHEK",
    "name": "Check-Cap Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHEKW",
    "name": "Check-Cap Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHEKZ",
    "name": "Check-Cap Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHFC",
    "name": "Chemical Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHFS",
    "name": "CHF Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHGG",
    "name": "Chegg, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHH",
    "name": "Choice Hotels International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHI",
    "name": "Calamos Convertible Opportunities and Income Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHK",
    "name": "Chesapeake Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHK^D",
    "name": "Chesapeake Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHKE",
    "name": "Cherokee Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHKP",
    "name": "Check Point Software Technologies Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHKR",
    "name": "Chesapeake Granite Wash Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHL",
    "name": "China Mobile (Hong Kong) Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHMA",
    "name": "Chiasma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHMG",
    "name": "Chemung Financial Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHMI",
    "name": "Cherry Hill Mortgage Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHMI^A",
    "name": "Cherry Hill Mortgage Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHN",
    "name": "China Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHNA",
    "name": "ETF Series Solutions",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHNR",
    "name": "China Natural Resources, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHRA",
    "name": "Charah Solutions, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHRS",
    "name": "Coherus BioSciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHRW",
    "name": "C.H. Robinson Worldwide, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHS",
    "name": "Chico&#39;s FAS, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHSCL",
    "name": "CHS Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHSCM",
    "name": "CHS Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHSCN",
    "name": "CHS Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHSCO",
    "name": "CHS Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHSCP",
    "name": "CHS Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHSP",
    "name": "Chesapeake Lodging Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHT",
    "name": "Chunghwa Telecom Co., Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHTR",
    "name": "Charter Communications, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHU",
    "name": "China Unicom (Hong Kong) Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CHUY",
    "name": "Chuy&#39;s Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHW",
    "name": "Calamos Global Dynamic Income Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CHY",
    "name": "Calamos Convertible and High Income Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CI",
    "name": "Cigna Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIA",
    "name": "Citizens, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIB",
    "name": "BanColombia S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIBR",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CIC",
    "name": "Capitol Investment Corp. IV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIC.U",
    "name": "Capitol Investment Corp. IV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIC.WS",
    "name": "Capitol Investment Corp. IV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CID",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CIDM",
    "name": "Cinedigm Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CIEN",
    "name": "Ciena Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIF",
    "name": "Colonial Intermediate High Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIFS",
    "name": "China Internet Nationwide Financial Services Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CIG",
    "name": "Comp En De Mn Cemig ADS",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIG.C",
    "name": "Comp En De Mn Cemig ADS",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIGI",
    "name": "Colliers International Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CII",
    "name": "Blackrock Capital and Income Strategies Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIK",
    "name": "Credit Suisse Asset Management Income Fund, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CIL",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CIM",
    "name": "Chimera Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIM^A",
    "name": "Chimera Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIM^B",
    "name": "Chimera Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIM^C",
    "name": "Chimera Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CINF",
    "name": "Cincinnati Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CINR",
    "name": "Ciner Resources LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIO",
    "name": "City Office REIT, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIO^A",
    "name": "City Office REIT, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIR",
    "name": "CIRCOR International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CISN",
    "name": "Cision Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIT",
    "name": "CIT Group Inc (DEL)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIVB",
    "name": "Civista Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CIVBP",
    "name": "Civista Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CIVEC",
    "name": "Causeway ETMF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CIVI",
    "name": "Civitas Solutions, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CIX",
    "name": "CompX International Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CIZ",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CIZN",
    "name": "Citizens Holding Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CJ",
    "name": "C&J Energy Services, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "C^J",
    "name": "Citigroup Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CJJD",
    "name": "China Jo-Jo Drugstores, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "C^K",
    "name": "Citigroup Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CKH",
    "name": "SEACOR Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CKPT",
    "name": "Checkpoint Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CKX",
    "name": "CKX Lands, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CL",
    "name": "Colgate-Palmolive Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "C^L",
    "name": "Citigroup Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLAR",
    "name": "Clarus Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLB",
    "name": "Core Laboratories N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLBK",
    "name": "Columbia Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLBS",
    "name": "Caladrius Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLCT",
    "name": "Collectors Universe, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLD",
    "name": "Cloud Peak Energy Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLDC",
    "name": "China Lending Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLDR",
    "name": "Cloudera, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLDT",
    "name": "Chatham Lodging Trust (REIT)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLDX",
    "name": "Celldex Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLF",
    "name": "Cleveland-Cliffs Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLFD",
    "name": "Clearfield, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLGN",
    "name": "CollPlant Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLGX",
    "name": "CoreLogic, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLH",
    "name": "Clean Harbors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLI",
    "name": "Mack-Cali Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLIR",
    "name": "ClearSign Combustion Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLIRW",
    "name": "ClearSign Combustion Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLLS",
    "name": "Cellectis S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLM",
    "name": "Cornerstone Strategic Value Fund, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CLMT",
    "name": "Calumet Specialty Products Partners, L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLNC",
    "name": "Colony Credit Real Estate, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLNE",
    "name": "Clean Energy Fuels Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLNY",
    "name": "Colony Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLNY^B",
    "name": "Colony Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLNY^E",
    "name": "Colony Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLNY^G",
    "name": "Colony Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLNY^H",
    "name": "Colony Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLNY^I",
    "name": "Colony Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLNY^J",
    "name": "Colony Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLPR",
    "name": "Clipper Realty Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLPS",
    "name": "CLPS Incorporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLR",
    "name": "Continental Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLRB",
    "name": "Cellectar Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLRBW",
    "name": "Cellectar Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLRBZ",
    "name": "Cellectar Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLRG",
    "name": "IndexIQ ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLRO",
    "name": "ClearOne, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLS",
    "name": "Celestica, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLSD",
    "name": "Clearside Biomedical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLSN",
    "name": "Celsion Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLUB",
    "name": "Town Sports International Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLVS",
    "name": "Clovis Oncology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLW",
    "name": "Clearwater Paper Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLWT",
    "name": "Euro Tech Holdings Company Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CLX",
    "name": "Clorox Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CLXT",
    "name": "Calyxt, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CM",
    "name": "Canadian Imperial Bank of Commerce",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMA",
    "name": "Comerica Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMC",
    "name": "Commercial Metals Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMCL",
    "name": "Caledonia Mining Corporation Plc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CMCM",
    "name": "Cheetah Mobile Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMCO",
    "name": "Columbus McKinnon Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMCSA",
    "name": "Comcast Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMCT",
    "name": "CIM Commercial Trust Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMCTP",
    "name": "CIM Commercial Trust Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMD",
    "name": "Cantel Medical Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CME",
    "name": "CME Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMFN",
    "name": "CM Finance Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMFNL",
    "name": "CM Finance Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMG",
    "name": "Chipotle Mexican Grill, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMI",
    "name": "Cummins Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMLS",
    "name": "Cumulus Media Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMO",
    "name": "Capstead Mortgage Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMO^E",
    "name": "Capstead Mortgage Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMP",
    "name": "Compass Minerals International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMPR",
    "name": "Cimpress N.V",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMRE",
    "name": "Costamare Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMRE^B",
    "name": "Costamare Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMRE^C",
    "name": "Costamare Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMRE^D",
    "name": "Costamare Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMRE^E",
    "name": "Costamare Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMRX",
    "name": "Chimerix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMS",
    "name": "CMS Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMSA",
    "name": "CMS Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMS^B",
    "name": "CMS Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMSC",
    "name": "CMS Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CMSS",
    "name": "CM Seven Star Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMSSR",
    "name": "CM Seven Star Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMSSU",
    "name": "CM Seven Star Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMSSW",
    "name": "CM Seven Star Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMT",
    "name": "Core Molding Technologies Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CMTA",
    "name": "Clementia Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMTL",
    "name": "Comtech Telecommunications Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CMU",
    "name": "Colonial Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "C^N",
    "name": "Citigroup Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNA",
    "name": "CNA Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNAC",
    "name": "Constellation Alpha Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNACR",
    "name": "Constellation Alpha Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNACU",
    "name": "Constellation Alpha Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNACW",
    "name": "Constellation Alpha Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNAT",
    "name": "Conatus Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNBKA",
    "name": "Century Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNC",
    "name": "Centene Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNCE",
    "name": "Concert Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNCR",
    "name": "ETF Series Solutions",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNDT",
    "name": "Conduent Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNET",
    "name": "ChinaNet Online Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNF",
    "name": "CNFinance Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNFR",
    "name": "Conifer Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNFRL",
    "name": "Conifer Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNHI",
    "name": "CNH Industrial N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNI",
    "name": "Canadian National Railway Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNK",
    "name": "Cinemark Holdings Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNMD",
    "name": "CONMED Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNNE",
    "name": "Cannae Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNO",
    "name": "CNO Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNOB",
    "name": "ConnectOne Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNP",
    "name": "CenterPoint Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNP^B",
    "name": "CenterPoint Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNQ",
    "name": "Canadian Natural Resources Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNS",
    "name": "Cohen & Steers Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNSL",
    "name": "Consolidated Communications Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNST",
    "name": "Constellation Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNTF",
    "name": "China TechFaith Wireless Communication Technology Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNTX",
    "name": "Centrexion Therapeutics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNTY",
    "name": "Century Casinos, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CNX",
    "name": "CNX Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNXM",
    "name": "CNX Midstream Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CNXN",
    "name": "PC Connection, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CO",
    "name": "Global Cord Blood Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COCP",
    "name": "Cocrystal Pharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CODA",
    "name": "Coda Octopus Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CODI",
    "name": "Compass Diversified Holdings",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CODI^A",
    "name": "Compass Diversified Holdings",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CODI^B",
    "name": "Compass Diversified Holdings",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CODX",
    "name": "Co-Diagnostics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COE",
    "name": "China Online Education Group",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COF",
    "name": "Capital One Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COF^C",
    "name": "Capital One Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COF^D",
    "name": "Capital One Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COF^F",
    "name": "Capital One Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COF^G",
    "name": "Capital One Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COF^H",
    "name": "Capital One Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COF^P",
    "name": "Capital One Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COG",
    "name": "Cabot Oil & Gas Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COHN",
    "name": "Cohen & Company Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "COHR",
    "name": "Coherent, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COHU",
    "name": "Cohu, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COKE",
    "name": "Coca-Cola Bottling Co. Consolidated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COLB",
    "name": "Columbia Banking System, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COLD",
    "name": "Americold Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COLL",
    "name": "Collegium Pharmaceutical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COLM",
    "name": "Columbia Sportswear Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COMM",
    "name": "CommScope Holding Company, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COMT",
    "name": "iShares U.S. ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CONE",
    "name": "CyrusOne Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CONN",
    "name": "Conn&#39;s, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COO",
    "name": "The Cooper Companies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COOP",
    "name": "Mr. Cooper Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COP",
    "name": "ConocoPhillips",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COR",
    "name": "CoreSite Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CORE",
    "name": "Core-Mark Holding Company, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CORR",
    "name": "CorEnergy Infrastructure Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CORR^A",
    "name": "CorEnergy Infrastructure Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CORT",
    "name": "Corcept Therapeutics Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CORV",
    "name": "Correvio Pharma Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COST",
    "name": "Costco Wholesale Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COT",
    "name": "Cott Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COTY",
    "name": "Coty Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "COUP",
    "name": "Coupa Software Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COWN",
    "name": "Cowen Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COWNL",
    "name": "Cowen Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "COWNZ",
    "name": "Cowen Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CP",
    "name": "Canadian Pacific Railway Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPA",
    "name": "Copa Holdings, S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPAC",
    "name": "Cementos Pacasmayo S.A.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPAH",
    "name": "CounterPath Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPB",
    "name": "Campbell Soup Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPE",
    "name": "Callon Petroleum Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPE^A",
    "name": "Callon Petroleum Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPF",
    "name": "CPB Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPG",
    "name": "Crescent Point Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPHC",
    "name": "Canterbury Park Holding Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPHI",
    "name": "China Pharma Holdings, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CPIX",
    "name": "Cumberland Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPK",
    "name": "Chesapeake Utilities Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPL",
    "name": "CPFL Energia S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPLG",
    "name": "CorePoint Lodging Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPLP",
    "name": "Capital Product Partners L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPRT",
    "name": "Copart, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPRX",
    "name": "Catalyst Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPS",
    "name": "Cooper-Standard Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPSH",
    "name": "CPS Technologies Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPSI",
    "name": "Computer Programs and Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPSS",
    "name": "Consumer Portfolio Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPST",
    "name": "Capstone Turbine Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPT",
    "name": "Camden Property Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CPTA",
    "name": "Capitala Finance Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPTAG",
    "name": "Capitala Finance Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CPTAL",
    "name": "Capitala Finance Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CQP",
    "name": "Cheniere Energy Partners, LP",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CR",
    "name": "Crane Co.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRAI",
    "name": "CRA International,Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRAY",
    "name": "Cray Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRBP",
    "name": "Corbus Pharmaceuticals Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRC",
    "name": "California Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRCM",
    "name": "Care.com, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRD.A",
    "name": "Crawford & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRD.B",
    "name": "Crawford & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CREE",
    "name": "Cree, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CREG",
    "name": "China Recycling Energy Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRESY",
    "name": "Cresud S.A.C.I.F. y A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CREX",
    "name": "Creative Realities, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CREXW",
    "name": "Creative Realities, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRF",
    "name": "Cornerstone Strategic Return Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CRH",
    "name": "CRH PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRHM",
    "name": "CRH Medical Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CRI",
    "name": "Carter&#39;s, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRIS",
    "name": "Curis, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRK",
    "name": "Comstock Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRL",
    "name": "Charles River Laboratories International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRM",
    "name": "Salesforce.com Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRMD",
    "name": "CorMedix Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CRMT",
    "name": "America&#39;s Car-Mart, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRNT",
    "name": "Ceragon Networks Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRNX",
    "name": "Crinetics Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRON",
    "name": "Cronos Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CROX",
    "name": "Crocs, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRR",
    "name": "Carbo Ceramics, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRS",
    "name": "Carpenter Technology Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRSP",
    "name": "CRISPR Therapeutics AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRT",
    "name": "Cross Timbers Royalty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRTO",
    "name": "Criteo S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRUS",
    "name": "Cirrus Logic, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRUSC",
    "name": "Calvert Management Series",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRVL",
    "name": "CorVel Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRVS",
    "name": "Corvus Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRWS",
    "name": "Crown Crafts, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CRY",
    "name": "CryoLife, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CRZO",
    "name": "Carrizo Oil & Gas, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CS",
    "name": "Credit Suisse Group",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "C^S",
    "name": "Citigroup Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CSA",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSB",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSBR",
    "name": "Champions Oncology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSCO",
    "name": "Cisco Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSF",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSFL",
    "name": "CenterState Bank Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSGP",
    "name": "CoStar Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSGS",
    "name": "CSG Systems International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSII",
    "name": "Cardiovascular Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSIQ",
    "name": "Canadian Solar Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSL",
    "name": "Carlisle Companies Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CSLT",
    "name": "Castlight Health, inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CSML",
    "name": "IndexIQ ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSOD",
    "name": "Cornerstone OnDemand, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSPI",
    "name": "CSP Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSQ",
    "name": "Calamos Strategic Total Return Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSS",
    "name": "CSS Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CSSE",
    "name": "Chicken Soup for the Soul Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSSEP",
    "name": "Chicken Soup for the Soul Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSTE",
    "name": "Caesarstone Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSTM",
    "name": "Constellium N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CSTR",
    "name": "CapStar Financial Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSU",
    "name": "Capital Senior Living Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CSV",
    "name": "Carriage Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CSWC",
    "name": "Capital Southwest Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSWCL",
    "name": "Capital Southwest Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSWI",
    "name": "CSW Industrials, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CSX",
    "name": "CSX Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTAA",
    "name": "Qwest Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTAC",
    "name": "ChaSerg Technology Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTACU",
    "name": "ChaSerg Technology Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTACW",
    "name": "ChaSerg Technology Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTAS",
    "name": "Cintas Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTB",
    "name": "Cooper Tire & Rubber Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTBB",
    "name": "Qwest Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTBI",
    "name": "Community Trust Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTDD",
    "name": "Qwest Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTEK",
    "name": "CynergisTek, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CTG",
    "name": "Computer Task Group, Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTHR",
    "name": "Charles & Colvard Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTIB",
    "name": "CTI Industries Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTIC",
    "name": "CTI BioPharma Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTK",
    "name": "CooTek (Cayman) Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTL",
    "name": "CenturyLink, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTLT",
    "name": "Catalent, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTMX",
    "name": "CytomX Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTO",
    "name": "Consolidated-Tomoka Land Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CTR",
    "name": "ClearBridge MLP and Midstream Total Return Fund In",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTRA",
    "name": "Contura Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTRC",
    "name": "Centric Brands Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTRE",
    "name": "CareTrust REIT, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTRL",
    "name": "Control4 Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTRN",
    "name": "Citi Trends, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTRP",
    "name": "Ctrip.com International, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTRV",
    "name": "ContraVir Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTS",
    "name": "CTS Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTSH",
    "name": "Cognizant Technology Solutions Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTSO",
    "name": "Cytosorbents Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTT",
    "name": "CatchMark Timber Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTV",
    "name": "Qwest Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTWS",
    "name": "Connecticut Water Service, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTXR",
    "name": "Citius Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTXRW",
    "name": "Citius Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTXS",
    "name": "Citrix Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CTY",
    "name": "Qwest Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CTZ",
    "name": "Qwest Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUB",
    "name": "Cubic Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUBA",
    "name": "The Herzfeld Caribbean Basin Fund, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CUBE",
    "name": "CubeSmart",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUBI",
    "name": "Customers Bancorp, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUBI^C",
    "name": "Customers Bancorp, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUBI^D",
    "name": "Customers Bancorp, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUBI^E",
    "name": "Customers Bancorp, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUBI^F",
    "name": "Customers Bancorp, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUE",
    "name": "Cue Biopharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CUI",
    "name": "CUI Global, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CUK",
    "name": "Carnival Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CULP",
    "name": "Culp, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUO",
    "name": "Continental Materials Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CUR",
    "name": "Neuralstem, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CURO",
    "name": "CURO Group Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CUTR",
    "name": "Cutera, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CUZ",
    "name": "Cousins Properties Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CVA",
    "name": "Covanta Holding Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CVBF",
    "name": "CVB Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVCO",
    "name": "Cavco Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVCY",
    "name": "Central Valley Community Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVE",
    "name": "Cenovus Energy Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CVEO",
    "name": "Civeo Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CVGI",
    "name": "Commercial Vehicle Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVGW",
    "name": "Calavo Growers, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVI",
    "name": "CVR Energy Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CVIA",
    "name": "Covia Holdings Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CVLT",
    "name": "Commvault Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVLY",
    "name": "Codorus Valley Bancorp, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVM",
    "name": "Cel-Sci Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CVNA",
    "name": "Carvana Co.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CVON",
    "name": "ConvergeOne Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVR",
    "name": "Chicago Rivet & Machine Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CVRR",
    "name": "CVR Refining, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CVRS",
    "name": "Corindus Vascular Robotics, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CVS",
    "name": "CVS Health Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CVTI",
    "name": "Covenant Transportation Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVU",
    "name": "CPI Aerostructures, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "CVV",
    "name": "CVD Equipment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CVX",
    "name": "Chevron Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CW",
    "name": "Curtiss-Wright Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CWBC",
    "name": "Community West Bancshares",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CWBR",
    "name": "CohBar, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CWCO",
    "name": "Consolidated Water Co. Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CWEN",
    "name": "Clearway Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CWEN.A",
    "name": "Clearway Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CWH",
    "name": "Camping World Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CWK",
    "name": "Cushman & Wakefield plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CWST",
    "name": "Casella Waste Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CWT",
    "name": "California Water  Service Group Holding",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CX",
    "name": "Cemex S.A.B. de C.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CXDC",
    "name": "China XD Plastics Company Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CXE",
    "name": "Colonial High Income Municipal Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CXH",
    "name": "Colonial Investment Grade Municipal Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CXO",
    "name": "Concho Resources Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CXP",
    "name": "Columbia Property Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CXSE",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CXW",
    "name": "CoreCivic, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CY",
    "name": "Cypress Semiconductor Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYAD",
    "name": "Celyad SA",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYAN",
    "name": "Cyanotech Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYBE",
    "name": "CyberOptics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYBR",
    "name": "CyberArk Software Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYCC",
    "name": "Cyclacel Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYCCP",
    "name": "Cyclacel Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYD",
    "name": "China Yuchai International Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CYH",
    "name": "Community Health Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "CYHHZ",
    "name": "Community Health Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYOU",
    "name": "Changyou.com Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYRN",
    "name": "CYREN Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYRX",
    "name": "CryoPort, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYRXW",
    "name": "CryoPort, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYTK",
    "name": "Cytokinetics, Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYTR",
    "name": "CytRx Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYTX",
    "name": "Cytori Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYTXW",
    "name": "Cytori Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CYTXZ",
    "name": "Cytori Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CZFC",
    "name": "Citizens First Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CZNC",
    "name": "Citizens & Northern Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CZR",
    "name": "Caesars Entertainment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CZWI",
    "name": "Citizens Community Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "CZZ",
    "name": "Cosan Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "D",
    "name": "Dominion Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DAC",
    "name": "Danaos Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DAIO",
    "name": "Data I/O Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DAKT",
    "name": "Daktronics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DAL",
    "name": "Delta Air Lines, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DALI",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DAN",
    "name": "Dana Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DAR",
    "name": "Darling Ingredients Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DARE",
    "name": "Dare Bioscience, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DATA",
    "name": "Tableau Software, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DAVA",
    "name": "Endava plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DAVE",
    "name": "Famous Dave&#39;s of America, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DAX",
    "name": "Horizons ETF Trust I",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DB",
    "name": "Deutsche Bank AG",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DBD",
    "name": "Diebold Nixdorf Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DBL",
    "name": "DoubleLine Opportunistic Credit Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DBVT",
    "name": "DBV Technologies S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DBX",
    "name": "Dropbox, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DCAR",
    "name": "DropCar, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DCF",
    "name": "Dreyfus Alcentra",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DCI",
    "name": "Donaldson Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DCIX",
    "name": "Diana Containerships Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DCO",
    "name": "Ducommun Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DCOM",
    "name": "Dime Community Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DCP",
    "name": "DCP Midstream LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DCP^B",
    "name": "DCP Midstream LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DCP^C",
    "name": "DCP Midstream LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DCPH",
    "name": "Deciphera Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DCUD",
    "name": "Dominion Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DD^A",
    "name": "E.I. du Pont de Nemours and Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DD^B",
    "name": "E.I. du Pont de Nemours and Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DDBI",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DDD",
    "name": "3D Systems Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DDE",
    "name": "Dover Downs Gaming & Entertainment Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DDF",
    "name": "Delaware Investments Dividend & Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DDIV",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DDMX",
    "name": "DD3 Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DDMXU",
    "name": "DD3 Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DDMXW",
    "name": "DD3 Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DDS",
    "name": "Dillard&#39;s, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DDT",
    "name": "Dillard&#39;s, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DE",
    "name": "Deere & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DEA",
    "name": "Easterly Government Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DECK",
    "name": "Deckers Outdoor Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DEI",
    "name": "Douglas Emmett, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DELT",
    "name": "Delta Technology Holdings Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DENN",
    "name": "Denny&#39;s Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DEO",
    "name": "Diageo plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DERM",
    "name": "Dermira, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DESP",
    "name": "Despegar.com, Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DEST",
    "name": "Destination Maternity Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DEX",
    "name": "Delaware Enhanced Global Dividend",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DF",
    "name": "Dean Foods Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DFBH",
    "name": "DFB Healthcare Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DFBHU",
    "name": "DFB Healthcare Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DFBHW",
    "name": "DFB Healthcare Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DFFN",
    "name": "Diffusion Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DFIN",
    "name": "Donnelley Financial Solutions, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DFNL",
    "name": "Davis Fundamental ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DFP",
    "name": "Flaherty & Crumrine Dynamic Preferred and Income Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DFRG",
    "name": "Del Frisco&#39;s Restaurant Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DFS",
    "name": "Discover Financial Services",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DFVL",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DFVS",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DG",
    "name": "Dollar General Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DGICA",
    "name": "Donegal Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DGICB",
    "name": "Donegal Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DGII",
    "name": "Digi International Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DGLD",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DGLY",
    "name": "Digital Ally, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DGRE",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DGRS",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DGRW",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DGSE",
    "name": "DGSE Companies, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DGX",
    "name": "Quest Diagnostics Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DHF",
    "name": "Dreyfus High Yield Strategies Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DHI",
    "name": "D.R. Horton, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DHIL",
    "name": "Diamond Hill Investment Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DHR",
    "name": "Danaher Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DHT",
    "name": "DHT Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DHX",
    "name": "DHI Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DHXM",
    "name": "DHX Media Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DHY",
    "name": "Credit Suisse High Yield Bond Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DIAX",
    "name": "Nuveen Dow 30SM Dynamic Overwrite Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DIN",
    "name": "Dine Brands Global, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DINT",
    "name": "Davis Fundamental ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DIOD",
    "name": "Diodes Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DIS",
    "name": "Walt Disney Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DISCA",
    "name": "Discovery, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DISCB",
    "name": "Discovery, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DISCK",
    "name": "Discovery, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DISH",
    "name": "DISH Network Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DIT",
    "name": "AMCON Distributing Company",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DJCO",
    "name": "Daily Journal Corp. (S.C.)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DK",
    "name": "Delek US Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DKL",
    "name": "Delek Logistics Partners, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DKS",
    "name": "Dick&#39;s Sporting Goods Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DKT",
    "name": "Deutsch Bk Contingent Cap Tr V",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DL",
    "name": "China Distance Education Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLA",
    "name": "Delta Apparel, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DLB",
    "name": "Dolby Laboratories",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLBS",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DLHC",
    "name": "DLH Holdings Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DLNG",
    "name": "Dynagas LNG Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLNG^A",
    "name": "Dynagas LNG Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLNG^B",
    "name": "Dynagas LNG Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLPH",
    "name": "Delphi Technologies PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLPN",
    "name": "Dolphin Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DLPNW",
    "name": "Dolphin Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DLR",
    "name": "Digital Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLR^C",
    "name": "Digital Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLR^G",
    "name": "Digital Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLR^H",
    "name": "Digital Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLR^I",
    "name": "Digital Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLR^J",
    "name": "Digital Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DLTH",
    "name": "Duluth Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DLTR",
    "name": "Dollar Tree, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DLX",
    "name": "Deluxe Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DM",
    "name": "Dominion Energy Midstream Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DMB",
    "name": "Dreyfus Municipal Bond Infrastructure Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DMF",
    "name": "Dreyfus Municipal Income, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DMLP",
    "name": "Dorchester Minerals, L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DMO",
    "name": "Western Asset Mortgage Defined Opportunity Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DMPI",
    "name": "DelMar Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DMRC",
    "name": "Digimarc Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DNB",
    "name": "Dun & Bradstreet Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DNBF",
    "name": "DNB Financial Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DNI",
    "name": "Dividend and Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DNJR",
    "name": "GOLDEN BULL LIMITED",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DNKN",
    "name": "Dunkin&#39; Brands Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DNLI",
    "name": "Denali Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DNN",
    "name": "Denison Mine Corp",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DNOW",
    "name": "NOW Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DNP",
    "name": "Duff & Phelps Utilities Income, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DNR",
    "name": "Denbury Resources Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DO",
    "name": "Diamond Offshore Drilling, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DOC",
    "name": "Physicians Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DOCU",
    "name": "DocuSign, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOGZ",
    "name": "Dogness (International) Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOMO",
    "name": "Domo, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOOO",
    "name": "BRP Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOOR",
    "name": "Masonite International Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DORM",
    "name": "Dorman Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOTA",
    "name": "Draper Oakwood Technology Acquisition, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOTAR",
    "name": "Draper Oakwood Technology Acquisition, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOTAU",
    "name": "Draper Oakwood Technology Acquisition, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOTAW",
    "name": "Draper Oakwood Technology Acquisition, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOV",
    "name": "Dover Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DOVA",
    "name": "Dova Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DOX",
    "name": "Amdocs Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DPG",
    "name": "Duff & Phelps Global Utility Income Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DPLO",
    "name": "Diplomat Pharmacy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DPW",
    "name": "DPW Holdings, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DPZ",
    "name": "Domino&#39;s Pizza Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DQ",
    "name": "DAQO New Energy Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DRAD",
    "name": "Digirad Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DRD",
    "name": "DRDGOLD Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DRE",
    "name": "Duke Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DRH",
    "name": "Diamondrock Hospitality Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DRI",
    "name": "Darden Restaurants, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DRIO",
    "name": "DarioHealth Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DRIOW",
    "name": "DarioHealth Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DRIV",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DRNA",
    "name": "Dicerna Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DRQ",
    "name": "Dril-Quip, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DRRX",
    "name": "DURECT Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DRUA",
    "name": "Dominion Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DRYS",
    "name": "DryShips Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DS",
    "name": "Drive Shack Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DS^B",
    "name": "Drive Shack Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DS^C",
    "name": "Drive Shack Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DS^D",
    "name": "Drive Shack Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DSE",
    "name": "Duff & Phelps Select MLP and Midstream Energy Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DSGX",
    "name": "The Descartes Systems Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DSKE",
    "name": "Daseke, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DSKEW",
    "name": "Daseke, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DSL",
    "name": "DoubleLine Income Solutions Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DSLV",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DSM",
    "name": "Dreyfus Strategic Municipal Bond Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DSPG",
    "name": "DSP Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DSS",
    "name": "Document Security Systems, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DSU",
    "name": "Blackrock Debt Strategies Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DSW",
    "name": "DSW Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DSWL",
    "name": "Deswell Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DSX",
    "name": "Diana Shipping inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DSX^B",
    "name": "Diana Shipping inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DTE",
    "name": "DTE Energy Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DTEA",
    "name": "DAVIDsTEA Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DTF",
    "name": "Duff & Phelps Utilities Tax-Free Income, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DTJ",
    "name": "DTE Energy Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DTLA^",
    "name": "Brookfield DTLA Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DTQ",
    "name": "DTE Energy Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DTRM",
    "name": "Determine, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DTUL",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DTUS",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DTV",
    "name": "DTE Energy Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DTW",
    "name": "DTE Energy Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DTY",
    "name": "DTE Energy Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DTYL",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DTYS",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DUC",
    "name": "Duff & Phelps Utility & Corporate Bond Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DUK",
    "name": "Duke Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DUKB",
    "name": "Duke Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DUKH",
    "name": "Duke Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DUSA",
    "name": "Davis Fundamental ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DVA",
    "name": "DaVita Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DVAX",
    "name": "Dynavax Technologies Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DVCR",
    "name": "Diversicare Healthcare Services Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DVD",
    "name": "Dover Motorsports, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DVLU",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DVMT",
    "name": "Dell Technologies Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DVN",
    "name": "Devon Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DVOL",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DVY",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWAQ",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWAS",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWAT",
    "name": "Arrow Investments Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWCH",
    "name": "Datawatch Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWCR",
    "name": "Arrow Investments Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWDP",
    "name": "DowDuPont Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DWFI",
    "name": "SPDR Series Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWIN",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWLD",
    "name": "Davis Fundamental ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWLV",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWMC",
    "name": "AdvisorShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWPP",
    "name": "First Trust Exchange-Traded Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWSH",
    "name": "AdvisorShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWSN",
    "name": "Dawson Geophysical Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DWTR",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DX",
    "name": "Dynex Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DX^A",
    "name": "Dynex Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DXB",
    "name": "Deutsche Bank AG",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DX^B",
    "name": "Dynex Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DXC",
    "name": "DXC Technology Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DXCM",
    "name": "DexCom, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DXF",
    "name": "Dunxin Financial Holdings Limited",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DXGE",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DXJS",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DXLG",
    "name": "Destination XL Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DXPE",
    "name": "DXP Enterprises, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DXR",
    "name": "Daxor Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "DXYN",
    "name": "The Dixie Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DY",
    "name": "Dycom Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DYNC",
    "name": "Vistra Energy Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "DYNT",
    "name": "Dynatronics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DYSL",
    "name": "Dynasil Corporation of America",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "DZSI",
    "name": "DASAN Zhone Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "E",
    "name": "ENI S.p.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EA",
    "name": "Electronic Arts Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EAB",
    "name": "Entergy Arkansas, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EAD",
    "name": "Wells Fargo Income Opportunities Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EAE",
    "name": "Entergy Arkansas, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EAF",
    "name": "GrafTech International Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EAGL",
    "name": "Platinum Eagle Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EAGLU",
    "name": "Platinum Eagle Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EAGLW",
    "name": "Platinum Eagle Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EAI",
    "name": "Entergy Arkansas, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EARN",
    "name": "Ellington Residential Mortgage REIT",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EARS",
    "name": "Auris Medical Holding AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EAST",
    "name": "Eastside Distilling, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EAT",
    "name": "Brinker International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EB",
    "name": "Eventbrite, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EBAY",
    "name": "eBay Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EBAYL",
    "name": "eBay Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EBF",
    "name": "Ennis, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EBIX",
    "name": "Ebix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EBIZ",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EBMT",
    "name": "Eagle Bancorp Montana, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EBR",
    "name": "Centrais Electricas Brasileiras S.A.- Eletrobras",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EBR.B",
    "name": "Centrais Electricas Brasileiras S.A.- Eletrobras",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EBS",
    "name": "Emergent Biosolutions, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EBSB",
    "name": "Meridian Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EBTC",
    "name": "Enterprise Bancorp Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EC",
    "name": "Ecopetrol S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECA",
    "name": "Encana Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECC",
    "name": "Eagle Point Credit Company Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECCA",
    "name": "Eagle Point Credit Company Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECCB",
    "name": "Eagle Point Credit Company Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECCX",
    "name": "Eagle Point Credit Company Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECCY",
    "name": "Eagle Point Credit Company Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECF",
    "name": "Ellsworth Growth and Income Fund Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ECF^A",
    "name": "Ellsworth Growth and Income Fund Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ECHO",
    "name": "Echo Global Logistics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ECL",
    "name": "Ecolab Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECOL",
    "name": "US Ecology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ECOM",
    "name": "ChannelAdvisor Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECOR",
    "name": "electroCore, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ECPG",
    "name": "Encore Capital Group Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ECR",
    "name": "Eclipse Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECT",
    "name": "ECA Marcellus Trust I",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ECYT",
    "name": "Endocyte, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ED",
    "name": "Consolidated Edison Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EDAP",
    "name": "EDAP TMS S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EDBI",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EDD",
    "name": "Morgan Stanley Emerging Markets Domestic Debt Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EDF",
    "name": "Stone Harbor Emerging Markets Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EDGE",
    "name": "Edge Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EDI",
    "name": "Stone Harbor Emerging Markets Total Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EDIT",
    "name": "Editas Medicine, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EDN",
    "name": "Empresa Distribuidora Y Comercializadora Norte S.A. (Edenor)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EDNT",
    "name": "Edison Nation, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EDRY",
    "name": "EuroDry Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EDTX",
    "name": "EdtechX Holdings Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EDTXU",
    "name": "EdtechX Holdings Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EDTXW",
    "name": "EdtechX Holdings Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EDU",
    "name": "New Oriental Education & Technology Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EDUC",
    "name": "Educational Development Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EE",
    "name": "El Paso Electric Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EEA",
    "name": "European Equity Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EEFT",
    "name": "Euronet Worldwide, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EEI",
    "name": "Ecology and Environment, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EEMA",
    "name": "iShares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EEP",
    "name": "Enbridge Energy, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EEQ",
    "name": "Enbridge Energy Management LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EEX",
    "name": "Emerald Expositions Events, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EFAS",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EFBI",
    "name": "Eagle Financial Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EFC",
    "name": "Ellington Financial LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EFF",
    "name": "Eaton vance Floating-Rate Income Plus Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EFII",
    "name": "Electronics for Imaging, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EFL",
    "name": "Eaton Vance Floating-Rate 2022 Target Term Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EFOI",
    "name": "Energy Focus, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EFR",
    "name": "Eaton Vance Senior Floating-Rate Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EFSC",
    "name": "Enterprise Financial Services Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EFT",
    "name": "Eaton Vance Floating Rate Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EFX",
    "name": "Equifax, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EGAN",
    "name": "eGain Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EGBN",
    "name": "Eagle Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EGF",
    "name": "Blackrock Enhanced Government Fund, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EGHT",
    "name": "8x8 Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EGHT",
    "name": "8x8 Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EGI",
    "name": "Entree Resources Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EGIF",
    "name": "Eagle Growth and Income Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EGL",
    "name": "Engility Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EGLE",
    "name": "Eagle Bulk Shipping Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EGO",
    "name": "Eldorado Gold Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EGOV",
    "name": "NIC Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EGP",
    "name": "EastGroup Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EGRX",
    "name": "Eagle Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EGY",
    "name": "VAALCO Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EHC",
    "name": "Encompass Health Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EHI",
    "name": "Western Asset Global High Income Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EHIC",
    "name": "eHi Car Services Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EHT",
    "name": "Eaton Vance High Income 2021 Target Term Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EHTH",
    "name": "eHealth, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EIA",
    "name": "Eaton Vance California Municipal Bond Fund II",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EIDX",
    "name": "Eidos Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EIG",
    "name": "Employers Holdings Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EIGI",
    "name": "Endurance International Group Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EIGR",
    "name": "Eiger BioPharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EIM",
    "name": "Eaton Vance Municipal Bond Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EIO",
    "name": "Eaton Vance Ohio Municipal Bond Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EIP",
    "name": "Eaton Vance Pennsylvania Municipal Bond Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EIV",
    "name": "Eaton Vance Municipal Bond Fund II",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EIX",
    "name": "Edison International",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EKSO",
    "name": "Ekso Bionics Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EL",
    "name": "Estee Lauder Companies, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELAN",
    "name": "Elanco Animal Health Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELC",
    "name": "Entergy Louisiana, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELF",
    "name": "e.l.f. Beauty, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELGX",
    "name": "Endologix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ELJ",
    "name": "Entergy Louisiana, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELLI",
    "name": "Ellie Mae, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELLO",
    "name": "Ellomay Capital Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ELMD",
    "name": "Electromed, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ELOX",
    "name": "Eloxx Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ELP",
    "name": "Companhia Paranaense de Energia (COPEL)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELS",
    "name": "Equity Lifestyle Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELSE",
    "name": "Electro-Sensors, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ELTK",
    "name": "Eltek Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ELU",
    "name": "Entergy Louisiana, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELVT",
    "name": "Elevate Credit, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ELY",
    "name": "Callaway Golf Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EMAN",
    "name": "eMagin Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EMB",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EMCB",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EMCF",
    "name": "Emclaire Financial Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EMCG",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EMCI",
    "name": "EMC Insurance Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EMD",
    "name": "Western Asset Emerging Markets Debt Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EME",
    "name": "EMCOR Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EMES",
    "name": "Emerge Energy Services LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EMF",
    "name": "Templeton Emerging Markets Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EMI",
    "name": "Eaton Vance Michigan Municipal Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EMIF",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EMITF",
    "name": "Elbit Imaging Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EMJ",
    "name": "Eaton Vance New Jersey Municipal Bond Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EMKR",
    "name": "EMCORE Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EML",
    "name": "Eastern Company (The)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EMMS",
    "name": "Emmis Communications Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EMN",
    "name": "Eastman Chemical Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EMO",
    "name": "ClearBridge Energy Midstream Opportunity Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EMP",
    "name": "Entergy Mississippi, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EMR",
    "name": "Emerson Electric Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EMX",
    "name": "EMX Royalty Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EMXC",
    "name": "iShares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENB",
    "name": "Enbridge Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENBA",
    "name": "Enbridge Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENBL",
    "name": "Enable Midstream Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENDP",
    "name": "Endo International plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENFC",
    "name": "Entegra Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENG",
    "name": "ENGlobal Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENIA",
    "name": "Enel Americas S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENIC",
    "name": "Enel Chile S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENJ",
    "name": "Entergy New Orleans, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENLC",
    "name": "EnLink Midstream, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENLK",
    "name": "EnLink Midstream Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENO",
    "name": "Entergy New Orleans, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENPH",
    "name": "Enphase Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENR",
    "name": "Energizer Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENS",
    "name": "Enersys",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENSG",
    "name": "The Ensign Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENSV",
    "name": "ENSERVCO Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ENT",
    "name": "Global Eagle Entertainment Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENTA",
    "name": "Enanta Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENTG",
    "name": "Entegris, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENTX",
    "name": "Entera Bio Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENTXW",
    "name": "Entera Bio Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ENV",
    "name": "Envestnet, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENVA",
    "name": "Enova International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENX",
    "name": "Eaton Vance New York Municipal Bond Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ENZ",
    "name": "Enzo Biochem, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ENZL",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EOCC",
    "name": "Enel Generacion Chile S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EOD",
    "name": "Wells Fargo Global Dividend Opportunity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EOG",
    "name": "EOG Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EOI",
    "name": "Eaton Vance Enhance Equity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EOLS",
    "name": "Evolus, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EOS",
    "name": "Eaton Vance Enhanced Equity Income Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EOT",
    "name": "Eaton Vance Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPAM",
    "name": "EPAM Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPAY",
    "name": "Bottomline Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EPC",
    "name": "Energizer Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EP^C",
    "name": "El Paso Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPD",
    "name": "Enterprise Products Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPE",
    "name": "EP Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPIX",
    "name": "ESSA Pharma Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EPM",
    "name": "Evolution Petroleum Corporation, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EPR",
    "name": "EPR Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPR^C",
    "name": "EPR Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPR^E",
    "name": "EPR Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPR^G",
    "name": "EPR Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPRT",
    "name": "Essential Properties Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EPZM",
    "name": "Epizyme, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EQ",
    "name": "Equillium, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EQBK",
    "name": "Equity Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EQC",
    "name": "Equity Commonwealth",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EQC^D",
    "name": "Equity Commonwealth",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EQGP",
    "name": "EQGP Holdings, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EQH",
    "name": "AXA Equitable Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EQIX",
    "name": "Equinix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EQM",
    "name": "EQM Midstream Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EQNR",
    "name": "Equinor ASA",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EQR",
    "name": "Equity Residential",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EQRR",
    "name": "ProShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EQS",
    "name": "Equus Total Return, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EQT",
    "name": "EQT Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ERA",
    "name": "Era Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ERC",
    "name": "Wells Fargo Multi-Sector Income Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ERF",
    "name": "Enerplus Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ERH",
    "name": "Wells Fargo Utilities and High Income Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ERI",
    "name": "Eldorado Resorts, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ERIC",
    "name": "Ericsson",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ERIE",
    "name": "Erie Indemnity Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ERII",
    "name": "Energy Recovery, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ERJ",
    "name": "Embraer S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EROS",
    "name": "Eros International PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ERYP",
    "name": "Erytech Pharma S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ES",
    "name": "Eversource Energy",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ESBK",
    "name": "Elmira Savings Bank NY (The)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESCA",
    "name": "Escalade, Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESE",
    "name": "ESCO Technologies Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ESEA",
    "name": "Euroseas Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESES",
    "name": "Eco-Stim Energy Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESG",
    "name": "FlexShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESGD",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESGE",
    "name": "iShares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESGG",
    "name": "FlexShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESGR",
    "name": "Enstar Group Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESGRP",
    "name": "Enstar Group Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESGU",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESIO",
    "name": "Electro Scientific Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESL",
    "name": "Esterline Technologies Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ESLT",
    "name": "Elbit Systems Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESNC",
    "name": "EnSync, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ESND",
    "name": "Essendant Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESNT",
    "name": "Essent Group Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ESP",
    "name": "Espey Mfg. & Electronics Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ESPR",
    "name": "Esperion Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESQ",
    "name": "Esquire Financial Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESRT",
    "name": "Empire State Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ESRX",
    "name": "Express Scripts Holding Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESS",
    "name": "Essex Property Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ESSA",
    "name": "ESSA Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESTA",
    "name": "Establishment Labs Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESTC",
    "name": "Elastic N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ESTE",
    "name": "Earthstone Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ESTR",
    "name": "Estre Ambiental, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESTRW",
    "name": "Estre Ambiental, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ESV",
    "name": "ENSCO plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ESXB",
    "name": "Community Bankers Trust Corporation.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ET",
    "name": "Energy Transfer L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETB",
    "name": "Eaton Vance Tax-Managed Buy-Write Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETFC",
    "name": "E*TRADE Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ETG",
    "name": "Eaton Vance Tax-Advantaged Global Dividend Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETH",
    "name": "Ethan Allen Interiors Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETJ",
    "name": "Eaton Vance Risk-Managed Diversified Equity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETM",
    "name": "Entercom Communications Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETN",
    "name": "Eaton Corporation, PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETO",
    "name": "Eaton Vance Tax-Advantage Global Dividend Opp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETON",
    "name": "Eton Pharmaceutcials, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ETP^C",
    "name": "Energy Transfer Operating, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETP^D",
    "name": "Energy Transfer Operating, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETR",
    "name": "Entergy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETRN",
    "name": "Equitrans Midstream Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETSY",
    "name": "Etsy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ETTX",
    "name": "Entasis Therapeutics Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ETV",
    "name": "Eaton Vance Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETW",
    "name": "Eaton Vance Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETX",
    "name": "Eaton Vance Municipal Income 2028 Term Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ETY",
    "name": "Eaton Vance Tax-Managed Diversified Equity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EUFN",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EURN",
    "name": "Euronav NV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EV",
    "name": "Eaton Vance Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVA",
    "name": "Enviva Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVBG",
    "name": "Everbridge, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVBN",
    "name": "Evans Bancorp, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EVC",
    "name": "Entravision Communications Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVER",
    "name": "EverQuote, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVF",
    "name": "Eaton Vance Senior Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVFM",
    "name": "Evofem Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVFTC",
    "name": "Eaton Vance NextShares Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVG",
    "name": "Eaton Vance Short Diversified Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVGBC",
    "name": "Eaton Vance NextShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVGN",
    "name": "Evogene Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVH",
    "name": "Evolent Health, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVI",
    "name": "EnviroStarm, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EVJ",
    "name": "Eaton Vance New Jersey Municipal Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EVK",
    "name": "Ever-Glory International Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVLMC",
    "name": "Eaton Vance NextShares Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVLO",
    "name": "Evelo Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVLV",
    "name": "EVINE Live Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVM",
    "name": "Eaton Vance California Municipal Bond Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EVN",
    "name": "Eaton Vance Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVO",
    "name": "Eaton Vance Ohio Municipal Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EVOK",
    "name": "Evoke Pharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVOL",
    "name": "Evolving Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVOP",
    "name": "EVO Payments, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVP",
    "name": "Eaton Vance Pennsylvania Municipal Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EVR",
    "name": "Evercore Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVRG",
    "name": "Evergy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVRI",
    "name": "Everi Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVSTC",
    "name": "Eaton Vance NextShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EVT",
    "name": "Eaton Vance Tax Advantaged Dividend Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVTC",
    "name": "Evertec, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EVV",
    "name": "Eaton Vance Limited Duration Income Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EVY",
    "name": "Eaton Vance New York Municipal Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "EW",
    "name": "Edwards Lifesciences Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EWBC",
    "name": "East West Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EWZS",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EXAS",
    "name": "Exact Sciences Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EXC",
    "name": "Exelon Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EXD",
    "name": "Eaton Vance Tax-Advantaged Bond",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EXEL",
    "name": "Exelixis, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EXFO",
    "name": "EXFO Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EXG",
    "name": "Eaton Vance Tax-Managed Global Diversified Equity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EXK",
    "name": "Endeavour Silver Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EXLS",
    "name": "ExlService Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EXP",
    "name": "Eagle Materials Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EXPD",
    "name": "Expeditors International of Washington, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EXPE",
    "name": "Expedia Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EXPI",
    "name": "eXp World Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EXPO",
    "name": "Exponent, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EXPR",
    "name": "Express, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EXR",
    "name": "Extra Space Storage Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EXTN",
    "name": "Exterran Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "EXTR",
    "name": "Extreme Networks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EYE",
    "name": "National Vision Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EYEG",
    "name": "Eyegate Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EYEGW",
    "name": "Eyegate Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EYEN",
    "name": "Eyenovia, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EYES",
    "name": "Second Sight Medical Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EYESW",
    "name": "Second Sight Medical Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EYPT",
    "name": "EyePoint Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EZPW",
    "name": "EZCORP, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "EZT",
    "name": "Entergy Texas Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "F",
    "name": "Ford Motor Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FAAR",
    "name": "First Trust Exchange-Traded Fund VII",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FAB",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FAD",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FAF",
    "name": "First American Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FALN",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FAM",
    "name": "First Trust/Aberdeen Global Opportunity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FAMI",
    "name": "FARMMI, INC.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FANG",
    "name": "Diamondback Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FANH",
    "name": "Fanhua Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FARM",
    "name": "Farmer Brothers Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FARO",
    "name": "FARO Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FAST",
    "name": "Fastenal Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FAT",
    "name": "FAT Brands Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FATE",
    "name": "Fate Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FAX",
    "name": "Aberdeen Asia-Pacific Income Fund Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "FB",
    "name": "Facebook, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FBC",
    "name": "Flagstar Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FBHS",
    "name": "Fortune Brands Home & Security, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FBIO",
    "name": "Fortress Biotech, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FBIOP",
    "name": "Fortress Biotech, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FBIZ",
    "name": "First Business Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FBK",
    "name": "FB Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FBM",
    "name": "Foundation Building Materials, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FBMS",
    "name": "The First Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FBNC",
    "name": "First Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FBP",
    "name": "First BanCorp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FBR",
    "name": "Fibria Celulose S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FBSS",
    "name": "Fauquier Bankshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FBZ",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FC",
    "name": "Franklin Covey Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FCA",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCAL",
    "name": "First Trust Exchange-Traded Fund III",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCAN",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCAP",
    "name": "First Capital, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCAU",
    "name": "Fiat Chrysler Automobiles N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FCB",
    "name": "FCB Financial Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FCBC",
    "name": "First Community Bankshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCBP",
    "name": "First Choice Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCCO",
    "name": "First Community Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCCY",
    "name": "1st Constitution Bancorp (NJ)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCE.A",
    "name": "Forest City Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FCEF",
    "name": "First Trust Exchange-Traded Fund VIII",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCEL",
    "name": "FuelCell Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCF",
    "name": "First Commonwealth Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FCFS",
    "name": "FirstCash, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCN",
    "name": "FTI Consulting, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FCNCA",
    "name": "First Citizens BancShares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCO",
    "name": "Aberdeen Global Income Fund, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "FCPT",
    "name": "Four Corners Property Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FCSC",
    "name": "Fibrocell Science Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCT",
    "name": "First Trust Senior Floating Rate Income Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FCVT",
    "name": "First Trust Exchange-Traded Fund IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FCX",
    "name": "Freeport-McMoran, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FDBC",
    "name": "Fidelity D & D Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FDC",
    "name": "First Data Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FDEF",
    "name": "First Defiance Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FDEU",
    "name": "First Trust Dynamic Europe Equity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FDIV",
    "name": "First Trust Exchange-Traded Fund IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FDNI",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FDP",
    "name": "Fresh Del Monte Produce, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FDS",
    "name": "FactSet Research Systems Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FDT",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FDTS",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FDUS",
    "name": "Fidus Investment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FDUSL",
    "name": "Fidus Investment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FDX",
    "name": "FedEx Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FE",
    "name": "FirstEnergy Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FEDU",
    "name": "Four Seasons Education (Cayman) Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FEI",
    "name": "First Trust MLP and Energy Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FEIM",
    "name": "Frequency Electronics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FELE",
    "name": "Franklin Electric Co., Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FELP",
    "name": "Foresight Energy LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FEM",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FEMB",
    "name": "First Trust Exchange-Traded Fund III",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FEMS",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FEN",
    "name": "First Trust Energy Income and Growth Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "FENC",
    "name": "Fennec Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FENG",
    "name": "Phoenix New Media Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FEO",
    "name": "First Trust/Aberdeen Emerging Opportunity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FEP",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FET",
    "name": "Forum Energy Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FEUZ",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FEX",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FEYE",
    "name": "FireEye, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FF",
    "name": "FutureFuel Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FFA",
    "name": "First Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FFBC",
    "name": "First Financial Bancorp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FFBCW",
    "name": "First Financial Bancorp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FFBW",
    "name": "FFBW, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FFC",
    "name": "Flaherty & Crumrine Preferred Securities Income Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FFG",
    "name": "FBL Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FFHL",
    "name": "Fuwei Films (Holdings) Co., Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FFIC",
    "name": "Flushing Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FFIN",
    "name": "First Financial Bankshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FFIV",
    "name": "F5 Networks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FFNW",
    "name": "First Financial Northwest, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FFWM",
    "name": "First Foundation Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FG",
    "name": "FGL Holdings",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FGB",
    "name": "First Trust Specialty Finance and Financial Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FGBI",
    "name": "First Guaranty Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FGEN",
    "name": "FibroGen, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FGM",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FGP",
    "name": "Ferrellgas Partners, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FG.WS",
    "name": "FGL Holdings",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FHB",
    "name": "First Hawaiian, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FHK",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FHN",
    "name": "First Horizon National Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FHN^A",
    "name": "First Horizon National Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FI",
    "name": "Frank&#39;s International N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FIBK",
    "name": "First Interstate BancSystem, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FICO",
    "name": "Fair Isaac Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FID",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FIF",
    "name": "First Trust Energy Infrastructure Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FII",
    "name": "Federated Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FINX",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FIS",
    "name": "Fidelity National Information Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FISI",
    "name": "Financial Institutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FISV",
    "name": "Fiserv, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FIT",
    "name": "Fitbit, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FITB",
    "name": "Fifth Third Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FITBI",
    "name": "Fifth Third Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FIV",
    "name": "First Trust Senior Floating Rate 2022 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FIVE",
    "name": "Five Below, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FIVN",
    "name": "Five9, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FIX",
    "name": "Comfort Systems USA, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FIXD",
    "name": "First Trust Exchange-Traded Fund VIII",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FIXX",
    "name": "Homology Medicines, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FIZZ",
    "name": "National Beverage Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FJP",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FKO",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FKU",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FL",
    "name": "Foot Locker, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FLAG",
    "name": "Exchange Traded Concepts Trust FLAG-Forensic Accounting Long-S",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLAT",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLC",
    "name": "Flaherty & Crumrine Total Return Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FLDM",
    "name": "Fluidigm Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLEX",
    "name": "Flex Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLGT",
    "name": "Fulgent Genetics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLIC",
    "name": "The First of Long Island Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLIR",
    "name": "FLIR Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLKS",
    "name": "Flex Pharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLL",
    "name": "Full House Resorts, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLMN",
    "name": "Falcon Minerals Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLMNW",
    "name": "Falcon Minerals Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLN",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLNT",
    "name": "Fluent, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLO",
    "name": "Flowers Foods, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FLOW",
    "name": "SPX FLOW, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FLR",
    "name": "Fluor Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FLS",
    "name": "Flowserve Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FLT",
    "name": "FleetCor Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FLWS",
    "name": "1-800 FLOWERS.COM, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLXN",
    "name": "Flexion Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLXS",
    "name": "Flexsteel Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FLY",
    "name": "Fly Leasing Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FMAO",
    "name": "Farmers & Merchants Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMB",
    "name": "First Trust Exchange-Traded Fund III",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMBH",
    "name": "First Mid-Illinois Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMBI",
    "name": "First Midwest Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMC",
    "name": "FMC Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FMCI",
    "name": "Forum Merger II Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMCIU",
    "name": "Forum Merger II Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMCIW",
    "name": "Forum Merger II Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMHI",
    "name": "First Trust Exchange-Traded Fund III",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMK",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMN",
    "name": "Federated Premier Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FMNB",
    "name": "Farmers National Banc Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FMO",
    "name": "Fiduciary/Claymore Energy Infrastructure Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FMS",
    "name": "Fresenius Medical Care Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FMX",
    "name": "Fomento Economico Mexicano S.A.B. de C.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FMY",
    "name": "First Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FN",
    "name": "Fabrinet",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FNB",
    "name": "F.N.B. Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FNB^E",
    "name": "F.N.B. Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FNCB",
    "name": "FNCB Bancorp Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FND",
    "name": "Floor & Decor Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FNF",
    "name": "Fidelity National Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FNHC",
    "name": "FedNat Holding Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FNJN",
    "name": "Finjan Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FNK",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FNKO",
    "name": "Funko, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FNLC",
    "name": "First Bancorp, Inc (ME)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FNSR",
    "name": "Finisar Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FNV",
    "name": "Franco-Nevada Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FNWB",
    "name": "First Northwest Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FNX",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FNY",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FOANC",
    "name": "Gabelli NextShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FOCS",
    "name": "Focus Financial Partners Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FOE",
    "name": "Ferro Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FOF",
    "name": "Cohen & Steers Closed-End Opportunity Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FOLD",
    "name": "Amicus Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FOMX",
    "name": "Foamix Pharmaceuticals Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FONE",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FONR",
    "name": "Fonar Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FOR",
    "name": "Forestar Group Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FORD",
    "name": "Forward Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FORK",
    "name": "Fuling Global Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FORM",
    "name": "FormFactor, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FORR",
    "name": "Forrester Research, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FORTY",
    "name": "Formula Systems (1985) Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FOSL",
    "name": "Fossil Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FOX",
    "name": "Twenty-First Century Fox, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FOXA",
    "name": "Twenty-First Century Fox, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FOXF",
    "name": "Fox Factory Holding Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FPA",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FPAC",
    "name": "Far Point Acquisition Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FPAC.U",
    "name": "Far Point Acquisition Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FPAC.WS",
    "name": "Far Point Acquisition Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FPAY",
    "name": "FlexShopper, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FPAYW",
    "name": "FlexShopper, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FPF",
    "name": "First Trust Intermediate Duration Preferred & Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FPH",
    "name": "Five Point Holdings, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FPI",
    "name": "Farmland Partners Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FPI^B",
    "name": "Farmland Partners Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FPL",
    "name": "First Trust New Opportunities MLP & Energy Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FPRX",
    "name": "Five Prime Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FPXE",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FPXI",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FR",
    "name": "First Industrial Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRA",
    "name": "Blackrock Floating Rate Income Strategies Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRAC",
    "name": "Keane Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRAN",
    "name": "Francesca&#39;s Holdings Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRBA",
    "name": "First Bank",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRBK",
    "name": "Republic First Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRC",
    "name": "FIRST REPUBLIC BANK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRC^D",
    "name": "FIRST REPUBLIC BANK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRC^E.CL",
    "name": "FIRST REPUBLIC BANK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRC^F",
    "name": "FIRST REPUBLIC BANK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRC^G",
    "name": "FIRST REPUBLIC BANK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRC^H",
    "name": "FIRST REPUBLIC BANK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRC^I",
    "name": "FIRST REPUBLIC BANK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRD",
    "name": "Friedman Industries Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "FRED",
    "name": "Fred&#39;s, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRGI",
    "name": "Fiesta Restaurant Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRME",
    "name": "First Merchants Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRO",
    "name": "Frontline Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRPH",
    "name": "FRP Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRPT",
    "name": "Freshpet, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRSH",
    "name": "Papa Murphy&#39;s Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRSX",
    "name": "Foresight Autonomous Holdings Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRT",
    "name": "Federal Realty Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FRTA",
    "name": "Forterra, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FRT^C",
    "name": "Federal Realty Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FSAC",
    "name": "Federal Street Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSACU",
    "name": "Federal Street Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSACW",
    "name": "Federal Street Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSB",
    "name": "Franklin Financial Network, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FSBC",
    "name": "FSB Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSBW",
    "name": "FS Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSCT",
    "name": "ForeScout Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSD",
    "name": "First Trust High Income Long Short Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FSFG",
    "name": "First Savings Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSI",
    "name": "Flexible Solutions International Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "FSIC",
    "name": "FS Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FSLR",
    "name": "First Solar, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSM",
    "name": "Fortuna Silver Mines Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FSNN",
    "name": "Fusion Connect, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSP",
    "name": "Franklin Street Properties Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "FSS",
    "name": "Federal Signal Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FSTR",
    "name": "L.B. Foster Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSV",
    "name": "FirstService Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FSZ",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FT",
    "name": "Franklin Universal Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FTA",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTACU",
    "name": "FinTech Acquisition Corp. III",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTAG",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTAI",
    "name": "Fortress Transportation and Infrastructure Investors LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FTC",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTCH",
    "name": "Farfetch Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FTCS",
    "name": "First Trust Exchange-Traded Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTD",
    "name": "FTD Companies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTDR",
    "name": "frontdoor, inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTEK",
    "name": "Fuel Tech, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTEO",
    "name": "FRONTEO, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTF",
    "name": "Franklin Limited Duration Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "FTFT",
    "name": "Future FinTech Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTGC",
    "name": "First Trust Exchange-Traded Fund VII",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTHI",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTI",
    "name": "TechnipFMC plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FTK",
    "name": "Flotek Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FTLB",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTNT",
    "name": "Fortinet, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTNW",
    "name": "FTE Networks, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "FTR",
    "name": "Frontier Communications Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTRI",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTS",
    "name": "Fortis Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FTSI",
    "name": "FTS International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FTSL",
    "name": "First Trust Exchange-Traded Fund IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTSM",
    "name": "First Trust Exchange-Traded Fund IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTSV",
    "name": "Forty Seven, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTV",
    "name": "Fortive Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FTV^A",
    "name": "Fortive Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FTXD",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTXG",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTXH",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTXL",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTXN",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTXO",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FTXR",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FUL",
    "name": "H. B. Fuller Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FULT",
    "name": "Fulton Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FUN",
    "name": "Cedar Fair, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "FUNC",
    "name": "First United Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FUND",
    "name": "Sprott Focus Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FUSB",
    "name": "First US Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FUV",
    "name": "Arcimoto, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FV",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FVC",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FVCB",
    "name": "FVCBankcorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FVE",
    "name": "Five Star Senior Living Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FWONA",
    "name": "Liberty Media Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FWONK",
    "name": "Liberty Media Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FWP",
    "name": "Forward Pharma A/S",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FWRD",
    "name": "Forward Air Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FYC",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FYT",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "FYX",
    "name": "First Trust Exchange-Traded AlphaDEX Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "G",
    "name": "Genpact Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GAB",
    "name": "Gabelli Equity Trust, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GABC",
    "name": "German American Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GAB^D",
    "name": "Gabelli Equity Trust, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GAB^G",
    "name": "Gabelli Equity Trust, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GAB^H",
    "name": "Gabelli Equity Trust, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GAB^J",
    "name": "Gabelli Equity Trust, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GAIA",
    "name": "Gaia, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GAIN",
    "name": "Gladstone Investment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GAINL",
    "name": "Gladstone Investment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GAINM",
    "name": "Gladstone Investment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GALT",
    "name": "Galectin Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GAM",
    "name": "General American Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GAM^B",
    "name": "General American Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GARS",
    "name": "Garrison Capital Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GASS",
    "name": "StealthGas, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GATX",
    "name": "GATX Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GBAB",
    "name": "Guggenheim Taxable Municipal Managed Duration Trst",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GBCI",
    "name": "Glacier Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GBDC",
    "name": "Golub Capital BDC, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GBL",
    "name": "Gamco Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GBLI",
    "name": "Global Indemnity Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GBLIL",
    "name": "Global Indemnity Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GBLIZ",
    "name": "Global Indemnity Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GBNK",
    "name": "Guaranty Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GBR",
    "name": "New Concept Energy, Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GBT",
    "name": "Global Blood Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GBX",
    "name": "Greenbrier Companies, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GCAP",
    "name": "GAIN Capital Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GCBC",
    "name": "Greene County Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GCI",
    "name": "TEGNA Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GCO",
    "name": "Genesco Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GCP",
    "name": "GCP Applied Technologies Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GCV",
    "name": "Gabelli Convertible and Income Securities Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GCV^B",
    "name": "Gabelli Convertible and Income Securities Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GCVRZ",
    "name": "Sanofi",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GD",
    "name": "General Dynamics Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDDY",
    "name": "GoDaddy Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDEN",
    "name": "Golden Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GDI",
    "name": "Gardner Denver Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDL",
    "name": "The GDL Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDL^C",
    "name": "The GDL Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDO",
    "name": "Western Asset Global Corporate Defined Opportunity Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDOT",
    "name": "Green Dot Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDP",
    "name": "Goodrich Petroleum Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GDS",
    "name": "GDS Holdings Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GDV",
    "name": "Gabelli Dividend",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDV^A",
    "name": "Gabelli Dividend",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDV^D",
    "name": "Gabelli Dividend",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GDV^G",
    "name": "Gabelli Dividend",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GE",
    "name": "General Electric Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GEC",
    "name": "Great Elm Capital Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GECC",
    "name": "Great Elm Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GECCL",
    "name": "Great Elm Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GECCM",
    "name": "Great Elm Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GEF",
    "name": "Greif Bros. Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GEF.B",
    "name": "Greif Bros. Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GEL",
    "name": "Genesis Energy, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GEMP",
    "name": "Gemphire Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GEN",
    "name": "Genesis Healthcare, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GENC",
    "name": "Gencor Industries Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GENE",
    "name": "Genetic Technologies Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GENY",
    "name": "Principal Exchange-Traded Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GEO",
    "name": "Geo Group Inc (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GEOS",
    "name": "Geospace Technologies Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GER",
    "name": "Goldman Sachs MLP Energy Renaissance Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GERN",
    "name": "Geron Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GES",
    "name": "Guess?, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GEVO",
    "name": "Gevo, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GF",
    "name": "New Germany Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GFA",
    "name": "Gafisa SA",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GFED",
    "name": "Guaranty Federal Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GFF",
    "name": "Griffon Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GFI",
    "name": "Gold Fields Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GFN",
    "name": "General Finance Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GFNCP",
    "name": "General Finance Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GFNSL",
    "name": "General Finance Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GFY",
    "name": "Western Asset Variable Rate Strategic Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GG",
    "name": "Goldcorp Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GGAL",
    "name": "Grupo Financiero Galicia S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GGB",
    "name": "Gerdau S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GGG",
    "name": "Graco Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GGM",
    "name": "Guggenheim Credit Allocation Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GGN",
    "name": "GAMCO Global Gold, Natural Reources & Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GGN^B",
    "name": "GAMCO Global Gold, Natural Reources & Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GGO",
    "name": "The Gabelli Go Anywhere Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GGO^A",
    "name": "The Gabelli Go Anywhere Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GGT",
    "name": "Gabelli Multi-Media Trust Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GGT^B",
    "name": "Gabelli Multi-Media Trust Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GGT^E",
    "name": "Gabelli Multi-Media Trust Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GGZ",
    "name": "Gabelli Global Small and Mid Cap Value Trust (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GGZ^A",
    "name": "Gabelli Global Small and Mid Cap Value Trust (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GH",
    "name": "Guardant Health, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GHC",
    "name": "Graham Holdings Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GHDX",
    "name": "Genomic Health, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GHG",
    "name": "GreenTree Hospitality Group Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GHL",
    "name": "Greenhill & Co., Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GHM",
    "name": "Graham Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GHY",
    "name": "PGIM Global Short Duration High Yield Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GIB",
    "name": "CGI Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GIFI",
    "name": "Gulf Island Fabrication, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GIG",
    "name": "GigCapital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GIG~",
    "name": "GigCapital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GIGM",
    "name": "GigaMedia Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GIG.U",
    "name": "GigCapital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GIG.WS",
    "name": "GigCapital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GIII",
    "name": "G-III Apparel Group, LTD.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GIL",
    "name": "Gildan Activewear, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GILD",
    "name": "Gilead Sciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GILT",
    "name": "Gilat Satellite Networks Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GIM",
    "name": "Templeton Global Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GIS",
    "name": "General Mills, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GJH",
    "name": "STRATS Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GJO",
    "name": "STRATS Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GJP",
    "name": "Synthetic Fixed-Income Securities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GJR",
    "name": "Synthetic Fixed-Income Securities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GJS",
    "name": "STRATS Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GJT",
    "name": "Synthetic Fixed-Income Securities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GJV",
    "name": "Synthetic Fixed-Income Securities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GKOS",
    "name": "Glaukos Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLAC",
    "name": "Greenland Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLACR",
    "name": "Greenland Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLACU",
    "name": "Greenland Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLACW",
    "name": "Greenland Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLAD",
    "name": "Gladstone Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLADD",
    "name": "Gladstone Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLADN",
    "name": "Gladstone Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLBS",
    "name": "Globus Maritime Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLBZ",
    "name": "Glen Burnie Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLDD",
    "name": "Great Lakes Dredge & Dock Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLDI",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLG",
    "name": "China Commercial Credit, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLIBA",
    "name": "GCI Liberty, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLIBP",
    "name": "GCI Liberty, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLMD",
    "name": "Galmed Pharmaceuticals Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLNG",
    "name": "Golar LNG Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLO",
    "name": "Clough Global Opportunities Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GLOB",
    "name": "Globant S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLOG",
    "name": "GasLog LP.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLOG^A",
    "name": "GasLog LP.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLOP",
    "name": "GasLog Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLOP^A",
    "name": "GasLog Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLOP^B",
    "name": "GasLog Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLOP^C",
    "name": "GasLog Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLOW",
    "name": "Glowpoint, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GLP",
    "name": "Global Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLP^A",
    "name": "Global Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLPG",
    "name": "Galapagos NV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLPI",
    "name": "Gaming and Leisure Properties, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLQ",
    "name": "Clough Global Equity Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GLRE",
    "name": "Greenlight Reinsurance, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLT",
    "name": "Glatfelter",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLU",
    "name": "The Gabelli Global Utility and Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GLU~",
    "name": "The Gabelli Global Utility and Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GLU^A",
    "name": "The Gabelli Global Utility and Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GLUU",
    "name": "Glu Mobile Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GLV",
    "name": "Clough Global Dividend and Income Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GLW",
    "name": "Corning Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GLYC",
    "name": "GlycoMimetics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GM",
    "name": "General Motors Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GMDA",
    "name": "Gamida Cell Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GME",
    "name": "Gamestop Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GMED",
    "name": "Globus Medical, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GMLP",
    "name": "Golar LNG Partners LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GMLPP",
    "name": "Golar LNG Partners LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GMO",
    "name": "General Moly, Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GMRE",
    "name": "Global Medical REIT Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GMRE^A",
    "name": "Global Medical REIT Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GMS",
    "name": "GMS Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GMTA",
    "name": "GATX Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GM.WS.B",
    "name": "General Motors Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GMZ",
    "name": "Goldman Sachs MLP Income Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNBC",
    "name": "Green Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNC",
    "name": "GNC Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNCA",
    "name": "Genocea Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNE",
    "name": "Genie Energy Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNE^A",
    "name": "Genie Energy Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNK",
    "name": "Genco Shipping & Trading Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNL",
    "name": "Global Net Lease, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNL^A",
    "name": "Global Net Lease, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNMA",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNMK",
    "name": "GenMark Diagnostics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNMX",
    "name": "Aevi Genomic Medicine, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNPX",
    "name": "Genprex, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNRC",
    "name": "Generac Holdlings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNRX",
    "name": "VanEck Vectors ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNT",
    "name": "GAMCO Natural Resources, Gold & Income Tust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNT^A",
    "name": "GAMCO Natural Resources, Gold & Income Tust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GNTX",
    "name": "Gentex Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNTY",
    "name": "Guaranty Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNUS",
    "name": "Genius Brands International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GNW",
    "name": "Genworth Financial Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GOF",
    "name": "Guggenheim Strategic Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GOGL",
    "name": "Golden Ocean Group Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOGO",
    "name": "Gogo Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOL",
    "name": "Gol Linhas Aereas Inteligentes S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GOLD",
    "name": "Randgold Resources Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOLF",
    "name": "Acushnet Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GOOD",
    "name": "Gladstone Commercial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOODM",
    "name": "Gladstone Commercial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOODO",
    "name": "Gladstone Commercial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOODP",
    "name": "Gladstone Commercial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOOG",
    "name": "Alphabet Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOOGL",
    "name": "Alphabet Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOOS",
    "name": "Canada Goose Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GORO",
    "name": "Gold Resource Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GOV",
    "name": "Government Properties Income Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GOVNI",
    "name": "Government Properties Income Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GPAQ",
    "name": "Gordon Pointe Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GPAQU",
    "name": "Gordon Pointe Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GPAQW",
    "name": "Gordon Pointe Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GPC",
    "name": "Genuine Parts Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GPI",
    "name": "Group 1 Automotive, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GPIC",
    "name": "Gaming Partners International Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GPJA",
    "name": "Georgia Power Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GPK",
    "name": "Graphic Packaging Holding Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GPL",
    "name": "Great Panther Silver Limited",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GPM",
    "name": "Guggenheim Enhanced Equity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GPMT",
    "name": "Granite Point Mortgage Trust Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GPN",
    "name": "Global Payments Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GPOR",
    "name": "Gulfport Energy Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GPP",
    "name": "Green Plains Partners LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GPRE",
    "name": "Green Plains, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GPRK",
    "name": "Geopark Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GPRO",
    "name": "GoPro, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GPS",
    "name": "Gap, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GPX",
    "name": "GP Strategies Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRA",
    "name": "W.R. Grace & Co.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRAF",
    "name": "Graf Industrial Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRAF.U",
    "name": "Graf Industrial Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRAF.WS",
    "name": "Graf Industrial Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRAM",
    "name": "Grana y Montero S.A.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRBIC",
    "name": "Gabelli NextShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRBK",
    "name": "Green Brick Partners, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRC",
    "name": "Gorman-Rupp Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRF",
    "name": "Eagle Capital Growth Fund, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GRFS",
    "name": "Grifols, S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRID",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRIF",
    "name": "Griffin Industrial Realty, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRIN",
    "name": "Grindrod Shipping Holdings Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRMN",
    "name": "Garmin Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRNQ",
    "name": "Greenpro Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GROW",
    "name": "U.S. Global Investors, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRPN",
    "name": "Groupon, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRP.U",
    "name": "Granite Real Estate Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRSH",
    "name": "Gores Holdings III, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRSHU",
    "name": "Gores Holdings III, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRSHW",
    "name": "Gores Holdings III, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRTS",
    "name": "Gritstone Oncology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRUB",
    "name": "GrubHub Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRVY",
    "name": "GRAVITY Co., Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GRX",
    "name": "The Gabelli Healthcare & Wellness Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRX^A",
    "name": "The Gabelli Healthcare & Wellness Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GRX^B",
    "name": "The Gabelli Healthcare & Wellness Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GS",
    "name": "Goldman Sachs Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GS^A",
    "name": "Goldman Sachs Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSAH",
    "name": "GS Acquisition Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSAH.U",
    "name": "GS Acquisition Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSAH.WS",
    "name": "GS Acquisition Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSAT",
    "name": "Globalstar, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GSB",
    "name": "GlobalSCAPE, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GS^B",
    "name": "Goldman Sachs Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSBC",
    "name": "Great Southern Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GSBD",
    "name": "Goldman Sachs BDC, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GS^C",
    "name": "Goldman Sachs Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GS^D",
    "name": "Goldman Sachs Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSH",
    "name": "Guangshen Railway Company Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSHD",
    "name": "Goosehead Insurance, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GSIT",
    "name": "GSI Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GS^J",
    "name": "Goldman Sachs Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSK",
    "name": "GlaxoSmithKline PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GS^K",
    "name": "Goldman Sachs Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSKY",
    "name": "GreenSky, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GSL",
    "name": "Global Ship Lease, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSL^B",
    "name": "Global Ship Lease, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSM",
    "name": "Ferroglobe PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GS^N",
    "name": "Goldman Sachs Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GSS",
    "name": "Golden Star Resources, Ltd",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GSUM",
    "name": "Gridsum Holding Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GSV",
    "name": "Gold Standard Ventures Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GSVC",
    "name": "GSV Capital Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GT",
    "name": "The Goodyear Tire & Rubber Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GTE",
    "name": "Gran Tierra Energy Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GTES",
    "name": "Gates Industrial Corporation plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GTHX",
    "name": "G1 Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GTIM",
    "name": "Good Times Restaurants Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GTLS",
    "name": "Chart Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GTN",
    "name": "Gray Television, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GTN.A",
    "name": "Gray Television, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GTS",
    "name": "Triple-S Management Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GTT",
    "name": "GTT Communications, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GTX",
    "name": "Garrett Motion Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GTXI",
    "name": "GTx, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GTY",
    "name": "Getty Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GTYH",
    "name": "GTY Technology Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GTYHU",
    "name": "GTY Technology Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GTYHW",
    "name": "GTY Technology Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GULF",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GURE",
    "name": "Gulf Resources, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GUT",
    "name": "Gabelli Utility Trust (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GUT^A",
    "name": "Gabelli Utility Trust (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GUT^C",
    "name": "Gabelli Utility Trust (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GV",
    "name": "Goldfield Corporation (The)",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "GVA",
    "name": "Granite Construction Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GVP",
    "name": "GSE Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GWB",
    "name": "Great Western Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GWGH",
    "name": "GWG Holdings, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GWPH",
    "name": "GW Pharmaceuticals Plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GWR",
    "name": "Genesee & Wyoming, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GWRE",
    "name": "Guidewire Software, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GWRS",
    "name": "Global Water Resources, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GWW",
    "name": "W.W. Grainger, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GYB",
    "name": "CABCO Series 2004-101 Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GYC",
    "name": "Corporate Asset Backed Corp CABCO",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "GYRO",
    "name": "Gyrodyne , LLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "GZT",
    "name": "Gazit-Globe Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "H",
    "name": "Hyatt Hotels Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HA",
    "name": "Hawaiian Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HABT",
    "name": "The Habit Restaurants, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HAE",
    "name": "Haemonetics Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HAFC",
    "name": "Hanmi Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HAIN",
    "name": "The Hain Celestial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HAIR",
    "name": "Restoration Robotics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HAL",
    "name": "Halliburton Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HALL",
    "name": "Hallmark Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HALO",
    "name": "Halozyme Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HAS",
    "name": "Hasbro, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HASI",
    "name": "Hannon Armstrong Sustainable Infrastructure Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HAYN",
    "name": "Haynes International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HBAN",
    "name": "Huntington Bancshares Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HBANN",
    "name": "Huntington Bancshares Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HBANO",
    "name": "Huntington Bancshares Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HBB",
    "name": "Hamilton Beach Brands Holding Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HBCP",
    "name": "Home Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HBI",
    "name": "Hanesbrands Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HBIO",
    "name": "Harvard Bioscience, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HBK",
    "name": "Hamilton Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HBM",
    "name": "Hudbay Minerals Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HBMD",
    "name": "Howard Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HBNC",
    "name": "Horizon Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HBP",
    "name": "Huttig Building Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCA",
    "name": "HCA Healthcare, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HCAP",
    "name": "Harvest Capital Credit Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCAPZ",
    "name": "Harvest Capital Credit Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCC",
    "name": "Warrior Met Coal, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HCCH",
    "name": "HL Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCCHR",
    "name": "HL Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCCHU",
    "name": "HL Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCCHW",
    "name": "HL Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCCI",
    "name": "Heritage-Crystal Clean, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCFT",
    "name": "Hunt Companies Finance Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HCFT^A",
    "name": "Hunt Companies Finance Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HCHC",
    "name": "HC2 Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HCI",
    "name": "HCI Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HCKT",
    "name": "The Hackett Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCLP",
    "name": "Hi-Crush Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HCM",
    "name": "Hutchison China MediTech Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCP",
    "name": "HCP, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HCSG",
    "name": "Healthcare Services Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HCXY",
    "name": "Hercules Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HCXZ",
    "name": "Hercules Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HD",
    "name": "Home Depot, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HDB",
    "name": "HDFC Bank Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HDP",
    "name": "Hortonworks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HDS",
    "name": "HD Supply Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HDSN",
    "name": "Hudson Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HE",
    "name": "Hawaiian Electric Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HEAR",
    "name": "Turtle Beach Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HEB",
    "name": "Hemispherx BioPharma, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "HEBT",
    "name": "Hebron Technology Co., Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HEES",
    "name": "H&E Equipment Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HEI",
    "name": "Heico Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HEI.A",
    "name": "Heico Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HELE",
    "name": "Helen of Troy Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HEP",
    "name": "Holly Energy Partners, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HEQ",
    "name": "John Hancock Hedged Equity & Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HES",
    "name": "Hess Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HES^A",
    "name": "Hess Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HESM",
    "name": "Hess Midstream Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HE^U",
    "name": "Hawaiian Electric Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HEWG",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HF",
    "name": "HFF, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HFBC",
    "name": "HopFed Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HFBL",
    "name": "Home Federal Bancorp, Inc. of Louisiana",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HFC",
    "name": "HollyFrontier Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HFFG",
    "name": "HF Foods Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HFGIC",
    "name": "Hartford Funds NextShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HFRO",
    "name": "Highland Floating Rate Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HFWA",
    "name": "Heritage Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HGH",
    "name": "Hartford Financial Services Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HGSH",
    "name": "China HGS Real Estate, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HGV",
    "name": "Hilton Grand Vacations Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HHC",
    "name": "Howard Hughes Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HHS",
    "name": "Harte-Hanks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HI",
    "name": "Hillenbrand Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIBB",
    "name": "Hibbett Sports, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HIE",
    "name": "Miller/Howard High Income Equity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIFR",
    "name": "InfraREIT, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIFS",
    "name": "Hingham Institution for Savings",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HIG",
    "name": "Hartford Financial Services Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIG^G",
    "name": "Hartford Financial Services Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIG.WS",
    "name": "Hartford Financial Services Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIHO",
    "name": "Highway Holdings Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HII",
    "name": "Huntington Ingalls Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIIQ",
    "name": "Health Insurance Innovations, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HIL",
    "name": "Hill International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIMX",
    "name": "Himax Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HIO",
    "name": "Western Asset High Income Opportunity Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIVE",
    "name": "Aerohive Networks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIW",
    "name": "Highwoods Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HIX",
    "name": "Western Asset High Income Fund II Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HJLI",
    "name": "Hancock Jaffe Laboratories, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HJLIW",
    "name": "Hancock Jaffe Laboratories, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HJV",
    "name": "MS Structured Asset Corp Saturns GE Cap Corp Series 2002-14",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HK",
    "name": "Halcon Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HK.WS",
    "name": "Halcon Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HL",
    "name": "Hecla Mining Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HL^B",
    "name": "Hecla Mining Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HLF",
    "name": "Herbalife Nutrition Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HLG",
    "name": "Hailiang Education Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HLI",
    "name": "Houlihan Lokey, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HLIT",
    "name": "Harmonic Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HLM^",
    "name": "Hillman Group Capital Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "HLNE",
    "name": "Hamilton Lane Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HLT",
    "name": "Hilton Worldwide Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HLTH",
    "name": "Nobilis Health Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "HLX",
    "name": "Helix Energy Solutions Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HMC",
    "name": "Honda Motor Company, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HMG",
    "name": "HMG/Courtland Properties, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "HMHC",
    "name": "Houghton Mifflin Harcourt Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HMI",
    "name": "Huami Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HMLP",
    "name": "Hoegh LNG Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HMLP^A",
    "name": "Hoegh LNG Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HMN",
    "name": "Horace Mann Educators Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HMNF",
    "name": "HMN Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HMNY",
    "name": "Helios and Matheson Analytics Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HMST",
    "name": "HomeStreet, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HMSY",
    "name": "HMS Holdings Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HMTA",
    "name": "HomeTown Bankshares Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HMTV",
    "name": "Hemisphere Media Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HMY",
    "name": "Harmony Gold Mining Company Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HNDL",
    "name": "Strategy Shares",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HNGR",
    "name": "Hanger, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HNI",
    "name": "HNI Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HNNA",
    "name": "Hennessy Advisors, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HNP",
    "name": "Huaneng Power International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HNRG",
    "name": "Hallador Energy Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HNW",
    "name": "Pioneer Diversified High Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "HOFT",
    "name": "Hooker Furniture Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HOG",
    "name": "Harley-Davidson, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HOLI",
    "name": "Hollysys Automation Technologies, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HOLX",
    "name": "Hologic, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HOMB",
    "name": "Home BancShares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HOME",
    "name": "At Home Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HON",
    "name": "Honeywell International Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HONE",
    "name": "HarborOne Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HOPE",
    "name": "Hope Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HOS",
    "name": "Hornbeck Offshore Services",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HOV",
    "name": "Hovnanian Enterprises Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HOVNP",
    "name": "Hovnanian Enterprises Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HP",
    "name": "Helmerich & Payne, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HPE",
    "name": "Hewlett Packard Enterprise Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HPF",
    "name": "John Hancock Pfd Income Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HPI",
    "name": "John Hancock Preferred Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HPJ",
    "name": "Highpower International Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HPP",
    "name": "Hudson Pacific Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HPQ",
    "name": "HP Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HPR",
    "name": "HighPoint Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HPS",
    "name": "John Hancock Preferred Income Fund III",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HPT",
    "name": "Hospitality Properties Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HQCL",
    "name": "Hanwha Q CELLS Co., Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HQH",
    "name": "Tekla Healthcare Investors",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HQL",
    "name": "Tekla Life Sciences Investors",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HQY",
    "name": "HealthEquity, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HR",
    "name": "Healthcare Realty Trust Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HRB",
    "name": "H&R Block, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HRC",
    "name": "Hill-Rom Holdings Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HRI",
    "name": "Herc Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HRL",
    "name": "Hormel Foods Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HRS",
    "name": "Harris Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HRTG",
    "name": "Heritage Insurance Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HRTX",
    "name": "Heron Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HRZN",
    "name": "Horizon Technology Finance Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HSBC",
    "name": "HSBC Holdings plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HSBC^A",
    "name": "HSBC Holdings plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HSC",
    "name": "Harsco Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HSDT",
    "name": "Helius Medical Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HSGX",
    "name": "Histogenics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HSIC",
    "name": "Henry Schein, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HSII",
    "name": "Heidrick & Struggles International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HSKA",
    "name": "Heska Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HSON",
    "name": "Hudson Global, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HST",
    "name": "Host Hotels & Resorts, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HSTM",
    "name": "HealthStream, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HSY",
    "name": "Hershey Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HT",
    "name": "Hersha Hospitality Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HTA",
    "name": "Healthcare Trust of America, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HTBI",
    "name": "HomeTrust Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HTBK",
    "name": "Heritage Commerce Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HTBX",
    "name": "Heat Biologics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HT^C",
    "name": "Hersha Hospitality Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HTD",
    "name": "John Hancock Tax Advantaged Dividend Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HT^D",
    "name": "Hersha Hospitality Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HT^E",
    "name": "Hersha Hospitality Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HTFA",
    "name": "Horizon Technology Finance Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HTGC",
    "name": "Hercules Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HTGM",
    "name": "HTG Molecular Diagnostics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HTGX",
    "name": "Hercules Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HTH",
    "name": "Hilltop Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HTHT",
    "name": "Huazhu Group Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HTLD",
    "name": "Heartland Express, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HTLF",
    "name": "Heartland Financial USA, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HTY",
    "name": "John Hancock Tax-Advantaged Global Shareholder Yield Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HTZ",
    "name": "Hertz Global Holdings, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HUBB",
    "name": "Hubbell Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HUBG",
    "name": "Hub Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HUBS",
    "name": "HubSpot, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HUD",
    "name": "Hudson Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HUM",
    "name": "Humana Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HUN",
    "name": "Huntsman Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HUNT",
    "name": "Hunter Maritime Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HUNTU",
    "name": "Hunter Maritime Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HUNTW",
    "name": "Hunter Maritime Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HURC",
    "name": "Hurco Companies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HURN",
    "name": "Huron Consulting Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HUSA",
    "name": "Houston American Energy Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "HUYA",
    "name": "HUYA Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HVBC",
    "name": "HV Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HVT",
    "name": "Haverty Furniture Companies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HVT.A",
    "name": "Haverty Furniture Companies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HWBK",
    "name": "Hawthorn Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HWC",
    "name": "Hancock Whitney Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HWCC",
    "name": "Houston Wire & Cable Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HWCPL",
    "name": "Hancock Whitney Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HWKN",
    "name": "Hawkins, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HX",
    "name": "Hexindai Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HXL",
    "name": "Hexcel Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HY",
    "name": "Hyster-Yale Materials Handling, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HYAC",
    "name": "Haymaker Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HYACU",
    "name": "Haymaker Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HYACW",
    "name": "Haymaker Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HYB",
    "name": "New America High Income Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HYGS",
    "name": "Hydrogenics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HYI",
    "name": "Western Asset High Yield Defined Opportunity Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HYLS",
    "name": "First Trust Exchange-Traded Fund IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HYND",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HYRE",
    "name": "HyreCar Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HYT",
    "name": "Blackrock Corporate High Yield Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HYXE",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HYZD",
    "name": "WisdomTree Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HZN",
    "name": "Horizon Global Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "HZNP",
    "name": "Horizon Pharma plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "HZO",
    "name": "MarineMax, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "I",
    "name": "Intelsat S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IAC",
    "name": "IAC/InterActiveCorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IAE",
    "name": "Voya Asia Pacific High Dividend Equity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IAF",
    "name": "Aberdeen Australia Equity Fund Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IAG",
    "name": "Iamgold Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IART",
    "name": "Integra LifeSciences Holdings Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IBA",
    "name": "Industrias Bachoco, S.A. de C.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IBB",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IBCP",
    "name": "Independent Bank Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IBIO",
    "name": "iBio, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IBKC",
    "name": "IBERIABANK Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IBKCO",
    "name": "IBERIABANK Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IBKCP",
    "name": "IBERIABANK Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IBM",
    "name": "International Business Machines Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IBN",
    "name": "ICICI Bank Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IBO",
    "name": "IBO (Listing Market - NYSE Amex Network B F)",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IBOC",
    "name": "International Bancshares Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IBP",
    "name": "Installed Building Products, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IBTX",
    "name": "Independent Bank Group, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IBUY",
    "name": "Amplify ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICAD",
    "name": "icad inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICBK",
    "name": "County Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICCC",
    "name": "ImmuCell Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICCH",
    "name": "ICC Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICD",
    "name": "Independence Contract Drilling, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ICE",
    "name": "Intercontinental Exchange Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ICFI",
    "name": "ICF International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICHR",
    "name": "Ichor Holdings",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICL",
    "name": "Israel Chemicals Shs",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ICLK",
    "name": "iClick Interactive Asia Group Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICLN",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICLR",
    "name": "ICON plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICON",
    "name": "Iconix Brand Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICPT",
    "name": "Intercept Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ICUI",
    "name": "ICU Medical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IDA",
    "name": "IDACORP, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IDCC",
    "name": "InterDigital, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IDE",
    "name": "Voya Infrastructure, Industrials and Materials Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IDEX",
    "name": "Ideanomics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IDLB",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IDN",
    "name": "Intellicheck, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IDRA",
    "name": "Idera Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IDSA",
    "name": "Industrial Services of America, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IDSY",
    "name": "I.D. Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IDT",
    "name": "IDT Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IDTI",
    "name": "Integrated Device Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IDXG",
    "name": "Interpace Diagnostics Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IDXX",
    "name": "IDEXX Laboratories, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IEA",
    "name": "Infrastructure and Energy Alternatives, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IEAWW",
    "name": "Infrastructure and Energy Alternatives, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IEC",
    "name": "IEC Electronics Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IEF",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IEI",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IEP",
    "name": "Icahn Enterprises L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IESC",
    "name": "IES Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IEUS",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IEX",
    "name": "IDEX Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IFEU",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IFF",
    "name": "International Flavors & Fragrances, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IFFT",
    "name": "International Flavors & Fragrances, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IFGL",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IFMK",
    "name": "iFresh Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IFN",
    "name": "India Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IFRX",
    "name": "InflaRx N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IFV",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IGA",
    "name": "Voya Global Advantage and Premium Opportunity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IGD",
    "name": "Voya Global Equity Dividend and Premium Opportunity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IGF",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IGI",
    "name": "Western Asset Investment Grade Defined Opportunity Trust Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IGIB",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IGLD",
    "name": "Internet Gold Golden Lines Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IGOV",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IGR",
    "name": "CBRE Clarion Global Real Estate Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IGSB",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IGT",
    "name": "International Game Technology",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IHC",
    "name": "Independence Holding Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IHD",
    "name": "Voya Emerging Markets High Income Dividend Equity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IHG",
    "name": "Intercontinental Hotels Group",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IHIT",
    "name": "Invesco High Income 2023 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IHT",
    "name": "InnSuites Hospitality Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IHTA",
    "name": "Invesco High Income 2024 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IID",
    "name": "Voya International High Dividend Equity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IIF",
    "name": "Morgan Stanley India Investment Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "III",
    "name": "Information Services Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IIIN",
    "name": "Insteel Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IIIV",
    "name": "i3 Verticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IIJI",
    "name": "Internet Initiative Japan, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IIM",
    "name": "Invesco Value Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IIN",
    "name": "IntriCon Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IIPR",
    "name": "Innovative Industrial Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IIPR^A",
    "name": "Innovative Industrial Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IIVI",
    "name": "II-VI Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IJT",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IKNX",
    "name": "Ikonics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ILMN",
    "name": "Illumina, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ILPT",
    "name": "Industrial Logistics Properties Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMAX",
    "name": "Imax Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IMDZ",
    "name": "Immune Design Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMGN",
    "name": "ImmunoGen, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMH",
    "name": "Impac Mortgage Holdings, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IMI",
    "name": "Intermolecular, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMKTA",
    "name": "Ingles Markets, Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMMP",
    "name": "Immutep Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMMR",
    "name": "Immersion Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMMU",
    "name": "Immunomedics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMMY",
    "name": "Imprimis Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMO",
    "name": "Imperial Oil Limited",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IMOS",
    "name": "ChipMOS TECHNOLOGIES INC.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMPV",
    "name": "Imperva, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMRN",
    "name": "Immuron Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMRNW",
    "name": "Immuron Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMTE",
    "name": "Integrated Media Technology Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMV",
    "name": "IMV Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IMXI",
    "name": "International Money Express, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INAP",
    "name": "Internap Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INB",
    "name": "Cohen & Steers Global Income Builder, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INBK",
    "name": "First Internet Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INBKL",
    "name": "First Internet Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INCY",
    "name": "Incyte Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INDB",
    "name": "Independent Bank Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INDU",
    "name": "Industrea Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INDUU",
    "name": "Industrea Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INDUW",
    "name": "Industrea Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INDY",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INF",
    "name": "Brookfield Global Listed Infrastructure Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INFI",
    "name": "Infinity Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INFN",
    "name": "Infinera Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INFO",
    "name": "IHS Markit Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INFR",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INFU",
    "name": "InfuSystems Holdings, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "INFY",
    "name": "Infosys Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ING",
    "name": "ING Group, N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INGN",
    "name": "Inogen, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INGR",
    "name": "Ingredion Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INN",
    "name": "Summit Hotel Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INN^D",
    "name": "Summit Hotel Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INN^E",
    "name": "Summit Hotel Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INNT",
    "name": "Innovate Biopharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INO",
    "name": "Inovio Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INOD",
    "name": "Innodata Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INOV",
    "name": "Inovalon Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INPX",
    "name": "Inpixon",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INS",
    "name": "Intelligent Systems Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "INSE",
    "name": "Inspired Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INSG",
    "name": "Inseego Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INSI",
    "name": "Insight Select Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INSM",
    "name": "Insmed, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INSP",
    "name": "Inspire Medical Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INST",
    "name": "Instructure, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INSW",
    "name": "International Seaways, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INSW^A",
    "name": "International Seaways, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INSY",
    "name": "Insys Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INT",
    "name": "World Fuel Services Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INTC",
    "name": "Intel Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INTG",
    "name": "The Intergroup Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INTL",
    "name": "INTL FCStone Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INTT",
    "name": "inTest Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "INTU",
    "name": "Intuit Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INTX",
    "name": "Intersections, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INUV",
    "name": "Inuvo, Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "INVA",
    "name": "Innoviva, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INVE",
    "name": "Identiv, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INVH",
    "name": "Invitation Homes Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "INWK",
    "name": "InnerWorkings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "INXN",
    "name": "InterXion Holding N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IO",
    "name": "Ion Geophysical Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IONS",
    "name": "Ionis Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IOR",
    "name": "Income Opportunity Realty Investors, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IOSP",
    "name": "Innospec Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IOTS",
    "name": "Adesto Technologies Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IOVA",
    "name": "Iovance Biotherapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IP",
    "name": "International Paper Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IPAR",
    "name": "Inter Parfums, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IPAS",
    "name": "iPass Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IPB",
    "name": "Merrill Lynch & Co., Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "IPCI",
    "name": "Intellipharmaceutics International Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IPDN",
    "name": "Professional Diversity Network, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IPG",
    "name": "Interpublic Group of Companies, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IPGP",
    "name": "IPG Photonics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IPHI",
    "name": "Inphi Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IPHS",
    "name": "Innophos Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IPI",
    "name": "Intrepid Potash, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IPIC",
    "name": "iPic Entertainment Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IPKW",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IPL^D",
    "name": "Interstate Power and Light Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IPOA",
    "name": "Social Capital Hedosophia Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IPOA.U",
    "name": "Social Capital Hedosophia Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IPOA.WS",
    "name": "Social Capital Hedosophia Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IPWR",
    "name": "Ideal Power Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IQ",
    "name": "iQIYI, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IQI",
    "name": "Invesco Quality Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IQV",
    "name": "IQVIA Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IR",
    "name": "Ingersoll-Rand plc (Ireland)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IRBT",
    "name": "iRobot Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IRCP",
    "name": "IRSA Propiedades Comerciales S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IRDM",
    "name": "Iridium Communications Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IRDMB",
    "name": "Iridium Communications Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IRET",
    "name": "Investors Real Estate Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IRET^C",
    "name": "Investors Real Estate Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IRIX",
    "name": "IRIDEX Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IRL",
    "name": "New Ireland Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IRM",
    "name": "Iron Mountain Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IRMD",
    "name": "iRadimed Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IROQ",
    "name": "IF Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IRR",
    "name": "Voya Natural Resources Equity Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IRS",
    "name": "IRSA Inversiones Y Representaciones S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IRT",
    "name": "Independence Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IRTC",
    "name": "iRhythm Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IRWD",
    "name": "Ironwood Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISBC",
    "name": "Investors Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISCA",
    "name": "International Speedway Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISD",
    "name": "PGIM Short Duration High Yield Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ISDR",
    "name": "Issuer Direct Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ISDS",
    "name": "Powershares Exchange-Traded Self-Indexed Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISDX",
    "name": "Powershares Exchange-Traded Self-Indexed Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISEM",
    "name": "Powershares Exchange-Traded Self-Indexed Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISF",
    "name": "ING Group, N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ISG",
    "name": "ING Group, N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ISHG",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISIG",
    "name": "Insignia Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISNS",
    "name": "Image Sensing Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISR",
    "name": "IsoRay, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ISRG",
    "name": "Intuitive Surgical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISRL",
    "name": "Isramco, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISSC",
    "name": "Innovative Solutions and Support, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISTB",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ISTR",
    "name": "Investar Holding Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IT",
    "name": "Gartner, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ITCB",
    "name": "Ita? CorpBanca",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ITCI",
    "name": "Intra-Cellular Therapies Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ITEQ",
    "name": "BlueStar Israel Technology ETF",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ITG",
    "name": "Investment Technology Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ITGR",
    "name": "Integer Holdings Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ITI",
    "name": "Iteris, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ITIC",
    "name": "Investors Title Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ITP",
    "name": "IT Tech Packaging, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ITRI",
    "name": "Itron, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ITRM",
    "name": "Iterum Therapeutics plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ITRN",
    "name": "Ituran Location and Control Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ITT",
    "name": "ITT Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ITUB",
    "name": "Itau Unibanco Banco Holding SA",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ITW",
    "name": "Illinois Tool Works Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IUS",
    "name": "Powershares Exchange-Traded Self-Indexed Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IUSB",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IUSG",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IUSS",
    "name": "Powershares Exchange-Traded Self-Indexed Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IUSV",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IVAC",
    "name": "Intevac, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IVC",
    "name": "Invacare Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IVENC",
    "name": "Ivy NextShares",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IVFGC",
    "name": "Ivy NextShares",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IVFVC",
    "name": "Ivy NextShares",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IVH",
    "name": "Ivy High Income Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IVR",
    "name": "INVESCO MORTGAGE CAPITAL INC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IVR^A",
    "name": "Invesco Mortgage Capital Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IVR^B",
    "name": "INVESCO MORTGAGE CAPITAL INC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IVR^C",
    "name": "INVESCO MORTGAGE CAPITAL INC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IVZ",
    "name": "Invesco Plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IX",
    "name": "Orix Corp Ads",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "IXUS",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "IZEA",
    "name": "IZEA Worldwide, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JACK",
    "name": "Jack In The Box Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JAG",
    "name": "Jagged Peak Energy Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JAGX",
    "name": "Jaguar Health, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JAKK",
    "name": "JAKKS Pacific, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JASN",
    "name": "Jason Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JASNW",
    "name": "Jason Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JAX",
    "name": "J. Alexander&#39;s Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JAZZ",
    "name": "Jazz Pharmaceuticals plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JBGS",
    "name": "JBG SMITH Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JBHT",
    "name": "J.B. Hunt Transport Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JBK",
    "name": "Lehman ABS Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JBL",
    "name": "Jabil Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JBLU",
    "name": "JetBlue Airways Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JBN",
    "name": "Select Asset Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JBR",
    "name": "Select Asset Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JBSS",
    "name": "John B. Sanfilippo & Son, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JBT",
    "name": "John Bean Technologies Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JCAP",
    "name": "Jernigan Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JCAP^B",
    "name": "Jernigan Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JCE",
    "name": "Nuveen Core Equity Alpha Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JCI",
    "name": "Johnson Controls International plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JCO",
    "name": "Nuveen Credit Opportunities 2022 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JCOM",
    "name": "j2 Global, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JCP",
    "name": "J.C. Penney Company, Inc. Holding Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JCS",
    "name": "Communications Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JCTCF",
    "name": "Jewett-Cameron Trading Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JD",
    "name": "JD.com, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JDD",
    "name": "Nuveen Diversified Dividend and Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JE",
    "name": "Just Energy Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JE^A",
    "name": "Just Energy Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JEC",
    "name": "Jacobs Engineering Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JEF",
    "name": "Jefferies Financial Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JELD",
    "name": "JELD-WEN Holding, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JEMD",
    "name": "Nuveen Emerging Markets Debt 2022 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JEQ",
    "name": "Aberdeen Japan Equity Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JFR",
    "name": "Nuveen Floating Rate Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JG",
    "name": "Aurora Mobile Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JGH",
    "name": "Nuveen Global High Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JHB",
    "name": "Nuveen High Income November 2021 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JHD",
    "name": "Nuveen High Income December 2019 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JHG",
    "name": "Janus Henderson Group plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JHI",
    "name": "John Hancock Investors Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JHS",
    "name": "John Hancock Income Securities Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JHX",
    "name": "James Hardie Industries plc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JHY",
    "name": "Nuveen High Income 2020 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JILL",
    "name": "J. Jill, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JJSF",
    "name": "J & J Snack Foods Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JKHY",
    "name": "Jack Henry & Associates, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JKI",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JKS",
    "name": "JinkoSolar Holding Company Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JLL",
    "name": "Jones Lang LaSalle Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JLS",
    "name": "Nuveen Mortgage Opportunity Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JMEI",
    "name": "Jumei International Holding Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JMF",
    "name": "Nuveen Energy MLP Total Return Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JMLP",
    "name": "Nuveen All Cap Energy MLP Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JMM",
    "name": "Nuveen Multi-Market Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JMP",
    "name": "JMP Group LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JMPB",
    "name": "JMP Group LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JMPD",
    "name": "JMP Group LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JMT",
    "name": "Nuven Mortgage Opportunity Term Fund 2",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JMU",
    "name": "JMU Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JNCE",
    "name": "Jounce Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JNJ",
    "name": "Johnson & Johnson",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JNPR",
    "name": "Juniper Networks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JOB",
    "name": "GEE Group Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "JOBS",
    "name": "51job, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JOE",
    "name": "St. Joe Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JOF",
    "name": "Japan Smaller Capitalization Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JOUT",
    "name": "Johnson Outdoors Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JP",
    "name": "Jupai Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPC",
    "name": "Nuveen Preferred & Income Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPI",
    "name": "Nuveen Preferred and Income Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPM",
    "name": "J P Morgan Chase & Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPM^A",
    "name": "J P Morgan Chase & Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPM^B",
    "name": "J P Morgan Chase & Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPM^D",
    "name": "J P Morgan Chase & Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPM^E",
    "name": "J P Morgan Chase & Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPM^F",
    "name": "J P Morgan Chase & Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPM^G",
    "name": "J P Morgan Chase & Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPM^H",
    "name": "J P Morgan Chase & Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPS",
    "name": "Nuveen Preferred & Income Securities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JPT",
    "name": "Nuveen Preferred and Income 2022 Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JQC",
    "name": "Nuveen Credit Strategies Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JRI",
    "name": "Nuveen Real Asset Income and Growth Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JRJC",
    "name": "China Finance Online Co. Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JRO",
    "name": "Nuveen Floating Rate Income Opportuntiy Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JRS",
    "name": "Nuveen Real Estate Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JRSH",
    "name": "Jerash Holdings (US), Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JRVR",
    "name": "James River Group Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JSD",
    "name": "Nuveen Short Duration Credit Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JSM",
    "name": "Navient Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JSMD",
    "name": "Janus Detroit Street Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JSML",
    "name": "Janus Detroit Street Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JSYN",
    "name": "Jensyn Acquistion Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JSYNR",
    "name": "Jensyn Acquistion Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JSYNU",
    "name": "Jensyn Acquistion Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JSYNW",
    "name": "Jensyn Acquistion Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JT",
    "name": "Jianpu Technology Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JTA",
    "name": "Nuveen Tax-Advantaged Total Return Strategy Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JTD",
    "name": "Nuveen Tax-Advantaged Dividend Growth Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JTPY",
    "name": "JetPay Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JVA",
    "name": "Coffee Holding Co., Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "JW.A",
    "name": "John Wiley & Sons, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JW.B",
    "name": "John Wiley & Sons, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JWN",
    "name": "Nordstrom, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "JYNT",
    "name": "The Joint Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "K",
    "name": "Kellogg Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KAI",
    "name": "Kadant Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KALA",
    "name": "Kala Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KALU",
    "name": "Kaiser Aluminum Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KALV",
    "name": "KalVista Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KAMN",
    "name": "Kaman Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KANG",
    "name": "iKang Healthcare Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KAR",
    "name": "KAR Auction Services, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KB",
    "name": "KB Financial Group Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KBAL",
    "name": "Kimball International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBH",
    "name": "KB Home",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KBLM",
    "name": "KBL Merger Corp. IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBLMR",
    "name": "KBL Merger Corp. IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBLMU",
    "name": "KBL Merger Corp. IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBLMW",
    "name": "KBL Merger Corp. IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBR",
    "name": "KBR, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KBSF",
    "name": "KBS Fashion Group Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBWB",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBWD",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBWP",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBWR",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KBWY",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KCAP",
    "name": "KCAP Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KCAPL",
    "name": "KCAP Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KDMN",
    "name": "Kadmon Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KDP",
    "name": "Keurig Dr Pepper Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KE",
    "name": "Kimball Electronics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KEG",
    "name": "Key Energy Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KELYA",
    "name": "Kelly Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KELYB",
    "name": "Kelly Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KEM",
    "name": "Kemet Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KEN",
    "name": "Kenon Holdings Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KEP",
    "name": "Korea Electric Power Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KEQU",
    "name": "Kewaunee Scientific Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KERX",
    "name": "Keryx Biopharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KEX",
    "name": "Kirby Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KEY",
    "name": "KeyCorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KEY^I",
    "name": "KeyCorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KEY^J",
    "name": "KeyCorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KEYS",
    "name": "Keysight Technologies Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KEYW",
    "name": "The KEYW Holding Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KF",
    "name": "Korea Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KFFB",
    "name": "Kentucky First Federal Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KFRC",
    "name": "Kforce, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KFS",
    "name": "Kingsway Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KFY",
    "name": "Korn/Ferry International",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KGC",
    "name": "Kinross Gold Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KGJI",
    "name": "Kingold Jewelry Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KHC",
    "name": "The Kraft Heinz Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KIDS",
    "name": "OrthoPediatrics Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KIM",
    "name": "Kimco Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KIM^I",
    "name": "Kimco Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KIM^J",
    "name": "Kimco Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KIM^K",
    "name": "Kimco Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KIM^L",
    "name": "Kimco Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KIM^M",
    "name": "Kimco Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KIN",
    "name": "Kindred Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KINS",
    "name": "Kingstone Companies, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KIO",
    "name": "KKR Income Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KIQ",
    "name": "Kelso Technologies Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "KIRK",
    "name": "Kirkland&#39;s, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KKR",
    "name": "KKR & Co. Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KKR^A",
    "name": "KKR & Co. Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KKR^B",
    "name": "KKR & Co. Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KL",
    "name": "Kirkland Lake Gold Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KLAC",
    "name": "KLA-Tencor Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KLIC",
    "name": "Kulicke and Soffa Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KLXE",
    "name": "KLX Energy Services Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KMB",
    "name": "Kimberly-Clark Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KMDA",
    "name": "Kamada Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KMF",
    "name": "Kayne Anderson Midstream Energy Fund, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KMI",
    "name": "Kinder Morgan, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KMPA",
    "name": "Kemper Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KMPH",
    "name": "KemPharm, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KMPR",
    "name": "Kemper Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KMT",
    "name": "Kennametal Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KMX",
    "name": "CarMax Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KN",
    "name": "Knowles Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KNDI",
    "name": "Kandi Technologies Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KNL",
    "name": "Knoll, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KNOP",
    "name": "KNOT Offshore Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KNSA",
    "name": "Kiniksa Pharmaceuticals, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KNSL",
    "name": "Kinsale Capital Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KNX",
    "name": "Knight Transportation, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KO",
    "name": "Coca-Cola Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KOD",
    "name": "Kodiak Sciences Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KODK",
    "name": "Eastman Kodak Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KOF",
    "name": "Coca Cola Femsa S.A.B. de C.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KONA",
    "name": "Kona Grill, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KOOL",
    "name": "Cesca Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KOP",
    "name": "Koppers Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KOPN",
    "name": "Kopin Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KORS",
    "name": "Michael Kors Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KOS",
    "name": "Kosmos Energy Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KOSS",
    "name": "Koss Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KPFS",
    "name": "Pepper Food Service Co., Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KPTI",
    "name": "Karyopharm Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KR",
    "name": "Kroger Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KRA",
    "name": "Kraton Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KRC",
    "name": "Kilroy Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KREF",
    "name": "KKR Real Estate Finance Trust Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KRG",
    "name": "Kite Realty Group Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KRMA",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KRNT",
    "name": "Kornit Digital Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KRNY",
    "name": "Kearny Financial",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KRO",
    "name": "Kronos Worldwide Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KRP",
    "name": "Kimbell Royalty Partners",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KRYS",
    "name": "Krystal Biotech, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KSM",
    "name": "Scudder Strategic Municiple Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KSS",
    "name": "Kohl&#39;s Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KSU",
    "name": "Kansas City Southern",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KSU^",
    "name": "Kansas City Southern",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KT",
    "name": "KT Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KTCC",
    "name": "Key Tronic Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KTF",
    "name": "Scudder Municiple Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KTH",
    "name": "Lehman ABS Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KTN",
    "name": "Lehman ABS Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KTOS",
    "name": "Kratos Defense & Security Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KTOV",
    "name": "Kitov Pharma Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KTOVW",
    "name": "Kitov Pharma Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KTP",
    "name": "Lehman ABS Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KURA",
    "name": "Kura Oncology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KVHI",
    "name": "KVH Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KW",
    "name": "Kennedy-Wilson Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KWEB",
    "name": "KraneShares Trust KraneShares CSI China Internet ETF",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KWR",
    "name": "Quaker Chemical Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KYN",
    "name": "Kayne Anderson MLP/Midstream Investment Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KYN^F",
    "name": "Kayne Anderson MLP/Midstream Investment Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "KZIA",
    "name": "Kazia Therapeutics Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "KZR",
    "name": "Kezar Life Sciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "L",
    "name": "Loews Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LABL",
    "name": "Multi-Color Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LAC",
    "name": "Lithium Americas Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LACQ",
    "name": "Leisure Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LACQU",
    "name": "Leisure Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LACQW",
    "name": "Leisure Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LAD",
    "name": "Lithia Motors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LADR",
    "name": "Ladder Capital Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LAIX",
    "name": "LAIX Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LAKE",
    "name": "Lakeland Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LALT",
    "name": "Invesco Actively Managed Exchange-Traded Fund Trus",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LAMR",
    "name": "Lamar Advertising Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LANC",
    "name": "Lancaster Colony Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LAND",
    "name": "Gladstone Land Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LANDP",
    "name": "Gladstone Land Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LARK",
    "name": "Landmark Bancorp Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LASR",
    "name": "nLIGHT, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LAUR",
    "name": "Laureate Education, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LAWS",
    "name": "Lawson Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LAZ",
    "name": "Lazard Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LAZY",
    "name": "Lazydays Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LB",
    "name": "L Brands, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LBAI",
    "name": "Lakeland Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LBC",
    "name": "Luther Burbank Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LBRDA",
    "name": "Liberty Broadband Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LBRDK",
    "name": "Liberty Broadband Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LBRT",
    "name": "Liberty Oilfield Services Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LBTYA",
    "name": "Liberty Global plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LBTYB",
    "name": "Liberty Global plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LBTYK",
    "name": "Liberty Global plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LBY",
    "name": "Libbey, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LC",
    "name": "LendingClub Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LCI",
    "name": "Lannett Co Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LCII",
    "name": "LCI Industries",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LCNB",
    "name": "LCNB Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LCUT",
    "name": "Lifetime Brands, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LDL",
    "name": "Lydall, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LDOS",
    "name": "Leidos Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LDP",
    "name": "Cohen & Steers Limited Duration Preferred and Income Fund, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LDRI",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LE",
    "name": "Lands&#39; End, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LEA",
    "name": "Lear Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LEAF",
    "name": "Leaf Group Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LECO",
    "name": "Lincoln Electric Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LEDS",
    "name": "SemiLEDS Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LEE",
    "name": "Lee Enterprises, Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LEG",
    "name": "Leggett & Platt, Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LEGR",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LEJU",
    "name": "Leju Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LEN",
    "name": "Lennar Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LEN.B",
    "name": "Lennar Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LENS",
    "name": "Presbia PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LEO",
    "name": "Dreyfus Strategic Municipals, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LEU",
    "name": "Centrus Energy Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LEVB",
    "name": "Level Brands, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LEVL",
    "name": "Level One Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LEXEA",
    "name": "Liberty Expedia Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LEXEB",
    "name": "Liberty Expedia Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LFAC",
    "name": "LF Capital Acquistion Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LFACU",
    "name": "LF Capital Acquistion Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LFACW",
    "name": "LF Capital Acquistion Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LFC",
    "name": "China Life Insurance Company Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LFUS",
    "name": "Littelfuse, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LFVN",
    "name": "Lifevantage Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LGC",
    "name": "Legacy Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LGC.U",
    "name": "Legacy Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LGC.WS",
    "name": "Legacy Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LGCY",
    "name": "Legacy Reserves Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LGF.A",
    "name": "Lions Gate Entertainment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LGF.B",
    "name": "Lions Gate Entertainment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LGI",
    "name": "Lazard Global Total Return and Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LGIH",
    "name": "LGI Homes, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LGL",
    "name": "LGL Group, Inc. (The)",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LGND",
    "name": "Ligand Pharmaceuticals Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LH",
    "name": "Laboratory Corporation of America Holdings",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LHC",
    "name": "Leo Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LHCG",
    "name": "LHC Group",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LHC.U",
    "name": "Leo Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LHC.WS",
    "name": "Leo Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LHO",
    "name": "LaSalle Hotel Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LHO^I",
    "name": "LaSalle Hotel Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LHO^J",
    "name": "LaSalle Hotel Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LIFE",
    "name": "aTyr Pharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LII",
    "name": "Lennox International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LILA",
    "name": "Liberty Latin America Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LILAK",
    "name": "Liberty Latin America Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LIN",
    "name": "Linde plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LINC",
    "name": "Lincoln Educational Services Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LIND",
    "name": "Lindblad Expeditions Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LINDW",
    "name": "Lindblad Expeditions Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LINK",
    "name": "Interlink Electronics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LION",
    "name": "Fidelity Southern Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LIQT",
    "name": "LiqTech International, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LITB",
    "name": "LightInTheBox Holding Co., Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LITE",
    "name": "Lumentum Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LIVE",
    "name": "Live Ventures Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LIVN",
    "name": "LivaNova PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LIVX",
    "name": "LiveXLive Media, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LJPC",
    "name": "La Jolla Pharmaceutical Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LKFN",
    "name": "Lakeland Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LKM",
    "name": "Link Motion Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LKOR",
    "name": "FlexShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LKQ",
    "name": "LKQ Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LKSD",
    "name": "LSC Communications, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LL",
    "name": "Lumber Liquidators Holdings, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LLEX",
    "name": "Lilis Energy, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LLEX",
    "name": "Lilis Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LLIT",
    "name": "Lianluo Smart Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LLL",
    "name": "L3 Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LLNW",
    "name": "Limelight Networks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LLY",
    "name": "Eli Lilly and Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LM",
    "name": "Legg Mason, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LMAT",
    "name": "LeMaitre Vascular, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMB",
    "name": "Limbach Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMBS",
    "name": "First Trust Exchange-Traded Fund IV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMFA",
    "name": "LM Funding America, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMFAW",
    "name": "LM Funding America, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMHA",
    "name": "Legg Mason, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LMHB",
    "name": "Legg Mason, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LMNR",
    "name": "Limoneira Co",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMNX",
    "name": "Luminex Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMRK",
    "name": "Landmark Infrastructure Partners LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMRKN",
    "name": "Landmark Infrastructure Partners LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMRKO",
    "name": "Landmark Infrastructure Partners LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMRKP",
    "name": "Landmark Infrastructure Partners LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMST",
    "name": "Limestone Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LMT",
    "name": "Lockheed Martin Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LN",
    "name": "LINE Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LNC",
    "name": "Lincoln National Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LNC.WS",
    "name": "Lincoln National Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LND",
    "name": "Brasilagro Cia Brasileira De Propriedades Agricolas",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LNDC",
    "name": "Landec Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LNG",
    "name": "Cheniere Energy, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LNGR",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LNN",
    "name": "Lindsay Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LNT",
    "name": "Alliant Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LNTH",
    "name": "Lantheus Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOAC",
    "name": "Longevity Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOACR",
    "name": "Longevity Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOACU",
    "name": "Longevity Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOACW",
    "name": "Longevity Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOAN",
    "name": "Manhattan Bridge Capital, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOB",
    "name": "Live Oak Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOCO",
    "name": "El Pollo Loco Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LODE",
    "name": "Comstock Mining, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LOGC",
    "name": "LogicBio Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOGI",
    "name": "Logitech International S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOGM",
    "name": "LogMein, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOMA",
    "name": "Loma Negra Compania Industrial Argentina Sociedad Anonima",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LONE",
    "name": "Lonestar Resources US Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOOP",
    "name": "Loop Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOPE",
    "name": "Grand Canyon Education, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOR",
    "name": "Lazard World Dividend & Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LORL",
    "name": "Loral Space and Communications, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOV",
    "name": "Spark Networks, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LOVE",
    "name": "The Lovesac Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LOW",
    "name": "Lowe&#39;s Companies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LOXO",
    "name": "Loxo Oncology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LPCN",
    "name": "Lipocine Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LPG",
    "name": "Dorian LPG Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LPI",
    "name": "Laredo Petroleum, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LPL",
    "name": "LG Display Co., Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LPLA",
    "name": "LPL Financial Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LPSN",
    "name": "LivePerson, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LPT",
    "name": "Liberty Property Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LPTH",
    "name": "LightPath Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LPTX",
    "name": "LEAP THERAPEUTICS, INC.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LPX",
    "name": "Louisiana-Pacific Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LQDA",
    "name": "Liquidia Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LQDT",
    "name": "Liquidity Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LRAD",
    "name": "LRAD Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LRCX",
    "name": "Lam Research Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LRGE",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LRN",
    "name": "K12 Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LSBK",
    "name": "Lake Shore Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LSCC",
    "name": "Lattice Semiconductor Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LSI",
    "name": "Life Storage, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LSTR",
    "name": "Landstar System, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LSXMA",
    "name": "Liberty Media Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LSXMB",
    "name": "Liberty Media Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LSXMK",
    "name": "Liberty Media Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LTBR",
    "name": "Lightbridge Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LTC",
    "name": "LTC Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LTHM",
    "name": "Livent Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LTM",
    "name": "LATAM Airlines Group S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LTN",
    "name": "Union Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LTN~",
    "name": "Union Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LTN.U",
    "name": "Union Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LTN.WS",
    "name": "Union Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LTRPA",
    "name": "Liberty TripAdvisor Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LTRPB",
    "name": "Liberty TripAdvisor Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LTRX",
    "name": "Lantronix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LTS",
    "name": "Ladenburg Thalmann Financial Services Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LTS^A",
    "name": "Ladenburg Thalmann Financial Services Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LTSF",
    "name": "Ladenburg Thalmann Financial Services Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LTSK",
    "name": "Ladenburg Thalmann Financial Services Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LTSL",
    "name": "Ladenburg Thalmann Financial Services Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "LTXB",
    "name": "LegacyTexas Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LUB",
    "name": "Luby&#39;s, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LULU",
    "name": "lululemon athletica inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LUNA",
    "name": "Luna Innovations Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LUV",
    "name": "Southwest Airlines Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LVHD",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LVS",
    "name": "Las Vegas Sands Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LW",
    "name": "Lamb Weston Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LWAY",
    "name": "Lifeway Foods, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LX",
    "name": "LexinFintech Holdings Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LXFR",
    "name": "Luxfer Holdings PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LXFT",
    "name": "Luxoft Holding, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LXP",
    "name": "Lexington Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LXP^C",
    "name": "Lexington Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LXRX",
    "name": "Lexicon Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LXU",
    "name": "Lsb Industries Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LYB",
    "name": "LyondellBasell Industries NV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LYG",
    "name": "Lloyds Banking Group Plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LYL",
    "name": "Dragon Victory International Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LYTS",
    "name": "LSI Industries Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "LYV",
    "name": "Live Nation Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "LZB",
    "name": "La-Z-Boy Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "M",
    "name": "Macy&#39;s Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MA",
    "name": "Mastercard Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MAA",
    "name": "Mid-America Apartment Communities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MAA^I",
    "name": "Mid-America Apartment Communities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MAB",
    "name": "Eaton Vance Massachusetts Municipal Bond Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MAC",
    "name": "Macerich Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MACK",
    "name": "Merrimack Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MAG",
    "name": "MAG Silver Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MAGS",
    "name": "Magal Security Systems Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MAIN",
    "name": "Main Street Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MAMS",
    "name": "MAM Software Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MAN",
    "name": "ManpowerGroup",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MANH",
    "name": "Manhattan Associates, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MANT",
    "name": "ManTech International Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MANU",
    "name": "Manchester United Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MAR",
    "name": "Marriott International",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MARA",
    "name": "Marathon Patent Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MARK",
    "name": "Remark Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MARPS",
    "name": "Marine Petroleum Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MAS",
    "name": "Masco Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MASI",
    "name": "Masimo Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MAT",
    "name": "Mattel, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MATW",
    "name": "Matthews International Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MATX",
    "name": "Matson, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MAV",
    "name": "Pioneer Municipal High Income Advantage Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MAXR",
    "name": "Maxar Technologies Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MAYS",
    "name": "J. W. Mays, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MB",
    "name": "MINDBODY, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBB",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBCN",
    "name": "Middlefield Banc Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBFI",
    "name": "MB Financial Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBFIO",
    "name": "MB Financial Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBI",
    "name": "MBIA, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MBII",
    "name": "Marrone Bio Innovations, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBIN",
    "name": "Merchants Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBIO",
    "name": "Mustang Bio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBOT",
    "name": "Microbot Medical Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBRX",
    "name": "Moleculin Biotech, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBSD",
    "name": "FlexShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBT",
    "name": "Mobile TeleSystems OJSC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MBTF",
    "name": "M B T Financial Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBUU",
    "name": "Malibu Boats, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MBWM",
    "name": "Mercantile Bank Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MC",
    "name": "Moelis & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCA",
    "name": "Blackrock MuniYield California Insured Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCB",
    "name": "Metropolitan Bank Holding Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCBC",
    "name": "Macatawa Bank Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MCC",
    "name": "Medley Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCD",
    "name": "McDonald&#39;s Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCEF",
    "name": "First Trust Exchange-Traded Fund VIII",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MCEP",
    "name": "Mid-Con Energy Partners, LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MCF",
    "name": "Contango Oil & Gas Company",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MCFT",
    "name": "MasterCraft Boat Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MCHI",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MCHP",
    "name": "Microchip Technology Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MCHX",
    "name": "Marchex, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MCI",
    "name": "Barings Corporate Investors",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCK",
    "name": "McKesson Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCN",
    "name": "Madison Covered Call & Equity Strategy Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCO",
    "name": "Moody&#39;s Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCR",
    "name": "MFS Charter Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCRB",
    "name": "Seres Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MCRI",
    "name": "Monarch Casino & Resort, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MCRN",
    "name": "Milacron Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCS",
    "name": "Marcus Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCV",
    "name": "Medley Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCX",
    "name": "Medley Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MCY",
    "name": "Mercury General Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MD",
    "name": "Mednax, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MDB",
    "name": "MongoDB, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDC",
    "name": "M.D.C. Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MDCA",
    "name": "MDC Partners Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDCO",
    "name": "The Medicines Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDGL",
    "name": "Madrigal Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDGS",
    "name": "Medigus Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDGSW",
    "name": "Medigus Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDIV",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDLQ",
    "name": "Medley LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MDLX",
    "name": "Medley LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MDLY",
    "name": "Medley Management Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MDLZ",
    "name": "Mondelez International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDP",
    "name": "Meredith Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MDR",
    "name": "McDermott International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MDRR",
    "name": "Medalist Diversified REIT, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDRX",
    "name": "Allscripts Healthcare Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDSO",
    "name": "Medidata Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MDT",
    "name": "Medtronic plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MDU",
    "name": "MDU Resources Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MDWD",
    "name": "MediWound Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MED",
    "name": "MEDIFAST INC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MEDP",
    "name": "Medpace Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MEET",
    "name": "The Meet Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MEI",
    "name": "Methode Electronics, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MEIP",
    "name": "MEI Pharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MELI",
    "name": "MercadoLibre, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MELR",
    "name": "Melrose Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MEN",
    "name": "Blackrock MuniEnhanced Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MEOH",
    "name": "Methanex Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MERC",
    "name": "Mercer International Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MER^K",
    "name": "Merrill Lynch & Co., Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MESA",
    "name": "Mesa Air Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MESO",
    "name": "Mesoblast Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MET",
    "name": "MetLife, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MET^A",
    "name": "MetLife, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "METC",
    "name": "Ramaco Resources, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MET^E",
    "name": "MetLife, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFA",
    "name": "MFA Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFA^B",
    "name": "MFA Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFAC",
    "name": "Megalith Financial Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFAC.U",
    "name": "Megalith Financial Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFAC.WS",
    "name": "Megalith Financial Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFC",
    "name": "Manulife Financial Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFCB",
    "name": "MFC Bancorp Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFD",
    "name": "Macquarie First Trust Global",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFG",
    "name": "Mizuho Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFGP",
    "name": "Micro Focus Intl PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFIN",
    "name": "Medallion Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MFINL",
    "name": "Medallion Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MFL",
    "name": "Blackrock MuniHoldings Investment Quality Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFM",
    "name": "MFS Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFNC",
    "name": "Mackinac Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MFO",
    "name": "MFA Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFSF",
    "name": "MutualFirst Financial Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MFT",
    "name": "Blackrock MuniYield Investment QualityFund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MFV",
    "name": "MFS Special Value Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MG",
    "name": "Mistras Group Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MGA",
    "name": "Magna International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MGEE",
    "name": "MGE Energy Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGEN",
    "name": "Miragen Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGF",
    "name": "MFS Government Markets Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MGI",
    "name": "Moneygram International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGIC",
    "name": "Magic Software Enterprises Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGLN",
    "name": "Magellan Health, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGM",
    "name": "MGM Resorts International",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MGNX",
    "name": "MacroGenics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGP",
    "name": "MGM Growth Properties LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MGPI",
    "name": "MGP Ingredients, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGRC",
    "name": "McGrath RentCorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGTA",
    "name": "Magenta Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGTX",
    "name": "MeiraGTx Holdings plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGU",
    "name": "Macquarie Global Infrastructure Total Return Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MGY",
    "name": "Magnolia Oil & Gas Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MGYR",
    "name": "Magyar Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MGY.WS",
    "name": "Magnolia Oil & Gas Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MH^A",
    "name": "Maiden Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MH^C",
    "name": "Maiden Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MHD",
    "name": "Blackrock MuniHoldings Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MH^D",
    "name": "Maiden Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MHE",
    "name": "BlackRock Massachusetts Tax-Exempt Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MHF",
    "name": "Western Asset Municipal High Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MHH",
    "name": "Mastech Digital, Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MHI",
    "name": "Pioneer Municipal High Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MHK",
    "name": "Mohawk Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MHLA",
    "name": "Maiden Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MHLD",
    "name": "Maiden Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MHN",
    "name": "Blackrock MuniHoldings New York Quality Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MHNC",
    "name": "Maiden Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MHO",
    "name": "M/I Homes, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MIC",
    "name": "Macquarie Infrastructure Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MICR",
    "name": "Micron Solutions, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MICT",
    "name": "MICT, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MIDD",
    "name": "The Middleby Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MIE",
    "name": "Cohen & Steers MLP Income and Energy Opportunity Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MIK",
    "name": "The Michaels Companies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MILN",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MIME",
    "name": "Mimecast Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MIN",
    "name": "MFS Intermediate Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MIND",
    "name": "Mitcham Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MINDP",
    "name": "Mitcham Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MINI",
    "name": "Mobile Mini, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MITK",
    "name": "Mitek Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MITL",
    "name": "Mitel Networks Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MITT",
    "name": "AG Mortgage Investment Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MITT^A",
    "name": "AG Mortgage Investment Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MITT^B",
    "name": "AG Mortgage Investment Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MIW",
    "name": "Eaton Vance Michigan Municipal Bond Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MIXT",
    "name": "MiX Telematics Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MIY",
    "name": "Blackrock MuniYield Michigan Quality Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MJCO",
    "name": "Majesco",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MKC",
    "name": "McCormick & Company, Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MKC.V",
    "name": "McCormick & Company, Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MKGI",
    "name": "Monaker Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MKL",
    "name": "Markel Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MKSI",
    "name": "MKS Instruments, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MKTX",
    "name": "MarketAxess Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MLAB",
    "name": "Mesa Laboratories, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MLCO",
    "name": "Melco Resorts & Entertainment Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MLHR",
    "name": "Herman Miller, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MLI",
    "name": "Mueller Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MLM",
    "name": "Martin Marietta Materials, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MLNT",
    "name": "Melinta Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MLNX",
    "name": "Mellanox Technologies, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MLP",
    "name": "Maui Land & Pineapple Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MLR",
    "name": "Miller Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MLSS",
    "name": "Milestone Scientific, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MLVF",
    "name": "Malvern Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MMAC",
    "name": "MMA Capital Management, LLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MMC",
    "name": "Marsh & McLennan Companies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MMD",
    "name": "MainStay MacKay DefinedTerm Municipal Opportunitie",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MMDM",
    "name": "Modern Media Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MMDMR",
    "name": "Modern Media Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MMDMU",
    "name": "Modern Media Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MMDMW",
    "name": "Modern Media Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MMI",
    "name": "Marcus & Millichap, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MMLP",
    "name": "Martin Midstream Partners L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MMM",
    "name": "3M Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MMP",
    "name": "Magellan Midstream Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MMS",
    "name": "Maximus, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MMSI",
    "name": "Merit Medical Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MMT",
    "name": "MFS Multimarket Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MMU",
    "name": "Western Asset Managed Municipals Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MMV",
    "name": "Eaton Vance Massachusetts Municipal Income Trust",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MMYT",
    "name": "MakeMyTrip Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MN",
    "name": "Manning & Napier, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MNDO",
    "name": "MIND C.T.I. Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MNE",
    "name": "Blackrock Muni New York Intermediate Duration Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MNGA",
    "name": "MagneGas Applied Technology Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MNI",
    "name": "McClatchy Company (The)",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MNK",
    "name": "Mallinckrodt plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MNKD",
    "name": "MannKind Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MNLO",
    "name": "Menlo Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MNOV",
    "name": "MediciNova, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MNP",
    "name": "Western Asset Municipal Partners Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MNR",
    "name": "Monmouth Real Estate Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MNR^C",
    "name": "Monmouth Real Estate Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MNRO",
    "name": "Monro, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MNST",
    "name": "Monster Beverage Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MNTA",
    "name": "Momenta Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MNTX",
    "name": "Manitex International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MO",
    "name": "Altria Group",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOBL",
    "name": "MobileIron, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MOC",
    "name": "Command Security Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MOD",
    "name": "Modine Manufacturing Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MODN",
    "name": "Model N, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOFG",
    "name": "MidWestOne Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MOG.A",
    "name": "Moog Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOG.B",
    "name": "Moog Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOGLC",
    "name": "Gabelli NextShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MOGO",
    "name": "Mogo Finance Technology Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MOH",
    "name": "Molina Healthcare Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOMO",
    "name": "Momo Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MOR",
    "name": "MorphoSys AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MORN",
    "name": "Morningstar, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MOS",
    "name": "Mosaic Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOSC",
    "name": "Mosaic Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOSC.U",
    "name": "Mosaic Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOSC.WS",
    "name": "Mosaic Acquisition Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOSY",
    "name": "MoSys, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MOTS",
    "name": "Motus GI Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MOV",
    "name": "Movado Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MOXC",
    "name": "Moxian, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MPA",
    "name": "Blackrock MuniYield Pennsylvania Quality Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MPAA",
    "name": "Motorcar Parts of America, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MPB",
    "name": "Mid Penn Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MPC",
    "name": "Marathon Petroleum Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MPLX",
    "name": "MPLX LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MPO",
    "name": "MIDSTATES PETROLEUM COMPANY, INC.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MPV",
    "name": "Barings Participation Investors",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MPVD",
    "name": "Mountain Province Diamonds Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MPW",
    "name": "Medical Properties Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MPWR",
    "name": "Monolithic Power Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MPX",
    "name": "Marine Products Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MQT",
    "name": "Blackrock MuniYield Quality Fund II, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MQY",
    "name": "Blackrock MuniYield Quality Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MRAM",
    "name": "Everspin Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRBK",
    "name": "Meridian Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRC",
    "name": "MRC Global Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MRCC",
    "name": "Monroe Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRCCL",
    "name": "Monroe Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRCY",
    "name": "Mercury Systems Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRIN",
    "name": "Marin Software Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRK",
    "name": "Merck & Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MRKR",
    "name": "Marker Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRLN",
    "name": "Marlin Business Services Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRNS",
    "name": "Marinus Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRO",
    "name": "Marathon Oil Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MRSN",
    "name": "Mersana Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRT",
    "name": "MedEquities Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MRTN",
    "name": "Marten Transport, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRTX",
    "name": "Mirati Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRUS",
    "name": "Merus N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MRVL",
    "name": "Marvell Technology Group Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MS",
    "name": "Morgan Stanley",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSA",
    "name": "MSA Safety Incorporporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MS^A",
    "name": "Morgan Stanley",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSB",
    "name": "Mesabi Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSBF",
    "name": "MSB Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MSBI",
    "name": "Midland States Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MSC",
    "name": "Studio City International Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSCI",
    "name": "MSCI Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSD",
    "name": "Morgan Stanley Emerging Markets Debt Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MS^E",
    "name": "Morgan Stanley",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSEX",
    "name": "Middlesex Water Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MSF",
    "name": "Morgan Stanley Emerging Markets Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MS^F",
    "name": "Morgan Stanley",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSFT",
    "name": "Microsoft Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MSG",
    "name": "The Madison Square Garden Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSG",
    "name": "The Madison Square Garden Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MS^G",
    "name": "Morgan Stanley",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSGN",
    "name": "MSG Networks Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSI",
    "name": "Motorola Solutions, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MS^I",
    "name": "Morgan Stanley",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MS^K",
    "name": "Morgan Stanley",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSL",
    "name": "MidSouth Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSM",
    "name": "MSC Industrial Direct Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MSN",
    "name": "Emerson Radio Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MSON",
    "name": "MISONIX, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MSTR",
    "name": "MicroStrategy Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MSVB",
    "name": "Mid-Southern Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MT",
    "name": "ArcelorMittal",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTB",
    "name": "M&T Bank Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTB^",
    "name": "M&T Bank Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTBC",
    "name": "Medical Transcription Billing, Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTB^C",
    "name": "M&T Bank Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTBCP",
    "name": "Medical Transcription Billing, Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTB.WS",
    "name": "M&T Bank Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTCH",
    "name": "Match Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTD",
    "name": "Mettler-Toledo International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTDR",
    "name": "Matador Resources Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTEC",
    "name": "MTech Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTECU",
    "name": "MTech Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTECW",
    "name": "MTech Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTEM",
    "name": "Molecular Templates, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTEX",
    "name": "Mannatech, Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTFB",
    "name": "Motif Bio plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTFBW",
    "name": "Motif Bio plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTG",
    "name": "MGIC Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTH",
    "name": "Meritage Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTL",
    "name": "Mechel PAO",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTL^",
    "name": "Mechel PAO",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTLS",
    "name": "Materialise NV",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTN",
    "name": "Vail Resorts, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTNB",
    "name": "Matinas Biopharma Holdings, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MTOR",
    "name": "Meritor, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTP",
    "name": "Midatech Pharma PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTR",
    "name": "Mesa Royalty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTRN",
    "name": "Materion Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTRX",
    "name": "Matrix Service Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTSC",
    "name": "MTS Systems Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTSI",
    "name": "MACOM Technology Solutions Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTSL",
    "name": "MER Telemanagement Solutions Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MTT",
    "name": "Western Asset Municipal Defined Opportunity Trust Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTW",
    "name": "Manitowoc Company, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTX",
    "name": "Minerals Technologies Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MTZ",
    "name": "MasTec, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MU",
    "name": "Micron Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MUA",
    "name": "Blackrock MuniAssets Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUC",
    "name": "Blackrock MuniHoldings California Quality Fund,  Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUDS",
    "name": "Mudrick Capital Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MUDSU",
    "name": "Mudrick Capital Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MUDSW",
    "name": "Mudrick Capital Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MUE",
    "name": "Blackrock MuniHoldings Quality Fund II, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUFG",
    "name": "Mitsubishi UFJ Financial Group Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUH",
    "name": "Blackrock MuniHoldings Fund II, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUI",
    "name": "Blackrock Muni Intermediate Duration Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUJ",
    "name": "Blackrock MuniHoldings New Jersey Insured Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUR",
    "name": "Murphy Oil Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUS",
    "name": "Blackrock MuniHoldings Quality Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUSA",
    "name": "Murphy USA Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MUX",
    "name": "McEwen Mining Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MVBF",
    "name": "MVB Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MVC",
    "name": "MVC Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MVCD",
    "name": "MVC Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MVF",
    "name": "MuniVest Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MVIS",
    "name": "Microvision, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MVO",
    "name": "MV Oil Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MVT",
    "name": "Blackrock MuniVest Fund II, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MWA",
    "name": "Mueller Water Products Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MX",
    "name": "MagnaChip Semiconductor Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MXC",
    "name": "Mexco Energy Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MXE",
    "name": "Mexico Equity and Income Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MXF",
    "name": "Mexico Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MXIM",
    "name": "Maxim Integrated Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MXL",
    "name": "MaxLinear, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MXWL",
    "name": "Maxwell Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MYC",
    "name": "Blackrock MuniYield California Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MYD",
    "name": "Blackrock MuniYield Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MYE",
    "name": "Myers Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MYF",
    "name": "Blackrock MuniYield Investment Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MYFW",
    "name": "First Western Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MYGN",
    "name": "Myriad Genetics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MYI",
    "name": "Blackrock MuniYield Quality Fund III, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MYJ",
    "name": "Blackrock MuniYield New Jersey Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MYL",
    "name": "Mylan N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MYN",
    "name": "Blackrock MuniYield New York Quality Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MYND",
    "name": "MYnd Analytics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MYNDW",
    "name": "MYnd Analytics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MYO",
    "name": "Myomo Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "MYOK",
    "name": "MyoKardia, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MYOS",
    "name": "MYOS RENS Technology Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MYOV",
    "name": "Myovant Sciences Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MYRG",
    "name": "MYR Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MYSZ",
    "name": "My Size, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "MZA",
    "name": "MuniYield Arizona Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "MZOR",
    "name": "Mazor Robotics Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NAC",
    "name": "Nuveen California Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NAD",
    "name": "Nuveen Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NAII",
    "name": "Natural Alternatives International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NAK",
    "name": "Northern Dynasty Minerals, Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NAKD",
    "name": "Naked Brand Group Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NAN",
    "name": "Nuveen New York Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NANO",
    "name": "Nanometrics Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NAO",
    "name": "Nordic American Offshore Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NAOV",
    "name": "NanoVibronix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NAP",
    "name": "Navios Maritime Midstream Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NAT",
    "name": "Nordic American Tankers Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NATH",
    "name": "Nathan&#39;s Famous, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NATI",
    "name": "National Instruments Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NATR",
    "name": "Nature&#39;s Sunshine Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NAUH",
    "name": "National American University Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NAV",
    "name": "Navistar International Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NAVB",
    "name": "Navidea Biopharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NAV^D",
    "name": "Navistar International Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NAVG",
    "name": "The Navigators Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NAVI",
    "name": "Navient Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NAZ",
    "name": "Nuveen Arizona Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NBB",
    "name": "Nuveen Taxable Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NBEV",
    "name": "New Age Beverages Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NBH",
    "name": "Neuberger Berman Municipal Fund Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NBHC",
    "name": "National Bank Holdings Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NBIX",
    "name": "Neurocrine Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NBL",
    "name": "Noble Energy Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NBLX",
    "name": "Noble Midstream Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NBN",
    "name": "Northeast Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NBO",
    "name": "Neuberger Berman New York Municipal Fund Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NBR",
    "name": "Nabors Industries Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NBR^A",
    "name": "Nabors Industries Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NBRV",
    "name": "Nabriva Therapeutics plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NBTB",
    "name": "NBT Bancorp Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NBW",
    "name": "Neuberger Berman California Municipal Fund Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NBY",
    "name": "NovaBay Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NC",
    "name": "NACCO Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCA",
    "name": "Nuveen California Municipal Value Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCB",
    "name": "Nuveen California Municipal Value Fund 2",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCBS",
    "name": "Nicolet Bankshares Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NCI",
    "name": "Navigant Consulting, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCLH",
    "name": "Norwegian Cruise Line Holdings Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NCLH",
    "name": "Norwegian Cruise Line Holdings Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCMI",
    "name": "National CineMedia, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NCNA",
    "name": "NuCana plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NCOM",
    "name": "National Commerce Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NCR",
    "name": "NCR Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCS",
    "name": "NCI Building Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCSM",
    "name": "NCS Multistage Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NCTY",
    "name": "The9 Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NCV",
    "name": "AllianzGI Convertible & Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCV^A",
    "name": "AllianzGI Convertible & Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCZ",
    "name": "AllianzGI Convertible & Income Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NCZ^A",
    "name": "AllianzGI Convertible & Income Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NDAQ",
    "name": "Nasdaq, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NDLS",
    "name": "Noodles & Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NDP",
    "name": "Tortoise Energy Independence Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NDRA",
    "name": "ENDRA Life Sciences Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NDRAW",
    "name": "ENDRA Life Sciences Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NDSN",
    "name": "Nordson Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NE",
    "name": "Noble Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEA",
    "name": "Nuveen AMT-Free Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEBU",
    "name": "Nebula Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEBUU",
    "name": "Nebula Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEBUW",
    "name": "Nebula Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEE",
    "name": "NextEra Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEE^I",
    "name": "NextEra Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEE^J",
    "name": "NextEra Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEE^K",
    "name": "NextEra Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEE^R",
    "name": "NextEra Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEM",
    "name": "Newmont Mining Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEN",
    "name": "New England Realty Associates Limited Partnership",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NEO",
    "name": "NeoGenomics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEOG",
    "name": "Neogen Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEON",
    "name": "Neonode Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEOS",
    "name": "Neos Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEP",
    "name": "NextEra Energy Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEPT",
    "name": "Neptune Wellness Solutions Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NERV",
    "name": "Minerva Neurosciences, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NES",
    "name": "Nuverra Environmental Solutions, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NESR",
    "name": "National Energy Services Reunited Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NESRW",
    "name": "National Energy Services Reunited Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NETE",
    "name": "Net Element, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NETS",
    "name": "Netshoes (Cayman) Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEU",
    "name": "NewMarket Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEV",
    "name": "Nuveen Enhanced Municipal Value Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEW",
    "name": "Puxin Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEWA",
    "name": "Newater Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEWM",
    "name": "New Media Investment Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEWR",
    "name": "New Relic, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEWT",
    "name": "Newtek Business Services Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEWTI",
    "name": "Newtek Business Services Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEWTZ",
    "name": "Newtek Business Services Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NEXA",
    "name": "Nexa Resources S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NEXT",
    "name": "NextDecade Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NFBK",
    "name": "Northfield Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NFC",
    "name": "New Frontier Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NFC.U",
    "name": "New Frontier Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NFC.WS",
    "name": "New Frontier Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NFEC",
    "name": "NF Energy Saving Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NFG",
    "name": "National Fuel Gas Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NFJ",
    "name": "AllianzGI NFJ Dividend, Interest & Premium Strategy Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NFLX",
    "name": "Netflix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NFTY",
    "name": "First Trust Exchange-Traded AlphDEX Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NFX",
    "name": "Newfield Exploration Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NG",
    "name": "Novagold Resources Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NGD",
    "name": "New Gold Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NGG",
    "name": "National Grid Transco, PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NGHC",
    "name": "National General Holdings Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NGHCN",
    "name": "National General Holdings Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NGHCO",
    "name": "National General Holdings Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NGHCP",
    "name": "National General Holdings Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NGHCZ",
    "name": "National General Holdings Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NGL",
    "name": "NGL ENERGY PARTNERS LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NGL^B",
    "name": "NGL ENERGY PARTNERS LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NGLS^A",
    "name": "Targa Resources Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NGS",
    "name": "Natural Gas Services Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NGVC",
    "name": "Natural Grocers by Vitamin Cottage, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NGVT",
    "name": "Ingevity Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NH",
    "name": "NantHealth, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NHA",
    "name": "Nuveen Municipal 2021 Target Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NHC",
    "name": "National HealthCare Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NHF",
    "name": "NexPoint Strategic Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NHI",
    "name": "National Health Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NHLD",
    "name": "National Holdings Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NHLDW",
    "name": "National Holdings Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NHS",
    "name": "Neuberger Berman High Yield Strategies Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NHTC",
    "name": "Natural Health Trends Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NI",
    "name": "NiSource, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NICE",
    "name": "NICE Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NICK",
    "name": "Nicholas Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NID",
    "name": "Nuveen Intermediate Duration Municipal Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NIE",
    "name": "AllianzGI Equity & Convertible Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NIHD",
    "name": "NII Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NIM",
    "name": "Nuveen Select Maturities Municipal Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NINE",
    "name": "Nine Energy Service, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NIO",
    "name": "NIO Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NIQ",
    "name": "Nuveenn Intermediate Duration Quality Municipal Term Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NITE",
    "name": "Nightstar Therapeutics plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NIU",
    "name": "Niu Technologies",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NJR",
    "name": "NewJersey Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NJV",
    "name": "Nuveen New Jersey Municipal Value Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NK",
    "name": "NantKwest, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NKE",
    "name": "Nike, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NKG",
    "name": "Nuveen Georgia Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NKSH",
    "name": "National Bankshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NKTR",
    "name": "Nektar Therapeutics",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NKX",
    "name": "Nuveen California AMT-Free Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NL",
    "name": "NL Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NLNK",
    "name": "NewLink Genetics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NLS",
    "name": "Nautilus Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NLSN",
    "name": "Nielsen N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NLY",
    "name": "Annaly Capital Management Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NLY^C",
    "name": "Annaly Capital Management Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NLY^D",
    "name": "Annaly Capital Management Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NLY^F",
    "name": "Annaly Capital Management Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NLY^G",
    "name": "Annaly Capital Management Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NLY^H",
    "name": "Annaly Capital Management Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NM",
    "name": "Navios Maritime Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMFC",
    "name": "New Mountain Finance Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMFX",
    "name": "New Mountain Finance Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NM^G",
    "name": "Navios Maritime Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NM^H",
    "name": "Navios Maritime Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMI",
    "name": "Nuveen Municipal Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMIH",
    "name": "NMI Holdings Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NMK^B",
    "name": "Niagara Mohawk Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMK^C",
    "name": "Niagara Mohawk Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NML",
    "name": "Neuberger Berman MLP Income Fund Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NMM",
    "name": "Navios Maritime Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMR",
    "name": "Nomura Holdings Inc ADR",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMRD",
    "name": "Nemaura Medical Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NMRK",
    "name": "Newmark Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NMRKV",
    "name": "Newmark Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NMS",
    "name": "Nuveen Minnesota Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMT",
    "name": "Nuveen Massachusetts Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMY",
    "name": "Nuveen Maryland Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NMZ",
    "name": "Nuveen Municipal High Income Opportunity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NNA",
    "name": "Navios Maritime Acquisition Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NNBR",
    "name": "NN, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NNC",
    "name": "Nuveen North Carolina Quality Municipal Income Fd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NNDM",
    "name": "Nano Dimension Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NNI",
    "name": "Nelnet, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NNN",
    "name": "National Retail Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NNN^E",
    "name": "National Retail Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NNN^F",
    "name": "National Retail Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NNVC",
    "name": "NanoViricides, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NNY",
    "name": "Nuveen New York Municipal Value Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NOA",
    "name": "North American Construction Group Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NOAH",
    "name": "Noah Holdings Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NOC",
    "name": "Northrop Grumman Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NODK",
    "name": "NI Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NOG",
    "name": "Northern Oil and Gas, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NOK",
    "name": "Nokia Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NOM",
    "name": "Nuveen Missouri Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NOMD",
    "name": "Nomad Foods Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NOV",
    "name": "National Oilwell Varco, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NOVN",
    "name": "Novan, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NOVT",
    "name": "Novanta Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NOW",
    "name": "ServiceNow, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NP",
    "name": "Neenah, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NPK",
    "name": "National Presto Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NPN",
    "name": "Nuveen Pennsylvania Municipal Value Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NPO",
    "name": "EnPro Industries",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NPTN",
    "name": "NeoPhotonics Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NPV",
    "name": "Nuveen Virginia Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NQP",
    "name": "Nuveen Pennsylvania Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NR",
    "name": "Newpark Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NRC",
    "name": "National Research Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NRCG",
    "name": "NRC Group Holdings Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NRCG.WS",
    "name": "NRC Group Holdings Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NRE",
    "name": "NorthStar Realty Europe Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NRG",
    "name": "NRG Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NRIM",
    "name": "Northrim BanCorp Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NRK",
    "name": "Nuveen New York AMT-Free Quality Municipal",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NRO",
    "name": "Neuberger Berman Real Estate Securities Income Fund, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NRP",
    "name": "Natural Resource Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NRT",
    "name": "North European Oil Royality Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NRZ",
    "name": "New Residential Investment Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NS",
    "name": "Nustar Energy L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NSA",
    "name": "National Storage Affiliates Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NS^A",
    "name": "Nustar Energy L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NSA^A",
    "name": "National Storage Affiliates Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NS^B",
    "name": "Nustar Energy L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NSC",
    "name": "Norfolk Souther Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NS^C",
    "name": "Nustar Energy L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NSEC",
    "name": "National Security Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NSIT",
    "name": "Insight Enterprises, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NSL",
    "name": "Nuveen Senior Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NSP",
    "name": "Insperity, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NSPR",
    "name": "InspireMD Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NSPR.WS",
    "name": "InspireMD Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NSPR.WS.B",
    "name": "InspireMD Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NSS",
    "name": "NuStar Logistics, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NSSC",
    "name": "NAPCO Security Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NSTG",
    "name": "NanoString Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NSU",
    "name": "Nevsun Resources Ltd",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NSYS",
    "name": "Nortech Systems Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTAP",
    "name": "NetApp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTB",
    "name": "Bank of N.T. Butterfield & Son Limited (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTC",
    "name": "Nuveen Connecticut Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTCT",
    "name": "NetScout Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTEC",
    "name": "Intec Pharma Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTES",
    "name": "NetEase, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTEST",
    "name": "NASDAQ TEST STOCK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTEST.A",
    "name": "NASDAQ TEST STOCK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTEST.B",
    "name": "NASDAQ TEST STOCK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTEST.C",
    "name": "NASDAQ TEST STOCK",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTG",
    "name": "Tortoise MLP Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTGN",
    "name": "Neon Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTGR",
    "name": "NETGEAR, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTIC",
    "name": "Northern Technologies International Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTIP",
    "name": "Network-1 Technologies, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NTLA",
    "name": "Intellia Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTN",
    "name": "NTN Buzztime, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NTNX",
    "name": "Nutanix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTP",
    "name": "Nam Tai Property Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTR",
    "name": "Nutrien Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTRA",
    "name": "Natera, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTRI",
    "name": "NutriSystem Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTRP",
    "name": "Neurotrope, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTRS",
    "name": "Northern Trust Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTRSP",
    "name": "Northern Trust Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTWK",
    "name": "NetSol Technologies Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NTX",
    "name": "Nuveen Texas Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NTZ",
    "name": "Natuzzi, S.p.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NUAN",
    "name": "Nuance Communications, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NUE",
    "name": "Nucor Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NUM",
    "name": "Nuveen Michigan Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NUO",
    "name": "Nuveen Ohio Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NURO",
    "name": "NeuroMetrix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NUROW",
    "name": "NeuroMetrix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NUS",
    "name": "Nu Skin Enterprises, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NUV",
    "name": "Nuveen AMT-Free Municipal Value Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NUVA",
    "name": "NuVasive, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NUW",
    "name": "Nuveen AMT-Free Municipal Value Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NVAX",
    "name": "Novavax, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVCN",
    "name": "Neovasc Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVCR",
    "name": "NovoCure Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVDA",
    "name": "NVIDIA Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVEC",
    "name": "NVE Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVEE",
    "name": "NV5 Global, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVFY",
    "name": "Nova Lifestyle, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVG",
    "name": "Nuveen AMT-Free Municipal Credit Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NVGS",
    "name": "Navigator Holdings Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NVIV",
    "name": "InVivo Therapeutics Holdings Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVLN",
    "name": "Novelion Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVMI",
    "name": "Nova Measuring Instruments Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVMM",
    "name": "Novume Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVO",
    "name": "Novo Nordisk A/S",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NVR",
    "name": "NVR, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NVRO",
    "name": "Nevro Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NVS",
    "name": "Novartis AG",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NVT",
    "name": "nVent Electric plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NVTA",
    "name": "Invitae Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NVTR",
    "name": "Nuvectra Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NVUS",
    "name": "Novus Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NWBI",
    "name": "Northwest Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NWE",
    "name": "NorthWestern Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NWFL",
    "name": "Norwood Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NWHM",
    "name": "New Home Company Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NWL",
    "name": "Newell Brands Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NWLI",
    "name": "National Western Life Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NWN",
    "name": "Northwest Natural Holding Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NWPX",
    "name": "Northwest Pipe Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NWS",
    "name": "News Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NWSA",
    "name": "News Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NX",
    "name": "Quanex Building Products Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NXC",
    "name": "Nuveen Insured California Select Tax-Free Income Portfolio",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NXE",
    "name": "Nexgen Energy Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NXEO",
    "name": "Nexeo Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NXEOU",
    "name": "Nexeo Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NXEOW",
    "name": "Nexeo Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NXGN",
    "name": "NextGen Healthcare, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NXJ",
    "name": "Nuveen New Jersey Quality Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NXN",
    "name": "Nuveen Insured New York Select Tax-Free Income Portfolio",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NXP",
    "name": "Nuveen Select Tax Free Income Portfolio",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NXPI",
    "name": "NXP Semiconductors N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NXQ",
    "name": "Nuveen Select Tax Free Income Portfolio II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NXR",
    "name": "Nuveen Select Tax Free Income Portfolio III",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NXRT",
    "name": "NexPoint Residential Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NXST",
    "name": "Nexstar Media Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NXTD",
    "name": "NXT-ID Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NXTDW",
    "name": "NXT-ID Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NXTM",
    "name": "NxStage Medical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NYCB",
    "name": "New York Community Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NYCB^A",
    "name": "New York Community Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NYCB^U",
    "name": "New York Community Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NYH",
    "name": "Eaton Vance New York Municipal Bond Fund II",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "NYMT",
    "name": "New York Mortgage Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NYMTN",
    "name": "New York Mortgage Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NYMTO",
    "name": "New York Mortgage Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NYMTP",
    "name": "New York Mortgage Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NYMX",
    "name": "Nymox Pharmaceutical Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NYNY",
    "name": "Empire Resorts, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "NYT",
    "name": "New York Times Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NYV",
    "name": "Nuveen New York Municipal Value Fund 2",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "NZF",
    "name": "Nuveen Municipal Credit Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "O",
    "name": "Realty Income Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OAK",
    "name": "Oaktree Capital Group, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OAK^A",
    "name": "Oaktree Capital Group, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OAK^B",
    "name": "Oaktree Capital Group, LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OAS",
    "name": "Oasis Petroleum Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OASM",
    "name": "Oasmia Pharmaceutical AB",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OBAS",
    "name": "Optibase Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OBCI",
    "name": "Ocean Bio-Chem, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OBE",
    "name": "Obsidian Energy Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OBLN",
    "name": "Obalon Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OBNK",
    "name": "Origin Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OBSV",
    "name": "ObsEva SA",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OC",
    "name": "Owens Corning Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OCC",
    "name": "Optical Cable Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OCCI",
    "name": "OFS Credit Company, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OCFC",
    "name": "OceanFirst Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OCLR",
    "name": "Oclaro, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OCN",
    "name": "Ocwen Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OCSI",
    "name": "Oaktree Strategic Income Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OCSL",
    "name": "Oaktree Specialty Lending Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OCSLL",
    "name": "Oaktree Specialty Lending Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OCUL",
    "name": "Ocular Therapeutix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OCX",
    "name": "OncoCyte Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ODC",
    "name": "Oil-Dri Corporation Of America",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ODFL",
    "name": "Old Dominion Freight Line, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ODP",
    "name": "Office Depot, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ODT",
    "name": "Odonate Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OEC",
    "name": "Orion Engineered Carbons S.A",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OESX",
    "name": "Orion Energy Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OFC",
    "name": "Corporate Office Properties Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OFED",
    "name": "Oconee Federal Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OFG",
    "name": "OFG Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OFG^A",
    "name": "OFG Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OFG^B",
    "name": "OFG Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OFG^D",
    "name": "OFG Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OFIX",
    "name": "Orthofix Medical Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OFLX",
    "name": "Omega Flex, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OFS",
    "name": "OFS Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OFSSL",
    "name": "OFS Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OFSSZ",
    "name": "OFS Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OGE",
    "name": "OGE Energy Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OGEN",
    "name": "Oragenics Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "OGS",
    "name": "ONE Gas, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OHAI",
    "name": "OHA Investment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OHGI",
    "name": "One Horizon Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OHI",
    "name": "Omega Healthcare Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OHRP",
    "name": "Ohr Pharmaceutical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OI",
    "name": "Owens-Illinois, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OIA",
    "name": "Invesco Municipal Income Opportunities Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OIBR~",
    "name": "Oi S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OIBR.C",
    "name": "Oi S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OII",
    "name": "Oceaneering International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OIIM",
    "name": "O2Micro International Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OIS",
    "name": "Oil States International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OKDCC",
    "name": "Eaton Vance NextShares Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OKE",
    "name": "ONEOK, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OKTA",
    "name": "Okta, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OLBK",
    "name": "Old Line Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OLD",
    "name": "Janus Detroit Street Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OLED",
    "name": "Universal Display Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OLLI",
    "name": "Ollie&#39;s Bargain Outlet Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OLN",
    "name": "Olin Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OLP",
    "name": "One Liberty Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OMAB",
    "name": "Grupo Aeroportuario del Centro Norte S.A.B. de C.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OMAD",
    "name": "One Madison Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OMAD.U",
    "name": "One Madison Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OMAD.WS",
    "name": "One Madison Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OMC",
    "name": "Omnicom Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OMCL",
    "name": "Omnicell, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OMED",
    "name": "OncoMed Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OMER",
    "name": "Omeros Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OMEX",
    "name": "Odyssey Marine Exploration, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OMF",
    "name": "OneMain Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OMI",
    "name": "Owens & Minor, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OMN",
    "name": "OMNOVA Solutions Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OMP",
    "name": "Oasis Midstream Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ON",
    "name": "ON Semiconductor Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONB",
    "name": "Old National Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONCE",
    "name": "Spark Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONCS",
    "name": "OncoSec Medical Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONCY",
    "name": "Oncolytics Biotech Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONDK",
    "name": "On Deck Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ONE",
    "name": "OneSmart International Education Group Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ONEQ",
    "name": "Fidelity Nasdaq Composite Index Tracking Stock",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONS",
    "name": "Oncobiologics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONSIW",
    "name": "Oncobiologics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONTX",
    "name": "Onconova Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONTXW",
    "name": "Onconova Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ONVO",
    "name": "Organovo Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OOMA",
    "name": "Ooma, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OPB",
    "name": "Opus Bank",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPBK",
    "name": "OP Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPES",
    "name": "Opes Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPESU",
    "name": "Opes Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPESW",
    "name": "Opes Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPGN",
    "name": "OpGen, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPGNW",
    "name": "OpGen, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPHC",
    "name": "OptimumBank Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPHT",
    "name": "Ophthotech Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPK",
    "name": "Opko Health, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPNT",
    "name": "Opiant Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPOF",
    "name": "Old Point Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPP",
    "name": "RiverNorth/DoubleLine Strategic Opportunity Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OPRA",
    "name": "Opera Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPRX",
    "name": "OptimizeRx Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPTN",
    "name": "OptiNose, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPTT",
    "name": "Ocean Power Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OPY",
    "name": "Oppenheimer Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OR",
    "name": "Osisko Gold Royalties Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ORA",
    "name": "Ormat Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ORAN",
    "name": "Orange",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ORBC",
    "name": "ORBCOMM Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORBK",
    "name": "Orbotech Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORC",
    "name": "Orchid Island Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ORCL",
    "name": "Oracle Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ORG",
    "name": "Janus Detroit Street Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORGS",
    "name": "Orgenesis Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORI",
    "name": "Old Republic International Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ORIG",
    "name": "Ocean Rig UDW Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORIT",
    "name": "Oritani Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORLY",
    "name": "O&#39;Reilly Automotive, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORM",
    "name": "Owens Realty Mortgage, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ORMP",
    "name": "Oramed Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORN",
    "name": "Orion Group Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ORPN",
    "name": "Bioblast Pharma Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORRF",
    "name": "Orrstown Financial Services Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ORTX",
    "name": "Orchard Therapeutics plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSB",
    "name": "Norbord Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OSBC",
    "name": "Old Second Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSBCP",
    "name": "Old Second Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSG",
    "name": "Overseas Shipholding Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OSIR",
    "name": "Osiris Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSIS",
    "name": "OSI Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSK",
    "name": "Oshkosh Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OSLE",
    "name": "Oaktree Specialty Lending Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OSMT",
    "name": "Osmotica Pharmaceuticals plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSN",
    "name": "Ossen Innovation Co., Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSPN",
    "name": "OneSpan Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSS",
    "name": "One Stop Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSTK",
    "name": "Overstock.com, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OSUR",
    "name": "OraSure Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OTEL",
    "name": "Otelco Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OTEX",
    "name": "Open Text Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OTIC",
    "name": "Otonomy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OTIV",
    "name": "On Track Innovations Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OTTR",
    "name": "Otter Tail Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OTTW",
    "name": "Ottawa Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OUT",
    "name": "OUTFRONT Media Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OVAS",
    "name": "OvaScience Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OVBC",
    "name": "Ohio Valley Banc Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OVID",
    "name": "Ovid Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OVLY",
    "name": "Oak Valley Bancorp (CA)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OXBR",
    "name": "Oxbridge Re Holdings Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OXBRW",
    "name": "Oxbridge Re Holdings Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OXFD",
    "name": "Oxford Immunotec Global PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OXLC",
    "name": "Oxford Lane Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OXLCM",
    "name": "Oxford Lane Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OXLCO",
    "name": "Oxford Lane Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OXM",
    "name": "Oxford Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OXSQ",
    "name": "Oxford Square Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OXSQL",
    "name": "Oxford Square Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OXY",
    "name": "Occidental Petroleum Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "OZK",
    "name": "Bank OZK",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "OZM",
    "name": "Och-Ziff Capital Management Group LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "P",
    "name": "Pandora Media, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PAA",
    "name": "Plains All American Pipeline, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PAAS",
    "name": "Pan American Silver Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PAC",
    "name": "Grupo Aeroportuario Del Pacifico, S.A. de C.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PACB",
    "name": "Pacific Biosciences of California, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PACQ",
    "name": "Pure Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PACQU",
    "name": "Pure Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PACQW",
    "name": "Pure Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PACW",
    "name": "PacWest Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PAG",
    "name": "Penske Automotive Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PAGG",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PAGP",
    "name": "Plains Group Holdings, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PAGS",
    "name": "PagSeguro Digital Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PAH",
    "name": "Platform Specialty Products Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PAHC",
    "name": "Phibro Animal Health Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PAI",
    "name": "Western Asset Investment Grade Income Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PAM",
    "name": "Pampa Energia S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PANL",
    "name": "Pangaea Logistics Solutions Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PANW",
    "name": "Palo Alto Networks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PAR",
    "name": "PAR Technology Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PARR",
    "name": "Par Pacific Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PATI",
    "name": "Patriot Transportation Holding, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PATK",
    "name": "Patrick Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PAVM",
    "name": "PAVmed Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PAVMW",
    "name": "PAVmed Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PAVMZ",
    "name": "PAVmed Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PAYC",
    "name": "Paycom Software, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PAYX",
    "name": "Paychex, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PB",
    "name": "Prosperity Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBA",
    "name": "Pembina Pipeline Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBB",
    "name": "Prospect Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBBI",
    "name": "PB Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PBCT",
    "name": "People&#39;s United Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PBCTP",
    "name": "People&#39;s United Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PBF",
    "name": "PBF Energy Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBFX",
    "name": "PBF Logistics LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBH",
    "name": "Prestige Consumer Healthcare Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBHC",
    "name": "Pathfinder Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PBI",
    "name": "Pitney Bowes Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBI^B",
    "name": "Pitney Bowes Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBIP",
    "name": "Prudential Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PBPB",
    "name": "Potbelly Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PBR",
    "name": "Petroleo Brasileiro S.A.- Petrobras",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBR.A",
    "name": "Petroleo Brasileiro S.A.- Petrobras",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBSK",
    "name": "Poage Bankshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PBT",
    "name": "Permian Basin Royalty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBY",
    "name": "Prospect Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PBYI",
    "name": "Puma Biotechnology Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCAR",
    "name": "PACCAR Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCB",
    "name": "Pacific City Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCF",
    "name": "High Income Securities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PCG",
    "name": "Pacific Gas & Electric Co.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PCG^A",
    "name": "Pacific Gas & Electric Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PCG^B",
    "name": "Pacific Gas & Electric Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PCG^C",
    "name": "Pacific Gas & Electric Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PCG^D",
    "name": "Pacific Gas & Electric Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PCG^E",
    "name": "Pacific Gas & Electric Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PCG^G",
    "name": "Pacific Gas & Electric Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PCG^H",
    "name": "Pacific Gas & Electric Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PCG^I",
    "name": "Pacific Gas & Electric Co.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PCH",
    "name": "PotlatchDeltic Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCI",
    "name": "PIMCO Dynamic Credit and Mortgage Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PCK",
    "name": "Pimco California Municipal Income Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PCM",
    "name": "PIMCO Commercial Mortgage Securities Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PCMI",
    "name": "PCM, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCN",
    "name": "Pimco Corporate & Income Stategy Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PCOM",
    "name": "Points International, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCQ",
    "name": "PIMCO California Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PCRX",
    "name": "Pacira Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCSB",
    "name": "PCSB Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCTI",
    "name": "PC-Tel, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCTY",
    "name": "Paylocity Holding Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCYG",
    "name": "Park City Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PCYO",
    "name": "Pure Cycle Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDBC",
    "name": "Invesco Actively Managed Exchange-Traded Commodity Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDCE",
    "name": "PDC Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDCO",
    "name": "Patterson Companies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDD",
    "name": "Pinduoduo Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDEX",
    "name": "Pro-Dex, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDFS",
    "name": "PDF Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDI",
    "name": "PIMCO Dynamic Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PDLB",
    "name": "PDL Community Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDLI",
    "name": "PDL BioPharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDM",
    "name": "Piedmont Office Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PDP",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PDS",
    "name": "Precision Drilling Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PDT",
    "name": "John Hancock Premium Dividend Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PDVW",
    "name": "pdvWireless, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PE",
    "name": "Parsley Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEB",
    "name": "Pebblebrook Hotel Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEB^C",
    "name": "Pebblebrook Hotel Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEB^D",
    "name": "Pebblebrook Hotel Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEBK",
    "name": "Peoples Bancorp of North Carolina, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PEBO",
    "name": "Peoples Bancorp Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PED",
    "name": "Pedevco Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PEER",
    "name": "PeerStream, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PEERW",
    "name": "PeerStream, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PEG",
    "name": "Public Service Enterprise Group Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEGA",
    "name": "Pegasystems Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PEGI",
    "name": "Pattern Energy Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PEI",
    "name": "Pennsylvania Real Estate Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEI^B",
    "name": "Pennsylvania Real Estate Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEI^C",
    "name": "Pennsylvania Real Estate Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEI^D",
    "name": "Pennsylvania Real Estate Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEIX",
    "name": "Pacific Ethanol, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PEN",
    "name": "Penumbra, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PENN",
    "name": "Penn National Gaming, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PEO",
    "name": "Adams Natural Resources Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PEP",
    "name": "Pepsico, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PER",
    "name": "SandRidge Permian Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PERI",
    "name": "Perion Network Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PES",
    "name": "Pioneer Energy Services Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PESI",
    "name": "Perma-Fix Environmental Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PETQ",
    "name": "PetIQ, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PETS",
    "name": "PetMed Express, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PETX",
    "name": "Aratana Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PETZ",
    "name": "TDH Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PETZC",
    "name": "Gabelli NextShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PEY",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PEZ",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFBC",
    "name": "Preferred Bank",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFBI",
    "name": "Premier Financial Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFD",
    "name": "Flaherty & Crumrine Preferred Income Fund Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PFE",
    "name": "Pfizer, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PFF",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFG",
    "name": "Principal Financial Group Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFGC",
    "name": "Performance Food Group Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PFH",
    "name": "CABCO Series 2004-101 Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PFI",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFIE",
    "name": "Profire Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFIN",
    "name": "P & F Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFIS",
    "name": "Peoples Financial Services Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFL",
    "name": "PIMCO Income Strategy Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PFLT",
    "name": "PennantPark Floating Rate Capital Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFM",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFMT",
    "name": "Performant Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFN",
    "name": "PIMCO Income Strategy Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PFNX",
    "name": "Pfenex Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PFO",
    "name": "Flaherty & Crumrine Preferred Income Opportunity Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PFPT",
    "name": "Proofpoint, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PFS",
    "name": "Provident Financial Services, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PFSI",
    "name": "PennyMac Financial Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PFSW",
    "name": "PFSweb, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PG",
    "name": "Procter & Gamble Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PGC",
    "name": "Peapack-Gladstone Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PGJ",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PGLC",
    "name": "Pershing Gold Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PGNX",
    "name": "Progenics Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PGP",
    "name": "Pimco Global Stocksplus & Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PGR",
    "name": "Progressive Corporation (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PGRE",
    "name": "Paramount Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PGTI",
    "name": "PGT Innovations, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PGTI",
    "name": "PGT Innovations, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PGZ",
    "name": "Principal Real Estate Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PH",
    "name": "Parker-Hannifin Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PHAS",
    "name": "PhaseBio Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PHD",
    "name": "Pioneer Floating Rate Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PHG",
    "name": "Koninklijke Philips N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PHI",
    "name": "PLDT Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PHII",
    "name": "PHI, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PHIIK",
    "name": "PHI, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PHIO",
    "name": "Phio Pharmaceuticals Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PHIOW",
    "name": "Phio Pharmaceuticals Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PHK",
    "name": "Pimco High Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PHM",
    "name": "PulteGroup, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PHO",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PHT",
    "name": "Pioneer High Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PHX",
    "name": "Panhandle Royalty Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PI",
    "name": "Impinj, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PICO",
    "name": "PICO Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PID",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PIE",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PIH",
    "name": "1347 Property Insurance Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PIHPP",
    "name": "1347 Property Insurance Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PII",
    "name": "Polaris Industries Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PIM",
    "name": "Putnam Master Intermediate Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PINC",
    "name": "Premier, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PIO",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PIR",
    "name": "Pier 1 Imports, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PIRS",
    "name": "Pieris Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PIXY",
    "name": "ShiftPixy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PIY",
    "name": "Merrill Lynch Depositor, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PIZ",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PJC",
    "name": "Piper Jaffray Companies",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PJH",
    "name": "Prudential Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PJT",
    "name": "PJT Partners Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PK",
    "name": "Park Hotels & Resorts Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PKBK",
    "name": "Parke Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PKD",
    "name": "Parker Drilling Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PKE",
    "name": "Park Electrochemical Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PKG",
    "name": "Packaging Corporation of America",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PKI",
    "name": "PerkinElmer, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PKO",
    "name": "Pimco Income Opportunity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PKOH",
    "name": "Park-Ohio Holdings Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PKW",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PKX",
    "name": "POSCO",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PLAB",
    "name": "Photronics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLAG",
    "name": "Planet Green Holdings Corp",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PLAN",
    "name": "Anaplan, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PLAY",
    "name": "Dave & Buster&#39;s Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLBC",
    "name": "Plumas Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLCE",
    "name": "Children&#39;s Place, Inc. (The)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLD",
    "name": "Prologis, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PLG",
    "name": "Platinum Group Metals Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PLLL",
    "name": "Piedmont Lithium Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLM",
    "name": "Polymet Mining Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PLNT",
    "name": "Planet Fitness, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PLOW",
    "name": "Douglas Dynamics, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PLPC",
    "name": "Preformed Line Products Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLSE",
    "name": "Pulse Biosciences, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLT",
    "name": "Plantronics, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PLUG",
    "name": "Plug Power, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLUS",
    "name": "ePlus inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLW",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLX",
    "name": "Protalix BioTherapeutics, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PLXP",
    "name": "PLx Pharma Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLXS",
    "name": "Plexus Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLYA",
    "name": "Playa Hotels & Resorts N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PLYM",
    "name": "Plymouth Industrial REIT, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PLYM^A",
    "name": "Plymouth Industrial REIT, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PM",
    "name": "Philip Morris International Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PMBC",
    "name": "Pacific Mercantile Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PMD",
    "name": "Psychemedics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PME",
    "name": "Pingtan Marine Enterprise Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PMF",
    "name": "PIMCO Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PML",
    "name": "Pimco Municipal Income Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PMM",
    "name": "Putnam Managed Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PMO",
    "name": "Putnam Municipal Opportunities Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PMOM",
    "name": "Principal Exchange-Traded Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PMT",
    "name": "PennyMac Mortgage Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PMT^A",
    "name": "PennyMac Mortgage Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PMT^B",
    "name": "PennyMac Mortgage Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PMTS",
    "name": "CPI Card Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PMX",
    "name": "PIMCO Municipal Income Fund III",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PNBK",
    "name": "Patriot National Bancorp Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PNC",
    "name": "PNC Financial Services Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PNC^P",
    "name": "PNC Financial Services Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PNC^Q",
    "name": "PNC Financial Services Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PNC.WS",
    "name": "PNC Financial Services Group, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PNF",
    "name": "PIMCO New York Municipal Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PNFP",
    "name": "Pinnacle Financial Partners, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PNI",
    "name": "Pimco New York Municipal Income Fund II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PNM",
    "name": "PNM Resources, Inc. (Holding Co.)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PNNT",
    "name": "PennantPark Investment Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PNQI",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PNR",
    "name": "Pentair plc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PNRG",
    "name": "PrimeEnergy Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PNRL",
    "name": "Paringa Resources Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PNTR",
    "name": "Pointer Telocation Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PNW",
    "name": "Pinnacle West Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PODD",
    "name": "Insulet Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "POL",
    "name": "PolyOne Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "POLA",
    "name": "Polar Power, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "POOL",
    "name": "Pool Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "POPE",
    "name": "Pope Resources",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "POR",
    "name": "Portland General Electric Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "POST",
    "name": "Post Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "POWI",
    "name": "Power Integrations, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "POWL",
    "name": "Powell Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PPBI",
    "name": "Pacific Premier Bancorp Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PPC",
    "name": "Pilgrim&#39;s Pride Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PPDF",
    "name": "PPDAI Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PPG",
    "name": "PPG Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PPH",
    "name": "VanEck Vectors ETF Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PPIH",
    "name": "Perma-Pipe International Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PPL",
    "name": "PPL Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PPR",
    "name": "Voya Prime Rate Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PPSI",
    "name": "Pioneer Power Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PPT",
    "name": "Putnam Premier Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PPX",
    "name": "PPL Capital Funding, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PQG",
    "name": "PQ Group Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRA",
    "name": "ProAssurance Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRAA",
    "name": "PRA Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRAH",
    "name": "PRA Health Sciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRAN",
    "name": "Prana Biotechnology Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRCP",
    "name": "Perceptron, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRE^F",
    "name": "PartnerRe Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRE^G",
    "name": "PartnerRe Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRE^H",
    "name": "PartnerRe Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRE^I",
    "name": "PartnerRe Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRFT",
    "name": "Perficient, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRFZ",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRGO",
    "name": "Perrigo Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRGS",
    "name": "Progress Software Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRGX",
    "name": "PRGX Global, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRH",
    "name": "Prudential Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRI",
    "name": "Primerica, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRIF^A",
    "name": "Priority Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRIF^B",
    "name": "Priority Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRIM",
    "name": "Primoris Services Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRK",
    "name": "Park National Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PRLB",
    "name": "Proto Labs, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRMW",
    "name": "Primo Water Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRN",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRNB",
    "name": "Principia Biopharma Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRO",
    "name": "PROS Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PROV",
    "name": "Provident Financial Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRPH",
    "name": "ProPhase Labs, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRPL",
    "name": "Purple Innovation, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRPO",
    "name": "Precipio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRQR",
    "name": "ProQR Therapeutics N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRS",
    "name": "Prudential Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRSC",
    "name": "The Providence Service Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRSP",
    "name": "Perspecta Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRT",
    "name": "PermRock Royalty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRTA",
    "name": "Prothena Corporation plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRTH",
    "name": "Priority Technology Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRTHU",
    "name": "Priority Technology Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRTHW",
    "name": "Priority Technology Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRTK",
    "name": "Paratek Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRTO",
    "name": "Proteon Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRTS",
    "name": "U.S. Auto Parts Network, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PRTY",
    "name": "Party City Holdco Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRU",
    "name": "Prudential Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PRVB",
    "name": "Provention Bio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PS",
    "name": "Pluralsight, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSA",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^A",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^B",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^C",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^D",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^E",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^F",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^G",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSAU",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSA^U",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^V",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^W",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^X",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^Y",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSA^Z",
    "name": "Public Storage",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSB",
    "name": "PS Business Parks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSB^U",
    "name": "PS Business Parks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSB^V",
    "name": "PS Business Parks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSB^W",
    "name": "PS Business Parks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSB^X",
    "name": "PS Business Parks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSB^Y",
    "name": "PS Business Parks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSC",
    "name": "Principal Exchange-Traded Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSCC",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSCD",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSCE",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSCF",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSCH",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSCI",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSCM",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSCT",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSCU",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSDO",
    "name": "Presidio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSEC",
    "name": "Prospect Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSET",
    "name": "Principal Exchange-Traded Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSF",
    "name": "Cohen & Steers Select Preferred and Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSL",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSMT",
    "name": "PriceSmart, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSO",
    "name": "Pearson, Plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSTG",
    "name": "Pure Storage, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSTI",
    "name": "Pluristem Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PSX",
    "name": "Phillips 66",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PSXP",
    "name": "Phillips 66 Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PT",
    "name": "Pintec Technology Holdings Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTC",
    "name": "PTC Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTCT",
    "name": "PTC Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTE",
    "name": "PolarityTE, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTEN",
    "name": "Patterson-UTI Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTF",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTGX",
    "name": "Protagonist Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTH",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTI",
    "name": "Proteostasis Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTIE",
    "name": "Pain Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTLA",
    "name": "Portola Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTN",
    "name": "Palatin Technologies, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PTNR",
    "name": "Partner Communications Company Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTR",
    "name": "PetroChina Company Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PTSI",
    "name": "P.A.M. Transportation Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTVCA",
    "name": "Protective Insurance Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTVCB",
    "name": "Protective Insurance Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTX",
    "name": "Pernix Therapeutics Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PTY",
    "name": "Pimco Corporate & Income Opportunity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PUB",
    "name": "People&#39;s Utah Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PUI",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PUK",
    "name": "Prudential Public Limited Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PUK^",
    "name": "Prudential Public Limited Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PUK^A",
    "name": "Prudential Public Limited Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PULM",
    "name": "Pulmatrix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PUMP",
    "name": "ProPetro Holding Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PVAC",
    "name": "Penn Virginia Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PVAL",
    "name": "Principal Exchange-Traded Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PVBC",
    "name": "Provident Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PVG",
    "name": "Pretium Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PVH",
    "name": "PVH Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PVL",
    "name": "Permianville Royalty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PVTL",
    "name": "Pivotal Software, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PW",
    "name": "Power REIT",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PW^A",
    "name": "Power REIT",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PWOD",
    "name": "Penns Woods Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PWR",
    "name": "Quanta Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PXD",
    "name": "Pioneer Natural Resources Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PXI",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PXLW",
    "name": "Pixelworks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PXS",
    "name": "Pyxis Tankers Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PXUS",
    "name": "Principal Exchange-Traded Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PY",
    "name": "Principal Exchange-Traded Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PYDS",
    "name": "Payment Data Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PYN",
    "name": "PIMCO New York Municipal Income Fund III",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PYPL",
    "name": "PayPal Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PYS",
    "name": "PPlus Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PYT",
    "name": "PPlus Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PYX",
    "name": "Pyxus International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PYZ",
    "name": "Invesco Exchange-Traded Fund Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "PZC",
    "name": "PIMCO California Municipal Income Fund III",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PZG",
    "name": "Paramount Gold Nevada Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "PZN",
    "name": "Pzena Investment Management Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "PZZA",
    "name": "Papa John&#39;s International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QABA",
    "name": "First Trust Exchange-Traded Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QADA",
    "name": "QAD Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QADB",
    "name": "QAD Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QAT",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QBAK",
    "name": "Qualstar Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QCLN",
    "name": "First Trust Exchange-Traded Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QCOM",
    "name": "QUALCOMM Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QCRH",
    "name": "QCR Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QD",
    "name": "Qudian Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QDEL",
    "name": "Quidel Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QEP",
    "name": "QEP Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QES",
    "name": "Quintana Energy Services Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QGEN",
    "name": "Qiagen N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QGEN",
    "name": "Qiagen N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QHC",
    "name": "Quorum Health Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QIWI",
    "name": "QIWI plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QLC",
    "name": "FlexShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QLYS",
    "name": "Qualys, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QNST",
    "name": "QuinStreet, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QQEW",
    "name": "First Trust Exchange-Traded Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QQQ",
    "name": "Invesco QQQ Trust, Series 1",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QQQC",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QQQX",
    "name": "Nuveen NASDAQ 100 Dynamic Overwrite Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QQXT",
    "name": "First Trust Exchange-Traded Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QRHC",
    "name": "Quest Resource Holding Corporation.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QRTEA",
    "name": "Qurate Retail, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QRTEB",
    "name": "Qurate Retail, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QRVO",
    "name": "Qorvo, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QSR",
    "name": "Restaurant Brands International Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QTEC",
    "name": "First Trust Exchange-Traded Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QTM",
    "name": "Quantum Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QTNA",
    "name": "Quantenna Communications, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QTNT",
    "name": "Quotient Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QTRH",
    "name": "Quarterhill Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QTRX",
    "name": "Quanterix Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QTS",
    "name": "QTS Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QTS^A",
    "name": "QTS Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QTS^B",
    "name": "QTS Realty Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QTT",
    "name": "Qutoutiao Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QTWO",
    "name": "Q2 Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QUAD",
    "name": "Quad Graphics, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QUIK",
    "name": "QuickLogic Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QUMU",
    "name": "Qumu Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QUOT",
    "name": "Quotient Technology Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QURE",
    "name": "uniQure N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "QVCD",
    "name": "QVC, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "QYLD",
    "name": "Horizons ETF Trust I",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "R",
    "name": "Ryder System, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RA",
    "name": "Brookfield Real Assets Income Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RACE",
    "name": "Ferrari N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RAD",
    "name": "Rite Aid Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RADA",
    "name": "RADA Electronic Industries Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RAIL",
    "name": "Freightcar America, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RAMP",
    "name": "LiveRamp Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RAND",
    "name": "Rand Capital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RARE",
    "name": "Ultragenyx Pharmaceutical Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RARX",
    "name": "Ra Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RAVE",
    "name": "Rave Restaurant Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RAVN",
    "name": "Raven Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RBA",
    "name": "Ritchie Bros. Auctioneers Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RBB",
    "name": "RBB Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RBBN",
    "name": "Ribbon Communications Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RBC",
    "name": "Regal Beloit Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RBCAA",
    "name": "Republic Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RBCN",
    "name": "Rubicon Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RBNC",
    "name": "Reliant Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RBS",
    "name": "Royal Bank Scotland plc (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RC",
    "name": "Ready Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RCA",
    "name": "Ready Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RCG",
    "name": "RENN Fund, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RCI",
    "name": "Rogers Communication, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RCII",
    "name": "Rent-A-Center Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RCKT",
    "name": "Rocket Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RCKY",
    "name": "Rocky Brands, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RCL",
    "name": "Royal Caribbean Cruises Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RCM",
    "name": "R1 RCM Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RCMT",
    "name": "RCM Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RCON",
    "name": "Recon Technology, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RCP",
    "name": "Ready Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RCS",
    "name": "PIMCO Strategic Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RCUS",
    "name": "Arcus Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RDC",
    "name": "Rowan Companies plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RDCM",
    "name": "Radcom Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDFN",
    "name": "Redfin Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDHL",
    "name": "Redhill Biopharma Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDI",
    "name": "Reading International Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDIB",
    "name": "Reading International Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDN",
    "name": "Radian Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RDNT",
    "name": "RadNet, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDS.A",
    "name": "Royal Dutch Shell PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RDS.B",
    "name": "Royal Dutch Shell PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RDUS",
    "name": "Radius Health, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDVT",
    "name": "Red Violet, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDVY",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDWR",
    "name": "Radware Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RDY",
    "name": "Dr. Reddy&#39;s Laboratories Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RE",
    "name": "Everest Re Group, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RECN",
    "name": "Resources Connection, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "REDU",
    "name": "RISE Education Cayman Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "REED",
    "name": "Reeds, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "REFR",
    "name": "Research Frontiers Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "REG",
    "name": "Regency Centers Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "REGI",
    "name": "Renewable Energy Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "REGN",
    "name": "Regeneron Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "REI",
    "name": "Ring Energy, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RELL",
    "name": "Richardson Electronics, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RELV",
    "name": "Reliv&#39; International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RELX",
    "name": "RELX PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "REN",
    "name": "Resolute Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RENN",
    "name": "Renren Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "REPH",
    "name": "Recro Pharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "REPL",
    "name": "Replimune Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RES",
    "name": "RPC, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RESI",
    "name": "Front Yard Residential Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RESN",
    "name": "Resonant Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RETA",
    "name": "Reata Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RETO",
    "name": "ReTo Eco-Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "REV",
    "name": "Revlon, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "REVG",
    "name": "REV Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "REX",
    "name": "REX American Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "REXR",
    "name": "Rexford Industrial Realty, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "REXR^A",
    "name": "Rexford Industrial Realty, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "REXR^B",
    "name": "Rexford Industrial Realty, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "REZI",
    "name": "Resideo Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RF",
    "name": "Regions Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RF^A",
    "name": "Regions Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RFAP",
    "name": "First Trust Exchange-Traded Fund III",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RF^B",
    "name": "Regions Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RFDI",
    "name": "First Trust Exchange-Traded Fund III",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RFEM",
    "name": "First Trust Exchange-Traded Fund III",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RFEU",
    "name": "First Trust Exchange-Traded Fund III",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RFI",
    "name": "Cohen & Steers Total Return Realty Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RFIL",
    "name": "RF Industries, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RFL",
    "name": "Rafael Holdings, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RFP",
    "name": "Resolute Forest Products Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RGA",
    "name": "Reinsurance Group of America, Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RGCO",
    "name": "RGC Resources Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RGEN",
    "name": "Repligen Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RGLD",
    "name": "Royal Gold, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RGLS",
    "name": "Regulus Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RGNX",
    "name": "REGENXBIO Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RGR",
    "name": "Sturm, Ruger & Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RGS",
    "name": "Regis Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RGSE",
    "name": "Real Goods Solar, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RGT",
    "name": "Royce Global Value Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RH",
    "name": "RH",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RHE",
    "name": "Regional Health Properties, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RHE^A",
    "name": "Regional Health Properties, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RHI",
    "name": "Robert Half International Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RHP",
    "name": "Ryman Hospitality Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RHT",
    "name": "Red Hat, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RIBT",
    "name": "RiceBran Technologies",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RIBTW",
    "name": "RiceBran Technologies",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RICK",
    "name": "RCI Hospitality Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RIF",
    "name": "RMR Real Estate Income Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RIG",
    "name": "Transocean Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RIGL",
    "name": "Rigel Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RILY",
    "name": "B. Riley Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RILYG",
    "name": "B. Riley Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RILYH",
    "name": "B. Riley Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RILYI",
    "name": "B. Riley Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RILYL",
    "name": "B. Riley Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RILYZ",
    "name": "B. Riley Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RING",
    "name": "iShares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RIO",
    "name": "Rio Tinto Plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RIOT",
    "name": "Riot Blockchain, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RIV",
    "name": "RiverNorth Opportunities Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RIVE",
    "name": "Riverview Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RJF",
    "name": "Raymond James Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RKDA",
    "name": "Arcadia Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RL",
    "name": "Ralph Lauren Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RLGT",
    "name": "Radiant Logistics, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RLGT^A",
    "name": "Radiant Logistics, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RLGY",
    "name": "Realogy Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RLH",
    "name": "Red Lion Hotels Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RLI",
    "name": "RLI Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RLJ",
    "name": "RLJ Lodging Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RLJ^A",
    "name": "RLJ Lodging Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RLM",
    "name": "Realm Therapeutics plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RM",
    "name": "Regional Management Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RMAX",
    "name": "RE/MAX Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RMBL",
    "name": "RumbleOn, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RMBS",
    "name": "Rambus, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RMCF",
    "name": "Rocky Mountain Chocolate Factory, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RMD",
    "name": "ResMed Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RMED",
    "name": "Ra Medical Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RMI",
    "name": "RiverNorth Opportunistic Municipal Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RMNI",
    "name": "Rimini Street, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RMPL^",
    "name": "RiverNorth Marketplace Lending Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RMR",
    "name": "The RMR Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RMT",
    "name": "Royce Micro-Cap Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RMTI",
    "name": "Rockwell Medical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNDB",
    "name": "Randolph Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNDM",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNDV",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNEM",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNET",
    "name": "RigNet, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNG",
    "name": "Ringcentral, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RNGR",
    "name": "Ranger Energy Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RNLC",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNMC",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNN",
    "name": "Rexahn Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RNP",
    "name": "Cohen & Steers Reit and Preferred Income Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RNR",
    "name": "RenaissanceRe Holdings Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RNR^C",
    "name": "RenaissanceRe Holdings Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RNR^E",
    "name": "RenaissanceRe Holdings Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RNR^F",
    "name": "RenaissanceRe Holdings Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RNSC",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNST",
    "name": "Renasant Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RNWK",
    "name": "RealNetworks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROAD",
    "name": "Construction Partners, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROAN",
    "name": "Roan Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ROBO",
    "name": "Exchange Traded Concepts Trust ROBO Global Robotics and Automa",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROBT",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROCK",
    "name": "Gibraltar Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROG",
    "name": "Rogers Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ROIC",
    "name": "Retail Opportunity Investments Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROK",
    "name": "Rockwell Automation, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ROKU",
    "name": "Roku, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROL",
    "name": "Rollins, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ROLL",
    "name": "RBC Bearings Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROP",
    "name": "Roper Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ROSE",
    "name": "Rosehill Resources Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROSEU",
    "name": "Rosehill Resources Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROSEW",
    "name": "Rosehill Resources Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROST",
    "name": "Ross Stores, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ROX",
    "name": "Castle Brands, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ROYT",
    "name": "Pacific Coast Oil Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RP",
    "name": "RealPage, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RPAI",
    "name": "Retail Properties of America, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RPD",
    "name": "Rapid7, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RPIBC",
    "name": "Managed Portfolio Series",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RPM",
    "name": "RPM International Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RPT",
    "name": "RPT Realty",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RPT^D",
    "name": "RPT Realty",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RQI",
    "name": "Cohen & Steers Quality Income Realty Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RRC",
    "name": "Range Resources Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RRD",
    "name": "R.R. Donnelley & Sons Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RRD",
    "name": "R.R. Donnelley & Sons Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RRGB",
    "name": "Red Robin Gourmet Burgers, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RRR",
    "name": "Red Rock Resorts, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RRTS",
    "name": "Roadrunner Transportation Systems, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RS",
    "name": "Reliance Steel & Aluminum Co.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RSG",
    "name": "Republic Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RSLS",
    "name": "ReShape Lifesciences Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RST",
    "name": "Rosetta Stone",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RSYS",
    "name": "RadiSys Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RTEC",
    "name": "Rudolph Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RTIX",
    "name": "RTI Surgical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RTN",
    "name": "Raytheon Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RTRX",
    "name": "Retrophin, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RTTR",
    "name": "Ritter Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RTW",
    "name": "RTW Retailwinds, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RUBI",
    "name": "The Rubicon Project, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RUBY",
    "name": "Rubius Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RUN",
    "name": "Sunrun Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RUSHA",
    "name": "Rush Enterprises, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RUSHB",
    "name": "Rush Enterprises, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RUTH",
    "name": "Ruth&#39;s Hospitality Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RVEN",
    "name": "Reven Housing REIT, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RVI",
    "name": "Retail Value Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RVLT",
    "name": "Revolution Lighting Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RVNC",
    "name": "Revance Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RVP",
    "name": "Retractable Technologies, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "RVSB",
    "name": "Riverview Bancorp Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RVT",
    "name": "Royce Value Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RWGE",
    "name": "Regalwood Global Energy Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RWGE.U",
    "name": "Regalwood Global Energy Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RWGE.WS",
    "name": "Regalwood Global Energy Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RWLK",
    "name": "ReWalk Robotics Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RWT",
    "name": "Redwood Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RXN",
    "name": "Rexnord Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RXN^A",
    "name": "Rexnord Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RY",
    "name": "Royal Bank Of Canada",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RYAAY",
    "name": "Ryanair Holdings plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RYAM",
    "name": "Rayonier Advanced Materials Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RYAM^A",
    "name": "Rayonier Advanced Materials Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RYB",
    "name": "RYB Education, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RYI",
    "name": "Ryerson Holding Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RYN",
    "name": "Rayonier Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RY^T",
    "name": "Royal Bank Of Canada",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RYTM",
    "name": "Rhythm Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "RZA",
    "name": "Reinsurance Group of America, Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "RZB",
    "name": "Reinsurance Group of America, Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "S",
    "name": "Sprint Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SA",
    "name": "Seabridge Gold, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAB",
    "name": "Saratoga Investment Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SABR",
    "name": "Sabre Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SACH",
    "name": "Sachem Capital Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SAEX",
    "name": "SAExploration Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAF",
    "name": "Saratoga Investment Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAFE",
    "name": "Safety, Income & Growth Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAFM",
    "name": "Sanderson Farms, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAFT",
    "name": "Safety Insurance Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAGE",
    "name": "Sage Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAH",
    "name": "Sonic Automotive, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAIA",
    "name": "Saia, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAIC",
    "name": "SCIENCE APPLICATIONS INTERNATIONAL CORPORATION",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAIL",
    "name": "SailPoint Technologies Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAL",
    "name": "Salisbury Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SALM",
    "name": "Salem Media Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SALT",
    "name": "Scorpio Bulkers Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAM",
    "name": "Boston Beer Company, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAMG",
    "name": "Silvercrest Asset Management Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAN",
    "name": "Banco Santander, S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAN^B",
    "name": "Banco Santander, S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAND",
    "name": "Sandstorm Gold Ltd",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SANM",
    "name": "Sanmina Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SANW",
    "name": "S&W Seed Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAP",
    "name": "SAP SE",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SAR",
    "name": "Saratoga Investment Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SASR",
    "name": "Sandy Spring Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SATS",
    "name": "EchoStar Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAUC",
    "name": "Diversified Restaurant Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAVE",
    "name": "Spirit Airlines, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SAVE",
    "name": "Spirit Airlines, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SB",
    "name": "Safe Bulkers, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBAC",
    "name": "SBA Communications Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBBC",
    "name": "Scorpio Tankers Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBBP",
    "name": "Strongbridge Biopharma plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBBX",
    "name": "SB One Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SB^C",
    "name": "Safe Bulkers, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBCF",
    "name": "Seacoast Banking Corporation of Florida",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SB^D",
    "name": "Safe Bulkers, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBFG",
    "name": "SB Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBFGP",
    "name": "SB Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBGI",
    "name": "Sinclair Broadcast Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBGL",
    "name": "Sibanye Gold Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBH",
    "name": "Sally Beauty Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBI",
    "name": "Western Asset Intermediate Muni Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBLK",
    "name": "Star Bulk Carriers Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBLKZ",
    "name": "Star Bulk Carriers Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBNA",
    "name": "Scorpio Tankers Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBNY",
    "name": "Signature Bank",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBNYW",
    "name": "Signature Bank",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBOT",
    "name": "Stellar Biotechnologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBOW",
    "name": "SilverBow Resorces, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBPH",
    "name": "Spring Bank Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBR",
    "name": "Sabine Royalty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBRA",
    "name": "Sabra Health Care REIT, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBS",
    "name": "Companhia de saneamento Basico Do Estado De Sao Paulo - Sabesp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SBSI",
    "name": "Southside Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBT",
    "name": "Sterling Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SBUX",
    "name": "Starbucks Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SC",
    "name": "Santander Consumer USA Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCA",
    "name": "Stellus Capital Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCAC",
    "name": "Saban Capital Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCACU",
    "name": "Saban Capital Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCACW",
    "name": "Saban Capital Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCCO",
    "name": "Southern Copper Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCD",
    "name": "LMP Capital and Income Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCE^B",
    "name": "Southern California Edison Company",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SCE^C",
    "name": "Southern California Edison Company",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SCE^D",
    "name": "Southern California Edison Company",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SCE^E",
    "name": "Southern California Edison Company",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SCE^G",
    "name": "Southern California Edison Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCE^H",
    "name": "Southern California Edison Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCE^J",
    "name": "Southern California Edison Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCE^K",
    "name": "Southern California Edison Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCE^L",
    "name": "Southern California Edison Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCG",
    "name": "Scana Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCHL",
    "name": "Scholastic Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCHN",
    "name": "Schnitzer Steel Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCHW",
    "name": "The Charles Schwab Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCHW^C",
    "name": "The Charles Schwab Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCHW^D",
    "name": "The Charles Schwab Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCI",
    "name": "Service Corporation International",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCKT",
    "name": "Socket Mobile, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCL",
    "name": "Stepan Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCM",
    "name": "Stellus Capital Investment Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCON",
    "name": "Superconductor Technologies Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCOR",
    "name": "comScore, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCPH",
    "name": "scPharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCS",
    "name": "Steelcase Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCSC",
    "name": "ScanSource, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCVL",
    "name": "Shoe Carnival, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCWX",
    "name": "SecureWorks Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCX",
    "name": "L.S. Starrett Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SCYX",
    "name": "SCYNEXIS, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SCZ",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SD",
    "name": "SandRidge Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SDG",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SDI",
    "name": "Standard Diversified Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SDLP",
    "name": "Seadrill Partners LLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SDPI",
    "name": "Superior Drilling Products, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SDR",
    "name": "SandRidge Mississippian Trust II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SDRL",
    "name": "Seadrill Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SDT",
    "name": "SandRidge Mississippian Trust I",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SDVY",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SE",
    "name": "Sea Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SEAC",
    "name": "SeaChange International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SEAS",
    "name": "SeaWorld Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SEB",
    "name": "Seaboard Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SECO",
    "name": "Secoo Holding Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SEDG",
    "name": "SolarEdge Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SEE",
    "name": "Sealed Air Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SEED",
    "name": "Origin Agritech Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SEIC",
    "name": "SEI Investments Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SEII",
    "name": "Sharing Economy International Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SELB",
    "name": "Selecta Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SELF",
    "name": "Global Self Storage, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SEM",
    "name": "Select Medical Holdings Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SEMG",
    "name": "Semgroup Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SEND",
    "name": "SendGrid, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SENEA",
    "name": "Seneca Foods Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SENEB",
    "name": "Seneca Foods Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SENS",
    "name": "Senseonics Holdings, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SEP",
    "name": "Spectra Energy Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SERV",
    "name": "ServiceMaster Global Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SES",
    "name": "Synthesis Energy Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SESN",
    "name": "Sesen Bio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SF",
    "name": "Stifel Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SF^A",
    "name": "Stifel Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SFB",
    "name": "Stifel Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SFBC",
    "name": "Sound Financial Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SFBS",
    "name": "ServisFirst Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SFE",
    "name": "Safeguard Scientifics, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SFET",
    "name": "Safe-T Group Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SFIX",
    "name": "Stitch Fix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SFL",
    "name": "Ship Finance International Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SFLY",
    "name": "Shutterfly, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SFM",
    "name": "Sprouts Farmers Market, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SFNC",
    "name": "Simmons First National Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SFS",
    "name": "Smart",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SFST",
    "name": "Southern First Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SFUN",
    "name": "Fang Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SG",
    "name": "Sirius International Insurance Group, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGA",
    "name": "Saga Communications, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGB",
    "name": "Southwest Georgia Financial Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SGBX",
    "name": "SG Blocks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGC",
    "name": "Superior Group of Companies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGEN",
    "name": "Seattle Genetics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGH",
    "name": "SMART Global Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGLB",
    "name": "Sigma Labs, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGLBW",
    "name": "Sigma Labs, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGMA",
    "name": "SigmaTron International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGMO",
    "name": "Sangamo Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGMS",
    "name": "Scientific Games Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGOC",
    "name": "SGOCO Group, Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGRP",
    "name": "SPAR Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGRY",
    "name": "Surgery Partners, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGU",
    "name": "Star Group, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SGYP",
    "name": "Synergy Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SGZA",
    "name": "Selective Insurance Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHAK",
    "name": "Shake Shack, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHBI",
    "name": "Shore Bancshares Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHEN",
    "name": "Shenandoah Telecommunications Co",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHG",
    "name": "Shinhan Financial Group Co Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHI",
    "name": "SINOPEC Shangai Petrochemical Company, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHIP",
    "name": "Seanergy Maritime Holdings Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHIPW",
    "name": "Seanergy Maritime Holdings Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHLO",
    "name": "Shiloh Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHLX",
    "name": "Shell Midstream Partners, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHO",
    "name": "Sunstone Hotel Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHO^E",
    "name": "Sunstone Hotel Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHO^F",
    "name": "Sunstone Hotel Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHOO",
    "name": "Steven Madden, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHOP",
    "name": "Shopify Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHOS",
    "name": "Sears Hometown and Outlet Stores, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHPG",
    "name": "Shire plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHSP",
    "name": "SharpSpring, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHV",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SHW",
    "name": "Sherwin-Williams Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SHY",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIBN",
    "name": "SI-BONE, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIC",
    "name": "Select Interior Concepts, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SID",
    "name": "National Steel Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SIEB",
    "name": "Siebert Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIEN",
    "name": "Sientra, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIF",
    "name": "SIFCO Industries, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SIFI",
    "name": "SI Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIFY",
    "name": "Sify Technologies Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIG",
    "name": "Signet Jewelers Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SIGA",
    "name": "SIGA Technologies Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIGI",
    "name": "Selective Insurance Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SILC",
    "name": "Silicom Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SILV",
    "name": "SilverCrest Metals Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SIM",
    "name": "Grupo Simec, S.A. de C.V.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SIMO",
    "name": "Silicon Motion Technology Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SINA",
    "name": "Sina Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SINO",
    "name": "Sino-Global Shipping America, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SINT",
    "name": "SiNtx Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIR",
    "name": "Select Income REIT",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIRI",
    "name": "Sirius XM Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SITC",
    "name": "SITE Centers Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SITC^A",
    "name": "SITE Centers Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SITC^J",
    "name": "SITE Centers Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SITC^K",
    "name": "SITE Centers Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SITE",
    "name": "SiteOne Landscape Supply, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SITO",
    "name": "SITO Mobile, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIVB",
    "name": "SVB Financial Group",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SIX",
    "name": "Six Flags Entertainment Corporation New",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SJI",
    "name": "South Jersey Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SJIU",
    "name": "South Jersey Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SJM",
    "name": "J.M. Smucker Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SJR",
    "name": "Shaw Communications Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SJT",
    "name": "San Juan Basin Royalty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SJW",
    "name": "SJW Group",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SKIS",
    "name": "Peak Resorts, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SKM",
    "name": "SK Telecom Co., Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SKOR",
    "name": "FlexShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SKT",
    "name": "Tanger Factory Outlet Centers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SKX",
    "name": "Skechers U.S.A., Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SKY",
    "name": "Skyline Champion Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SKYS",
    "name": "Sky Solar Holdings, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SKYW",
    "name": "SkyWest, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SKYY",
    "name": "First Trust Exchange-Traded Fund II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLAB",
    "name": "Silicon Laboratories, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLB",
    "name": "Schlumberger N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SLCA",
    "name": "U.S. Silica Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SLCT",
    "name": "Select Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLDB",
    "name": "Solid Biosciences Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLF",
    "name": "Sun Life Financial Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SLG",
    "name": "SL Green Realty Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SLG^I",
    "name": "SL Green Realty Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SLGL",
    "name": "Sol-Gel Technologies Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLGN",
    "name": "Silgan Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLIM",
    "name": "Janus Detroit Street Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLM",
    "name": "SLM Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLMBP",
    "name": "SLM Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLNO",
    "name": "Soleno Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLNOW",
    "name": "Soleno Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLP",
    "name": "Simulations Plus, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLQD",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLRC",
    "name": "Solar Capital Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLS",
    "name": "SELLAS Life Sciences Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SLTB",
    "name": "Scorpio Bulkers Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SLVO",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SM",
    "name": "SM Energy Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMAR",
    "name": "Smartsheet Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMBC",
    "name": "Southern Missouri Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMBK",
    "name": "SmartFinancial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMCP",
    "name": "ETF Series Solutions",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMED",
    "name": "Sharps Compliance Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMFG",
    "name": "Sumitomo Mitsui Financial Group Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMG",
    "name": "Scotts Miracle-Gro Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMHI",
    "name": "SEACOR Marine Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMI",
    "name": "Semiconductor  Manufacturing International Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMIT",
    "name": "Schmitt Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMLP",
    "name": "Summit Midstream Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMM",
    "name": "Salient Midstream & MLP Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMMF",
    "name": "Summit Financial Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMMT",
    "name": "Summit Therapeutics plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMP",
    "name": "Standard Motor Products, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMPL",
    "name": "The Simply Good Foods Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMRT",
    "name": "Stein Mart, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMSH",
    "name": "Smaaash Entertainment Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMSHW",
    "name": "Smaaash Entertainment Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMSI",
    "name": "Smith Micro Software, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMTA",
    "name": "Spirit MTA REIT",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SMTC",
    "name": "Semtech Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SMTS",
    "name": "Sierra Metals Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SMTX",
    "name": "SMTC Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SN",
    "name": "Sanchez Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNA",
    "name": "Snap-On Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNAP",
    "name": "Snap Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNBR",
    "name": "Sleep Number Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNCR",
    "name": "Synchronoss Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SND",
    "name": "Smart Sand, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNDE",
    "name": "Sundance Energy Australia Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNDR",
    "name": "Schneider National, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNDX",
    "name": "Syndax Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNE",
    "name": "Sony Corp Ord",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNES",
    "name": "SenesTech, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNFCA",
    "name": "Security National Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNGX",
    "name": "Soligenix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNGXW",
    "name": "Soligenix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNH",
    "name": "Senior Housing Properties Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNHNI",
    "name": "Senior Housing Properties Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNHNL",
    "name": "Senior Housing Properties Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNHY",
    "name": "Sun Hydraulics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNLN",
    "name": "Highland Funds I",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNMP",
    "name": "Sanchez Midstream Partners LP",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SNN",
    "name": "Smith & Nephew SNATS, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNNA",
    "name": "Sienna Biopharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNOA",
    "name": "Sonoma Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNOAW",
    "name": "Sonoma Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNP",
    "name": "China Petroleum & Chemical Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNPS",
    "name": "Synopsys, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNR",
    "name": "New Senior Investment Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNSR",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNSS",
    "name": "Sunesis Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SNV",
    "name": "Synovus Financial Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNV^D",
    "name": "Synovus Financial Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNX",
    "name": "Synnex Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SNY",
    "name": "Sanofi",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SO",
    "name": "Southern Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SOCL",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SODA",
    "name": "SodaStream International Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOFO",
    "name": "Sonic Foundry, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOGO",
    "name": "Sogou Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SOHO",
    "name": "Sotherly Hotels Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOHOB",
    "name": "Sotherly Hotels Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOHOK",
    "name": "Sotherly Hotels LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOHOO",
    "name": "Sotherly Hotels Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOHU",
    "name": "Sohu.com Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOI",
    "name": "Solaris Oilfield Infrastructure, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SOJA",
    "name": "Southern Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SOJB",
    "name": "Southern Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SOJC",
    "name": "Southern Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SOL",
    "name": "Renesola Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SOLO",
    "name": "Electrameccanica Vehicles Corp. Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOLOW",
    "name": "Electrameccanica Vehicles Corp. Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SON",
    "name": "Sonoco Products Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SONA",
    "name": "Southern National Bancorp of Virginia, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SONC",
    "name": "Sonic Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SONO",
    "name": "Sonos, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOR",
    "name": "Source Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SORL",
    "name": "SORL Auto Parts, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SOXX",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SP",
    "name": "SP Plus Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPA",
    "name": "Sparton Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPAQ",
    "name": "Spartan Energy Acquisition Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPAQ.U",
    "name": "Spartan Energy Acquisition Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPAQ.WS",
    "name": "Spartan Energy Acquisition Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPAR",
    "name": "Spartan Motors, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPB",
    "name": "Spectrum Brands Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPCB",
    "name": "SuperCom, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPE",
    "name": "Special Opportunities Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPE^B",
    "name": "Special Opportunities Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPEX",
    "name": "Spherix Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPG",
    "name": "Simon Property Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPGI",
    "name": "S&P Global Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPG^J",
    "name": "Simon Property Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPH",
    "name": "Suburban Propane Partners, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPHS",
    "name": "Sophiris Bio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPI",
    "name": "SPI Energy Co., Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPKE",
    "name": "Spark Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPKEP",
    "name": "Spark Energy, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPLK",
    "name": "Splunk Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPLP",
    "name": "Steel Partners Holdings LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPLP^A",
    "name": "Steel Partners Holdings LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPN",
    "name": "Superior Energy Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPNE",
    "name": "SeaSpine Holdings Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPNS",
    "name": "Sapiens International Corporation N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPOK",
    "name": "Spok Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPOT",
    "name": "Spotify Technology S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPPI",
    "name": "Spectrum Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPR",
    "name": "Spirit Aerosystems Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPRO",
    "name": "Spero Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPRT",
    "name": "support.com, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPSC",
    "name": "SPS Commerce, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPTN",
    "name": "SpartanNash Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPWH",
    "name": "Sportsman&#39;s Warehouse Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPWR",
    "name": "SunPower Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SPXC",
    "name": "SPX Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SPXX",
    "name": "Nuveen S&P 500 Dynamic Overwrite Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SQ",
    "name": "Square, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SQBG",
    "name": "Sequential Brands Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SQLV",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SQM",
    "name": "Sociedad Quimica y Minera S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SQNS",
    "name": "Sequans Communications S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SQQQ",
    "name": "ProShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SR",
    "name": "Spire Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRAX",
    "name": "Social Reality, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRC",
    "name": "Spirit Realty Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRC^A",
    "name": "Spirit Realty Capital, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRCE",
    "name": "1st Source Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRCI",
    "name": "SRC Energy Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SRCL",
    "name": "Stericycle, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRDX",
    "name": "Surmodics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRE",
    "name": "Sempra Energy",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRE^A",
    "name": "Sempra Energy",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRE^B",
    "name": "Sempra Energy",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRET",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SREV",
    "name": "ServiceSource International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRF",
    "name": "Cushing Energy Income Fund (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRG",
    "name": "Seritage Growth Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRG^A",
    "name": "Seritage Growth Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRI",
    "name": "Stoneridge, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRLP",
    "name": "Sprague Resources LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRNE",
    "name": "Sorrento Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRPT",
    "name": "Sarepta Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRRA",
    "name": "Sierra Oncology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRRK",
    "name": "Scholar Rock Holding Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRT",
    "name": "StarTek, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SRTS",
    "name": "Sensus Healthcare, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRTSW",
    "name": "Sensus Healthcare, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SRV",
    "name": "Cushing MLP & Infrastructure Total Return Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSB",
    "name": "South State Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSBI",
    "name": "Summit State Bank",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSD",
    "name": "Simpson Manufacturing Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSFN",
    "name": "Stewardship Financial Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSI",
    "name": "Stage Stores, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSKN",
    "name": "Strata Skin Sciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSL",
    "name": "Sasol Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSLJ",
    "name": "SSLJ.com Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSNC",
    "name": "SS&C Technologies Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSNT",
    "name": "SilverSun Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSP",
    "name": "E.W. Scripps Company (The)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSRM",
    "name": "SSR Mining Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSTI",
    "name": "ShotSpotter, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SSTK",
    "name": "Shutterstock, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSW",
    "name": "Seaspan Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSWA",
    "name": "Seaspan Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSW^D",
    "name": "Seaspan Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSW^E",
    "name": "Seaspan Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSW^G",
    "name": "Seaspan Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSW^H",
    "name": "Seaspan Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSW^I",
    "name": "Seaspan Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSWN",
    "name": "Seaspan Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SSY",
    "name": "SunLink Health Systems, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SSYS",
    "name": "Stratasys, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ST",
    "name": "Sensata Technologies Holding plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STAA",
    "name": "STAAR Surgical Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STAF",
    "name": "Staffing 360 Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STAG",
    "name": "Stag Industrial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STAG^C",
    "name": "Stag Industrial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STAR",
    "name": "iStar Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STAR^D",
    "name": "iStar Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STAR^G",
    "name": "iStar Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STAR^I",
    "name": "iStar Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STAY",
    "name": "Extended Stay America, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STBA",
    "name": "S&T Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STBZ",
    "name": "State Bank Financial Corporation.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STC",
    "name": "Stewart Information Services Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STCN",
    "name": "Steel Connect, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STE",
    "name": "STERIS plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STFC",
    "name": "State Auto Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STG",
    "name": "Sunlands Online Education Group",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STI",
    "name": "SunTrust Banks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STI^A",
    "name": "SunTrust Banks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STIM",
    "name": "Neuronetics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STI.WS.A",
    "name": "SunTrust Banks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STK",
    "name": "Columbia Seligman Premium Technology Growth Fund, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STKL",
    "name": "SunOpta, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STKS",
    "name": "The ONE Group Hospitality, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STL",
    "name": "Sterling Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STL^A",
    "name": "Sterling Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STLD",
    "name": "Steel Dynamics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STLR",
    "name": "Stellar Acquisition III Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STLRU",
    "name": "Stellar Acquisition III Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STLRW",
    "name": "Stellar Acquisition III Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STM",
    "name": "STMicroelectronics N.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STML",
    "name": "Stemline Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STMP",
    "name": "Stamps.com Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STN",
    "name": "Stantec Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STND",
    "name": "Standard AVB Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STNE",
    "name": "StoneCo Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STNG",
    "name": "Scorpio Tankers Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STNL",
    "name": "Sentinel Energy Services Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STNLU",
    "name": "Sentinel Energy Services Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STNLW",
    "name": "Sentinel Energy Services Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STON",
    "name": "StoneMor Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STOR",
    "name": "STORE Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STPP",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STRA",
    "name": "Strategic Education, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STRL",
    "name": "Sterling Construction Company Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STRM",
    "name": "Streamline Health Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STRO",
    "name": "Sutro Biopharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STRS",
    "name": "Stratus Properties Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STRT",
    "name": "Strattec Security Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STT",
    "name": "State Street Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STT^C",
    "name": "State Street Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STT^D",
    "name": "State Street Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STT^E",
    "name": "State Street Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STT^G",
    "name": "State Street Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STWD",
    "name": "STARWOOD PROPERTY TRUST, INC.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STX",
    "name": "Seagate Technology PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STXB",
    "name": "Spirit of Texas Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "STZ",
    "name": "Constellation Brands Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "STZ.B",
    "name": "Constellation Brands Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SU",
    "name": "Suncor Energy  Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SUI",
    "name": "Sun Communities, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SUM",
    "name": "Summit Materials, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SUMR",
    "name": "Summer Infant, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SUN",
    "name": "Sunoco LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SUNS",
    "name": "Solar Senior Capital Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SUNW",
    "name": "Sunworks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SUP",
    "name": "Superior Industries International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SUPN",
    "name": "Supernus Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SUPV",
    "name": "Grupo Supervielle S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SURF",
    "name": "Surface Oncology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SUSB",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SUSC",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SVA",
    "name": "Sinovac Biotech, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SVBI",
    "name": "Severn Bancorp Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SVM",
    "name": "Silvercorp Metals Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SVMK",
    "name": "SVMK Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SVRA",
    "name": "Savara, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SVT",
    "name": "Servotronics, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SVVC",
    "name": "Firsthand Technology Value Fund, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SWCH",
    "name": "Switch, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SWI",
    "name": "SolarWinds Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SWIR",
    "name": "Sierra Wireless, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SWJ",
    "name": "Stanley Black & Decker, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SWK",
    "name": "Stanley Black & Decker, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SWKS",
    "name": "Skyworks Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SWM",
    "name": "Schweitzer-Mauduit International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SWN",
    "name": "Southwestern Energy Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SWP",
    "name": "Stanley Black & Decker, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SWX",
    "name": "Southwest Gas Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SWZ",
    "name": "Swiss Helvetia Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SXC",
    "name": "SunCoke Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SXCP",
    "name": "SunCoke Energy Partners, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SXE",
    "name": "Southcross Energy Partners, L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SXI",
    "name": "Standex International Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SXT",
    "name": "Sensient Technologies Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SYBT",
    "name": "Stock Yards Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYBX",
    "name": "Synlogic, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYF",
    "name": "Synchrony Financial",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SYK",
    "name": "Stryker Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SYKE",
    "name": "Sykes Enterprises, Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYMC",
    "name": "Symantec Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYN",
    "name": "Synthetic Biologics, Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "SYNA",
    "name": "Synaptics Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYNC",
    "name": "Synacor, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYNH",
    "name": "Syneos Health, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYNL",
    "name": "Synalloy Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYPR",
    "name": "Sypris Solutions, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYRS",
    "name": "Syros Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "SYX",
    "name": "Systemax Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SYY",
    "name": "Sysco Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "SZC",
    "name": "Cushing Renaissance Fund (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "T",
    "name": "AT&T Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TA",
    "name": "TravelCenters of America LLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TAC",
    "name": "TransAlta Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TACO",
    "name": "Del Taco Restaurants, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TACOW",
    "name": "Del Taco Restaurants, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TACT",
    "name": "TransAct Technologies Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TAHO",
    "name": "Tahoe Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TAIT",
    "name": "Taitron Components Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TAL",
    "name": "TAL Education Group",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TALO",
    "name": "Talos Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TALO.WS",
    "name": "Talos Energy, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TANH",
    "name": "Tantech Holdings Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TANNI",
    "name": "TravelCenters of America LLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TANNL",
    "name": "TravelCenters of America LLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TANNZ",
    "name": "TravelCenters of America LLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TAOP",
    "name": "Taoping Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TAP",
    "name": "Molson Coors Brewing  Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TAP.A",
    "name": "Molson Coors Brewing  Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TAPR",
    "name": "Barclays PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TARO",
    "name": "Taro Pharmaceutical Industries Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TAST",
    "name": "Carrols Restaurant Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TAT",
    "name": "Transatlantic Petroleum Ltd",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TATT",
    "name": "TAT Technologies Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TAYD",
    "name": "Taylor Devices, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TBB",
    "name": "AT&T Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TBBK",
    "name": "The Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TBC",
    "name": "AT&T Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TBI",
    "name": "TrueBlue, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TBIO",
    "name": "Translate Bio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TBK",
    "name": "Triumph Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TBLTU",
    "name": "ToughBuilt Industries, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TBNK",
    "name": "Territorial Bancorp Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TBPH",
    "name": "Theravance Biopharma, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TBRG",
    "name": "Thunder Bridge Acquisition, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TBRGU",
    "name": "Thunder Bridge Acquisition, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TBRGW",
    "name": "Thunder Bridge Acquisition, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TC",
    "name": "TuanChe Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCBI",
    "name": "Texas Capital Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCBIL",
    "name": "Texas Capital Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCBIP",
    "name": "Texas Capital Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCBIW",
    "name": "Texas Capital Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCBK",
    "name": "TriCo Bancshares",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCCO",
    "name": "Technical Communications Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCDA",
    "name": "Tricida, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCF",
    "name": "TCF Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCFC",
    "name": "The Community Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCF^D",
    "name": "TCF Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCGP",
    "name": "The Carlyle Group L.P.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCI",
    "name": "Transcontinental Realty Investors, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCMD",
    "name": "Tactile Systems Technology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCO",
    "name": "Taubman Centers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCO^J",
    "name": "Taubman Centers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCO^K",
    "name": "Taubman Centers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCON",
    "name": "TRACON Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCP",
    "name": "TC PipeLines, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCPC",
    "name": "BlackRock TCP Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCRD",
    "name": "THL Credit, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TCRW",
    "name": "THL Credit, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCRZ",
    "name": "THL Credit, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCS",
    "name": "Container Store (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TCX",
    "name": "Tucows Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TD",
    "name": "Toronto Dominion Bank (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDA",
    "name": "Telephone and Data Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDAC",
    "name": "Trident Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TDACU",
    "name": "Trident Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TDACW",
    "name": "Trident Acquisitions Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TDC",
    "name": "Teradata Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDE",
    "name": "Telephone and Data Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDF",
    "name": "Templeton Dragon Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDG",
    "name": "Transdigm Group Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDI",
    "name": "Telephone and Data Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDIV",
    "name": "First Trust Exchange-Traded Fund VI",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TDJ",
    "name": "Telephone and Data Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDOC",
    "name": "Teladoc Health, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDS",
    "name": "Telephone and Data Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDW",
    "name": "Tidewater Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDW.WS",
    "name": "Tidewater Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TDW.WS.A",
    "name": "Tidewater Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDW.WS.B",
    "name": "Tidewater Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TDY",
    "name": "Teledyne Technologies Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TEAM",
    "name": "Atlassian Corporation Plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TECD",
    "name": "Tech Data Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TECH",
    "name": "Bio-Techne Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TECK",
    "name": "Teck Resources Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TEDU",
    "name": "Tarena International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TEF",
    "name": "Telefonica SA",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TEI",
    "name": "Templeton Emerging Markets Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TEL",
    "name": "TE Connectivity Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TELL",
    "name": "Tellurian Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TEN",
    "name": "Tenneco Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TENB",
    "name": "Tenable Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TENX",
    "name": "Tenax Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TEO",
    "name": "Telecom Argentina Stet - France Telecom S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TER",
    "name": "Teradyne, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TERP",
    "name": "TerraForm Power, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TESS",
    "name": "TESSCO Technologies Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TEUM",
    "name": "Pareteum Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TEVA",
    "name": "Teva Pharmaceutical Industries Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TEX",
    "name": "Terex Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TFSL",
    "name": "TFS Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TFX",
    "name": "Teleflex Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TG",
    "name": "Tredegar Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGA",
    "name": "TransGlobe Energy Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TGB",
    "name": "Taseko Mines Limited",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TGC",
    "name": "Tengasco, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TGE",
    "name": "Tallgrass Energy, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGEN",
    "name": "Tecogen Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TGH",
    "name": "Textainer Group Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGI",
    "name": "Triumph Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGLS",
    "name": "Tecnoglass Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TGNA",
    "name": "TEGNA Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGP",
    "name": "Teekay LNG Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGP^A",
    "name": "Teekay LNG Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGP^B",
    "name": "Teekay LNG Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGS",
    "name": "Transportadora De Gas Sa Ord B",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGT",
    "name": "Target Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TGTX",
    "name": "TG Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "THC",
    "name": "Tenet Healthcare Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "THFF",
    "name": "First Financial Corporation Indiana",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "THG",
    "name": "The Hanover Insurance Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "THGA",
    "name": "The Hanover Insurance Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "THM",
    "name": "International Tower Hill Mines Ltd",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "THO",
    "name": "Thor Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "THQ",
    "name": "Tekla Healthcare Opportunies Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "THR",
    "name": "Thermon Group Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "THRM",
    "name": "Gentherm Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "THS",
    "name": "Treehouse Foods, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "THST",
    "name": "Truett-Hurst, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "THW",
    "name": "Tekla World Healthcare Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TI",
    "name": "Telecom Italia S.P.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TI.A",
    "name": "Telecom Italia S.P.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TIBR",
    "name": "Tiberius Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TIBRU",
    "name": "Tiberius Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TIBRW",
    "name": "Tiberius Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TIER",
    "name": "TIER REIT, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TIF",
    "name": "Tiffany & Co.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TIK",
    "name": "Tel-Instrument Electronics Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TILE",
    "name": "Interface, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TIPT",
    "name": "Tiptree Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TIS",
    "name": "Orchids Paper Products Company",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TISA",
    "name": "Top Image Systems, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TISI",
    "name": "Team, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TITN",
    "name": "Titan Machinery Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TIVO",
    "name": "TiVo Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TJX",
    "name": "TJX Companies, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TK",
    "name": "Teekay Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TKAT",
    "name": "Takung Art Co., Ltd.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TKC",
    "name": "Turkcell Iletisim Hizmetleri AS",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TKKS",
    "name": "TKK Symphony Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TKKSR",
    "name": "TKK Symphony Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TKKSU",
    "name": "TKK Symphony Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TKKSW",
    "name": "TKK Symphony Acquisition Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TKR",
    "name": "Timken Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TLC",
    "name": "Taiwan Liposome Company, Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TLF",
    "name": "Tandy Leather Factory, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TLGT",
    "name": "Teligent, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TLI",
    "name": "Western Asset Corporate Loan Fund Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TLK",
    "name": "PT Telekomunikasi Indonesia, Tbk",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TLND",
    "name": "Talend S.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TLP",
    "name": "TransMontaigne Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TLRA",
    "name": "Telaria, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TLRD",
    "name": "Tailored Brands, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TLRY",
    "name": "Tilray, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TLSA",
    "name": "Tiziana Life Sciences plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TLT",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TLYS",
    "name": "Tilly&#39;s, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TM",
    "name": "Toyota Motor Corp Ltd Ord",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TMCX",
    "name": "Trinity Merger Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TMCXU",
    "name": "Trinity Merger Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TMCXW",
    "name": "Trinity Merger Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TMDI",
    "name": "Titan Medical Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TMHC",
    "name": "Taylor Morrison Home Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TMK",
    "name": "Torchmark Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TMK^C",
    "name": "Torchmark Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TMO",
    "name": "Thermo Fisher Scientific Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TMP",
    "name": "Tompkins Financial Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TMQ",
    "name": "Trilogy Metals Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TMSR",
    "name": "TMSR Holding Company Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TMST",
    "name": "TimkenSteel Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TMUS",
    "name": "T-Mobile US, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TNAV",
    "name": "Telenav, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TNC",
    "name": "Tennant Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TNDM",
    "name": "Tandem Diabetes Care, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TNET",
    "name": "TriNet Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TNK",
    "name": "Teekay Tankers Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TNP",
    "name": "Tsakos Energy Navigation Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TNP^B",
    "name": "Tsakos Energy Navigation Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TNP^C",
    "name": "Tsakos Energy Navigation Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TNP^D",
    "name": "Tsakos Energy Navigation Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TNP^E",
    "name": "Tsakos Energy Navigation Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TNP^F",
    "name": "Tsakos Energy Navigation Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TNXP",
    "name": "Tonix Pharmaceuticals Holding Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TOCA",
    "name": "Tocagen Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TOL",
    "name": "Toll Brothers, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TOO",
    "name": "Teekay Offshore Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TOO^A",
    "name": "Teekay Offshore Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TOO^B",
    "name": "Teekay Offshore Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TOO^E",
    "name": "Teekay Offshore Partners L.P.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TOPS",
    "name": "TOP Ships Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TORC",
    "name": "resTORbio, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TOT",
    "name": "Total S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TOTA",
    "name": "Tottenham Acquisition I Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TOTAR",
    "name": "Tottenham Acquisition I Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TOTAU",
    "name": "Tottenham Acquisition I Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TOTAW",
    "name": "Tottenham Acquisition I Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TOUR",
    "name": "Tuniu Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TOWN",
    "name": "Towne Bank",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TOWR",
    "name": "Tower International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPB",
    "name": "Turning Point Brands, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPC",
    "name": "Tutor Perini Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPCO",
    "name": "Tribune Publishing Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TPGH",
    "name": "TPG Pace Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPGH.U",
    "name": "TPG Pace Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPGH.WS",
    "name": "TPG Pace Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPH",
    "name": "TRI Pointe Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPHS",
    "name": "Trinity Place Holdings Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TPIC",
    "name": "TPI Composites, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TPL",
    "name": "Texas Pacific Land Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPNL",
    "name": "3PEA International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TPR",
    "name": "Tapestry, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPRE",
    "name": "Third Point Reinsurance Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPVG",
    "name": "TriplePoint Venture Growth BDC Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPVY",
    "name": "TriplePoint Venture Growth BDC Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPX",
    "name": "Tempur Sealy International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TPZ",
    "name": "Tortoise Power and Energy Infrastructure Fund, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TQQQ",
    "name": "ProShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TR",
    "name": "Tootsie Roll Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRC",
    "name": "Tejon Ranch Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRCB",
    "name": "Two River Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRCH",
    "name": "Torchlight Energy Resources, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRCO",
    "name": "Tribune Media Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TREC",
    "name": "Trecora Resources",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TREE",
    "name": "LendingTree, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TREX",
    "name": "Trex Company, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRGP",
    "name": "Targa Resources, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRHC",
    "name": "Tabula Rasa HealthCare, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRI",
    "name": "Thomson Reuters Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRIB",
    "name": "Trinity Biotech plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRIL",
    "name": "Trillium Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRIP",
    "name": "TripAdvisor, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRK",
    "name": "Speedway Motorsports, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRMB",
    "name": "Trimble Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRMD",
    "name": "TORM plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRMK",
    "name": "Trustmark Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRMT",
    "name": "Tremont Mortgage Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRN",
    "name": "Trinity Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRNO",
    "name": "Terreno Realty Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRNS",
    "name": "Transcat, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TROV",
    "name": "TrovaGene, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TROW",
    "name": "T. Rowe Price Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TROX",
    "name": "Tronox Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRP",
    "name": "TransCanada Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRPX",
    "name": "Therapix Biosciences Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRQ",
    "name": "Turquoise Hill Resources Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRS",
    "name": "TriMas Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRST",
    "name": "TrustCo Bank Corp NY",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRT",
    "name": "Trio-Tech International",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TRTN",
    "name": "Triton International Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRTX",
    "name": "TPG RE Finance Trust, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRU",
    "name": "TransUnion",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRUE",
    "name": "TrueCar, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRUP",
    "name": "Trupanion, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRV",
    "name": "The Travelers Companies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TRVG",
    "name": "trivago N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRVN",
    "name": "Trevena, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TRX",
    "name": "Tanzanian Royalty Exploration Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TRXC",
    "name": "TransEnterix, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "TS",
    "name": "Tenaris S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TSBK",
    "name": "Timberland Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSC",
    "name": "TriState Capital Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSCAP",
    "name": "TriState Capital Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSCO",
    "name": "Tractor Supply Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSE",
    "name": "Trinseo S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TSEM",
    "name": "Tower Semiconductor Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSG",
    "name": "The Stars Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSI",
    "name": "TCW Strategic Income Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TSLA",
    "name": "Tesla, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSLF",
    "name": "THL Credit Senior Loan Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TSLX",
    "name": "TPG Specialty Lending, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TSM",
    "name": "Taiwan Semiconductor Manufacturing Company Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TSN",
    "name": "Tyson Foods, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TSQ",
    "name": "Townsquare Media, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TSRI",
    "name": "TSR, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSRO",
    "name": "TESARO, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSS",
    "name": "Total System Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TST",
    "name": "TheStreet, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TSU",
    "name": "TIM Participacoes S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TTC",
    "name": "Toro Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TTD",
    "name": "The Trade Desk, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTEC",
    "name": "TTEC Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTEK",
    "name": "Tetra Tech, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTGT",
    "name": "TechTarget, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTI",
    "name": "Tetra Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TTM",
    "name": "Tata Motors Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TTMI",
    "name": "TTM Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTNP",
    "name": "Titan Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTOO",
    "name": "T2 Biosystems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTP",
    "name": "Tortoise Pipeline & Energy Fund, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TTPH",
    "name": "Tetraphase Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTS",
    "name": "Tile Shop Hldgs, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTTN",
    "name": "TigerShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TTWO",
    "name": "Take-Two Interactive Software, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TU",
    "name": "TELUS Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TUES",
    "name": "Tuesday Morning Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TUP",
    "name": "Tupperware Brands Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TUR",
    "name": "iShares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TURN",
    "name": "180 Degree Capital Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TUSA",
    "name": "First Trust Exchange-Traded Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TUSK",
    "name": "Mammoth Energy Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TV",
    "name": "Grupo Televisa S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TVC",
    "name": "Tennessee Valley Authority",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TVE",
    "name": "Tennessee Valley Authority",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TVIX",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TVPT",
    "name": "Travelport Worldwide Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TVTY",
    "name": "Tivity Health, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWI",
    "name": "Titan International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TWIN",
    "name": "Twin Disc, Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWLO",
    "name": "Twilio Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TWLV",
    "name": "Twelve Seas Investment Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWLVR",
    "name": "Twelve Seas Investment Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWLVU",
    "name": "Twelve Seas Investment Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWLVW",
    "name": "Twelve Seas Investment Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWMC",
    "name": "Trans World Entertainment Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWN",
    "name": "Taiwan Fund, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TWNK",
    "name": "Hostess Brands, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWNKW",
    "name": "Hostess Brands, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWO",
    "name": "Two Harbors Investments Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TWO^A",
    "name": "Two Harbors Investments Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TWO^B",
    "name": "Two Harbors Investments Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TWO^C",
    "name": "Two Harbors Investments Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TWO^D",
    "name": "Two Harbors Investments Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TWO^E",
    "name": "Two Harbors Investments Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TWOU",
    "name": "2U, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWST",
    "name": "Twist Bioscience Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TWTR",
    "name": "Twitter, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TX",
    "name": "Ternium S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TXMD",
    "name": "TherapeuticsMD, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TXN",
    "name": "Texas Instruments Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TXRH",
    "name": "Texas Roadhouse, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TXT",
    "name": "Textron Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TY",
    "name": "Tri Continental Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TY^",
    "name": "Tri Continental Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TYG",
    "name": "Tortoise Energy Infrastructure Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TYHT",
    "name": "Shineco, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TYL",
    "name": "Tyler Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "TYME",
    "name": "Tyme Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TYPE",
    "name": "Monotype Imaging Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TZAC",
    "name": "Tenzing Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TZACU",
    "name": "Tenzing Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TZACW",
    "name": "Tenzing Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "TZOO",
    "name": "Travelzoo",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UA",
    "name": "Under Armour, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UAA",
    "name": "Under Armour, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UAE",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UAL",
    "name": "United Continental Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UAMY",
    "name": "United States Antimony Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "UAN",
    "name": "CVR Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UAVS",
    "name": "AgEagle Aerial Systems, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "UBA",
    "name": "Urstadt Biddle Properties Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UBCP",
    "name": "United Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UBFO",
    "name": "United Security Bancshares",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UBIO",
    "name": "ProShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UBNK",
    "name": "United Financial Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UBNT",
    "name": "Ubiquiti Networks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UBOH",
    "name": "United Bancshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UBP",
    "name": "Urstadt Biddle Properties Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UBP^G",
    "name": "Urstadt Biddle Properties Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UBP^H",
    "name": "Urstadt Biddle Properties Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UBS",
    "name": "UBS AG",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UBSH",
    "name": "Union Bankshares Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UBSI",
    "name": "United Bankshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UBX",
    "name": "Unity Biotechnology, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UCBI",
    "name": "United Community Banks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UCFC",
    "name": "United Community Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UCTT",
    "name": "Ultra Clean Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UDBI",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UDR",
    "name": "UDR, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UE",
    "name": "Urban Edge Properties",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UEC",
    "name": "Uranium Energy Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "UEIC",
    "name": "Universal Electronics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UEPS",
    "name": "Net 1 UEPS Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UFAB",
    "name": "Unique Fabricating, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "UFCS",
    "name": "United Fire Group, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UFI",
    "name": "Unifi, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UFPI",
    "name": "Universal Forest Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UFPT",
    "name": "UFP Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UFS",
    "name": "Domtar Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UG",
    "name": "United-Guardian, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UGI",
    "name": "UGI Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UGLD",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UGP",
    "name": "Ultrapar Participacoes S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UHAL",
    "name": "Amerco",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UHS",
    "name": "Universal Health Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UHT",
    "name": "Universal Health Realty Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UIHC",
    "name": "United Insurance Holdings Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UIS",
    "name": "Unisys Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UL",
    "name": "Unilever PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ULBI",
    "name": "Ultralife Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ULH",
    "name": "Universal Logistics Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ULTA",
    "name": "Ulta Beauty, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ULTI",
    "name": "The Ultimate Software Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UMBF",
    "name": "UMB Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UMC",
    "name": "United Microelectronics Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UMH",
    "name": "UMH Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UMH^B",
    "name": "UMH Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UMH^C",
    "name": "UMH Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UMH^D",
    "name": "UMH Properties, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UMPQ",
    "name": "Umpqua Holdings Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UMRX",
    "name": "Unum Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UN",
    "name": "Unilever NV",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UNAM",
    "name": "Unico American Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UNB",
    "name": "Union Bankshares, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UNF",
    "name": "Unifirst Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UNFI",
    "name": "United Natural Foods, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UNH",
    "name": "UnitedHealth Group Incorporated",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UNIT",
    "name": "Uniti Group Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UNM",
    "name": "Unum Group",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UNMA",
    "name": "Unum Group",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UNP",
    "name": "Union Pacific Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UNT",
    "name": "Unit Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UNTY",
    "name": "Unity Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UNVR",
    "name": "Univar Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UONE",
    "name": "Urban One, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UONEK",
    "name": "Urban One, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UPL",
    "name": "Ultra Petroleum Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UPLD",
    "name": "Upland Software, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UPS",
    "name": "United Parcel Service, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UPWK",
    "name": "Upwork Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UQM",
    "name": "UQM Technologies Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "URBN",
    "name": "Urban Outfitters, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "URG",
    "name": "Ur Energy Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "URGN",
    "name": "UroGen Pharma Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "URI",
    "name": "United Rentals, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UROV",
    "name": "Urovant Sciences Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USA",
    "name": "Liberty All-Star Equity Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USAC",
    "name": "USA Compression Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USAK",
    "name": "USA Truck, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USAP",
    "name": "Universal Stainless & Alloy Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USAS",
    "name": "Americas Silver Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "USAT",
    "name": "USA Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USATP",
    "name": "USA Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USAU",
    "name": "U.S. Gold Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USB",
    "name": "U.S. Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USB^A",
    "name": "U.S. Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USB^H",
    "name": "U.S. Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USB^M",
    "name": "U.S. Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USB^O",
    "name": "U.S. Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USB^P",
    "name": "U.S. Bancorp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USCR",
    "name": "U S Concrete, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USDP",
    "name": "USD Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USEG",
    "name": "U.S. Energy Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USFD",
    "name": "US Foods Holding Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USG",
    "name": "USG Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USIG",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USLB",
    "name": "Invesco Exchange-Traded Fund Trust II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USLM",
    "name": "United States Lime & Minerals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USLV",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USM",
    "name": "United States Cellular Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USMC",
    "name": "Principal Exchange-Traded Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USNA",
    "name": "USANA Health Sciences, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USOI",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USPH",
    "name": "U.S. Physical Therapy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "USWS",
    "name": "U.S. Well Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USWSW",
    "name": "U.S. Well Services, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "USX",
    "name": "U.S. Xpress Enterprises, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UTF",
    "name": "Cohen & Steers Infrastructure Fund, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UTG",
    "name": "Reaves Utility Income Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "UTHR",
    "name": "United Therapeutics Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UTI",
    "name": "Universal Technical Institute Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UTL",
    "name": "UNITIL Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UTMD",
    "name": "Utah Medical Products, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UTSI",
    "name": "UTStarcom Holdings Corp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UTX",
    "name": "United Technologies Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UUU",
    "name": "Universal Security Instruments, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "UUUU",
    "name": "Energy Fuels Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "UUUU.WS",
    "name": "Energy Fuels Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "UVE",
    "name": "UNIVERSAL INSURANCE HOLDINGS INC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UVSP",
    "name": "Univest Corporation of Pennsylvania",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UVV",
    "name": "Universal Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UWN",
    "name": "Nevada Gold & Casinos, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "UXIN",
    "name": "Uxin Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "UZA",
    "name": "United States Cellular Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UZB",
    "name": "United States Cellular Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "UZC",
    "name": "United States Cellular Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "V",
    "name": "Visa Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VAC",
    "name": "Marriot Vacations Worldwide Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VALE",
    "name": "VALE S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VALU",
    "name": "Value Line, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VALX",
    "name": "ETF Series Solutions",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VAM",
    "name": "The Vivaldi Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VAPO",
    "name": "Vapotherm, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VAR",
    "name": "Varian Medical Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VBF",
    "name": "Invesco Bond Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VBFC",
    "name": "Village Bank and Trust Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VBIV",
    "name": "VBI Vaccines, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VBLT",
    "name": "Vascular Biogenics Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VBND",
    "name": "ETF Series Solutions Trust Vident Core U.S. Bond Strategy Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VBTX",
    "name": "Veritex Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VC",
    "name": "Visteon Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VCEL",
    "name": "Vericel Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VCF",
    "name": "Delaware Investments Colorado Municipal Income Fund, Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "VCIT",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VCLT",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VCNX",
    "name": "Vaccinex, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VCRA",
    "name": "Vocera Communications, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VCSH",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VCTR",
    "name": "Victory Capital Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VCV",
    "name": "Invesco California Value Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VCYT",
    "name": "Veracyte, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VEAC",
    "name": "Vantage Energy Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VEACU",
    "name": "Vantage Energy Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VEACW",
    "name": "Vantage Energy Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VEC",
    "name": "Vectrus, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VECO",
    "name": "Veeco Instruments Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VEDL",
    "name": "Vedanta  Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VEEV",
    "name": "Veeva Systems Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VEON",
    "name": "VEON Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VER",
    "name": "VEREIT Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VER^F",
    "name": "VEREIT Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VERI",
    "name": "Veritone, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VERU",
    "name": "Veru Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VET",
    "name": "Vermilion Energy Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VETS",
    "name": "Pacer Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VFC",
    "name": "V.F. Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VFL",
    "name": "Delaware Investments Florida Insured Municipal Income Fund",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "VG",
    "name": "Vonage Holdings Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VGI",
    "name": "Virtus Global Multi-Sector Income Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VGIT",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VGLT",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VGM",
    "name": "Invesco Trust for Investment Grade Municipals",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VGR",
    "name": "Vector Group Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VGSH",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VGZ",
    "name": "Vista Gold Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "VHC",
    "name": "VirnetX Holding Corp",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "VHI",
    "name": "Valhi, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VIA",
    "name": "Viacom Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VIAB",
    "name": "Viacom Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VIAV",
    "name": "Viavi Solutions Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VICI",
    "name": "VICI Properties Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VICL",
    "name": "Vical Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VICR",
    "name": "Vicor Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VIDI",
    "name": "ETF Series Solutions Trust Vident International Equity Fund",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VIGI",
    "name": "Vanguard Whitehall Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VIIX",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VIOT",
    "name": "Viomi Technology Co., Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VIPS",
    "name": "Vipshop Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VIRC",
    "name": "Virco Manufacturing Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VIRT",
    "name": "Virtu Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VISI",
    "name": "Volt Information Sciences, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "VIV",
    "name": "Telefonica Brasil S.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VIVE",
    "name": "Viveve Medical, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VIVO",
    "name": "Meridian Bioscience Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VJET",
    "name": "voxeljet AG",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VKI",
    "name": "Invesco Advantage Municipal Income Trust II",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "VKQ",
    "name": "Invesco Municipal Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VKTX",
    "name": "Viking Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VKTXW",
    "name": "Viking Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VLGEA",
    "name": "Village Super Market, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VLO",
    "name": "Valero Energy Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VLP",
    "name": "Valero Energy Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VLRS",
    "name": "Controladora Vuela Compania de Aviacion, S.A.B. de C.V.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VLRX",
    "name": "Valeritas Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VLT",
    "name": "Invesco High Income Trust II",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VLY",
    "name": "Valley National Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VLYPO",
    "name": "Valley National Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VLYPP",
    "name": "Valley National Bancorp",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VMBS",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VMC",
    "name": "Vulcan Materials Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VMI",
    "name": "Valmont Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VMM",
    "name": "Delaware Investments Minnesota Municipal Income Fund II, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "VMO",
    "name": "Invesco Municipal Opportunity Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VMW",
    "name": "Vmware, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VNCE",
    "name": "Vince Holding Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VNDA",
    "name": "Vanda Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VNE",
    "name": "Veoneer, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VNET",
    "name": "21Vianet Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VNO",
    "name": "Vornado Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VNO^K",
    "name": "Vornado Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VNO^L",
    "name": "Vornado Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VNOM",
    "name": "Viper Energy Partners LP",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VNO^M",
    "name": "Vornado Realty Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VNQI",
    "name": "Vanguard International Equity Index Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VNRX",
    "name": "VolitionRX Limited",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "VNTR",
    "name": "Venator Materials PLC",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VOC",
    "name": "VOC Energy Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VOD",
    "name": "Vodafone Group Plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VONE",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VONG",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VONV",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VOXX",
    "name": "VOXX International Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VOYA",
    "name": "Voya Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VPG",
    "name": "Vishay Precision Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VPV",
    "name": "Invesco Pennsylvania Value Municipal Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VRA",
    "name": "Vera Bradley, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRAY",
    "name": "ViewRay, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRCA",
    "name": "Verrica Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VREX",
    "name": "Varex Imaging Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRIG",
    "name": "Invesco Actively Managed Exchange-Traded Fund Trus",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRML",
    "name": "Vermillion, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRNA",
    "name": "Verona Pharma plc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRNS",
    "name": "Varonis Systems, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRNT",
    "name": "Verint Systems Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRRM",
    "name": "Verra Mobility Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRRMW",
    "name": "Verra Mobility Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRS",
    "name": "Verso Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VRSK",
    "name": "Verisk Analytics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRSN",
    "name": "VeriSign, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRTS",
    "name": "Virtus Investment Partners, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRTSP",
    "name": "Virtus Investment Partners, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRTU",
    "name": "Virtusa Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VRTV",
    "name": "Veritiv Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VRTX",
    "name": "Vertex Pharmaceuticals Incorporated",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VSAT",
    "name": "ViaSat, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VSDA",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VSEC",
    "name": "VSE Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VSH",
    "name": "Vishay Intertechnology, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VSI",
    "name": "Vitamin Shoppe, Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VSLR",
    "name": "Vivint Solar, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VSM",
    "name": "Versum Materials, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VSMV",
    "name": "Victory Portfolios II",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VST",
    "name": "Vistra Energy Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VSTM",
    "name": "Verastem, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VSTO",
    "name": "Vista Outdoor Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VST.WS.A",
    "name": "Vistra Energy Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VTA",
    "name": "Invesco Credit Opportunities Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VTC",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTGN",
    "name": "VistaGen Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTHR",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTIP",
    "name": "Vanguard Malvern Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTIQ",
    "name": "VectoIQ Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTIQU",
    "name": "VectoIQ Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTIQW",
    "name": "VectoIQ Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTL",
    "name": "Vital Therapies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTN",
    "name": "Invesco Trust  for Investment Grade New York Municipal",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VTNR",
    "name": "Vertex Energy, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTR",
    "name": "Ventas, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VTRB",
    "name": "Ventas Realty, Limited Partnership // Ventas Capital Corporati",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VTSI",
    "name": "VirTra, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTVT",
    "name": "vTv Therapeutics Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTWG",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTWO",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VTWV",
    "name": "Vanguard Scottsdale Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VUSE",
    "name": "ETF Series Solutions Trust Vident Core US Equity ETF",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VUZI",
    "name": "Vuzix Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VVC",
    "name": "Vectren Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VVI",
    "name": "Viad Corp",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VVPR",
    "name": "VivoPower International PLC",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VVR",
    "name": "Invesco Senior Income Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VVUS",
    "name": "VIVUS, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VVV",
    "name": "Valvoline Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VWOB",
    "name": "Vanguard Whitehall Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VXRT",
    "name": "Vaxart, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VXUS",
    "name": "Vanguard STAR Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VYGR",
    "name": "Voyager Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VYMI",
    "name": "Vanguard Whitehall Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "VZ",
    "name": "Verizon Communications Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "VZA",
    "name": "Verizon Communications Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "W",
    "name": "Wayfair Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WAAS",
    "name": "AquaVenture Holdings Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WAB",
    "name": "Westinghouse Air Brake Technologies Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WABC",
    "name": "Westamerica Bancorporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WAFD",
    "name": "Washington Federal, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WAGE",
    "name": "WageWorks, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WAIR",
    "name": "Wesco Aircraft Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WAL",
    "name": "Western Alliance Bancorporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WALA",
    "name": "Western Alliance Bancorporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WASH",
    "name": "Washington Trust Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WAT",
    "name": "Waters Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WATT",
    "name": "Energous Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WB",
    "name": "Weibo Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WBA",
    "name": "Walgreens Boots Alliance, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WBAI",
    "name": "500.com Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WBC",
    "name": "Wabco Holdings Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WBK",
    "name": "Westpac Banking Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WBND",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WBS",
    "name": "Webster Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WBS^F",
    "name": "Webster Financial Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WBT",
    "name": "Welbilt, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WCC",
    "name": "WESCO International, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WCFB",
    "name": "WCF Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WCG",
    "name": "WellCare Health Plans, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WCN",
    "name": "Waste Connections, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WD",
    "name": "Walker & Dunlop, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WDAY",
    "name": "Workday, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WDC",
    "name": "Western Digital Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WDFC",
    "name": "WD-40 Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WDR",
    "name": "Waddell & Reed Financial, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WEA",
    "name": "Western Asset Bond Fund",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WEBK",
    "name": "Wellesley Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WEC",
    "name": "WEC Energy Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WEI",
    "name": "Weidai Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WELL",
    "name": "Welltower Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WELL^I",
    "name": "Welltower Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WEN",
    "name": "Wendy&#39;s Company (The)",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WERN",
    "name": "Werner Enterprises, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WES",
    "name": "Western Gas Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WETF",
    "name": "WisdomTree Investments, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WEX",
    "name": "WEX Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WEYS",
    "name": "Weyco Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WF",
    "name": "Woori Bank",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^L",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^N",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^O",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^P",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^Q",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^R",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^T",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^V",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^W",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^X",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFC^Y",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFE^A",
    "name": "Wells Fargo & Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WFT",
    "name": "Weatherford International plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WGO",
    "name": "Winnebago Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WGP",
    "name": "Western Gas Equity Partners, LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WH",
    "name": "Wyndham Hotels & Resorts, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WHD",
    "name": "Cactus, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WHF",
    "name": "WhiteHorse Finance, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WHFBZ",
    "name": "WhiteHorse Finance, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WHG",
    "name": "Westwood Holdings Group Inc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WHLM",
    "name": "Wilhelmina International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WHLR",
    "name": "Wheeler Real Estate Investment Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WHLRD",
    "name": "Wheeler Real Estate Investment Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WHLRP",
    "name": "Wheeler Real Estate Investment Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WHLRW",
    "name": "Wheeler Real Estate Investment Trust, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WHR",
    "name": "Whirlpool Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WIA",
    "name": "Western Asset/Claymore U.S. Treasury Inflation Prot Secs Fd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WIFI",
    "name": "Boingo Wireless, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WILC",
    "name": "G. Willi-Food International,  Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WIN",
    "name": "Windstream Holdings, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WINA",
    "name": "Winmark Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WING",
    "name": "Wingstop Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WINS",
    "name": "Wins Finance Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WIRE",
    "name": "Encore Wire Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WISA",
    "name": "Summit Wireless Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WIT",
    "name": "Wipro Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WIW",
    "name": "Western Asset/Claymore U.S Treasury Inflation Prot Secs Fd 2",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WIX",
    "name": "Wix.com Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WK",
    "name": "Workiva Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WKHS",
    "name": "Workhorse Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WLDN",
    "name": "Willdan Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WLFC",
    "name": "Willis Lease Finance Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WLH",
    "name": "Lyon William Homes",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WLK",
    "name": "Westlake Chemical Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WLKP",
    "name": "Westlake Chemical Partners LP",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WLL",
    "name": "Whiting Petroleum Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WLTW",
    "name": "Willis Towers Watson Public Limited Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WM",
    "name": "Waste Management, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WMB",
    "name": "Williams Companies, Inc. (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WMC",
    "name": "Western Asset Mortgage Capital Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WMGI",
    "name": "Wright Medical Group N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WMGIZ",
    "name": "Wright Medical Group N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WMK",
    "name": "Weis Markets, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WMS",
    "name": "Advanced Drainage Systems, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WMT",
    "name": "Walmart Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WNC",
    "name": "Wabash National Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WNEB",
    "name": "Western New England Bancorp, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WNS",
    "name": "WNS (Holdings) Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WOOD",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WOR",
    "name": "Worthington Industries, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WOW",
    "name": "WideOpenWest, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WP",
    "name": "Worldpay, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WPC",
    "name": "W.P. Carey Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WPG",
    "name": "Washington Prime Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WPG^H",
    "name": "Washington Prime Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WPG^I",
    "name": "Washington Prime Group Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WPM",
    "name": "Wheaton Precious Metals Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WPP",
    "name": "WPP plc",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WPRT",
    "name": "Westport Fuel Systems Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WPX",
    "name": "WPX Energy, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRB",
    "name": "W.R. Berkley Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRB^B",
    "name": "W.R. Berkley Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRB^C",
    "name": "W.R. Berkley Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRB^D",
    "name": "W.R. Berkley Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRB^E",
    "name": "W.R. Berkley Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRD",
    "name": "WildHorse Resource Development Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRE",
    "name": "Washington Real Estate Investment Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRI",
    "name": "Weingarten Realty Investors",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRK",
    "name": "Westrock Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WRLD",
    "name": "World Acceptance Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WRLS",
    "name": "Pensare Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WRLSR",
    "name": "Pensare Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WRLSU",
    "name": "Pensare Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WRLSW",
    "name": "Pensare Acquisition Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WRN",
    "name": "Western Copper and Gold Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "WSBC",
    "name": "WesBanco, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WSBF",
    "name": "Waterstone Financial, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WSC",
    "name": "WillScot Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WSFS",
    "name": "WSFS Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WSM",
    "name": "Williams-Sonoma, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WSO",
    "name": "Watsco, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WSO.B",
    "name": "Watsco, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WSR",
    "name": "Whitestone REIT",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WST",
    "name": "West Pharmaceutical Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WSTG",
    "name": "Wayside Technology Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WSTL",
    "name": "Westell Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WTBA",
    "name": "West Bancorporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WTFC",
    "name": "Wintrust Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WTFCM",
    "name": "Wintrust Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WTFCW",
    "name": "Wintrust Financial Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WTI",
    "name": "W&T Offshore, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WTM",
    "name": "White Mountains Insurance Group, Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WTR",
    "name": "Aqua America, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WTRH",
    "name": "Waitr Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WTRHW",
    "name": "Waitr Holdings Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WTS",
    "name": "Watts Water Technologies, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WTT",
    "name": "Wireless Telecom Group,  Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "WTTR",
    "name": "Select Energy Services, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WTW",
    "name": "Weight Watchers International Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WU",
    "name": "Western Union Company (The)",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WUBA",
    "name": "58.com Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WVE",
    "name": "WAVE Life Sciences Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WVFC",
    "name": "WVS Financial Corp.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WVVI",
    "name": "Willamette Valley Vineyards, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WVVIP",
    "name": "Willamette Valley Vineyards, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WWD",
    "name": "Woodward, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WWE",
    "name": "World Wrestling Entertainment, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WWR",
    "name": "Westwater Resources, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WWW",
    "name": "Wolverine World Wide, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WY",
    "name": "Weyerhaeuser Company",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WYND",
    "name": "Wyndham Destinations, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "WYNN",
    "name": "Wynn Resorts, Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "WYY",
    "name": "WidePoint Corporation",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "X",
    "name": "United States Steel Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XAN",
    "name": "Exantas Capital Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XAN^C",
    "name": "Exantas Capital Corp.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XBIO",
    "name": "Xenetic Biosciences, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XBIT",
    "name": "XBiotech Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XEC",
    "name": "Cimarex Energy Co",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XEL",
    "name": "Xcel Energy Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XELA",
    "name": "Exela Technologies, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XELB",
    "name": "Xcel Brands, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XENE",
    "name": "Xenon Pharmaceuticals Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XENT",
    "name": "Intersect ENT, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XERS",
    "name": "Xeris Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XFLT",
    "name": "XAI Octagon Floating Rate & Alternative Income Term Trust",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XGTI",
    "name": "XG Technology, Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XHR",
    "name": "Xenia Hotels & Resorts, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XIN",
    "name": "Xinyuan Real Estate Co Ltd",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XLNX",
    "name": "Xilinx, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XLRN",
    "name": "Acceleron Pharma Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XNCR",
    "name": "Xencor, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XNET",
    "name": "Xunlei Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XOG",
    "name": "Extraction Oil & Gas, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XOM",
    "name": "Exxon Mobil Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XOMA",
    "name": "XOMA Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XON",
    "name": "Intrexon Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XONE",
    "name": "The ExOne Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XOXO",
    "name": "XO Group, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XPER",
    "name": "Xperi Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XPL",
    "name": "Solitario Zinc Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "XPO",
    "name": "XPO Logistics, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XRAY",
    "name": "DENTSPLY SIRONA Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XRF",
    "name": "China Rapid Finance Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XRX",
    "name": "Xerox Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XSPA",
    "name": "XpresSpa Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XT",
    "name": "iShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XTLB",
    "name": "XTL Biopharmaceuticals Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "XTNT",
    "name": "Xtant Medical Holdings, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "XXII",
    "name": "22nd Century Group, Inc",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "XYF",
    "name": "X Financial",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "XYL",
    "name": "Xylem Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "Y",
    "name": "Alleghany Corporation",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "YECO",
    "name": "Yulong Eco-Materials Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YELP",
    "name": "Yelp Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "YETI",
    "name": "YETI Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "YEXT",
    "name": "Yext, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "YGYI",
    "name": "Youngevity International, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YI",
    "name": "111, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YIN",
    "name": "Yintech Investment Holdings Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YLCO",
    "name": "Global X Funds",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YLDE",
    "name": "Legg Mason ETF Investment Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YMAB",
    "name": "Y-mAbs Therapeutics, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YNDX",
    "name": "Yandex N.V.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YOGA",
    "name": "YogaWorks, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YORW",
    "name": "The York Water Company",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YPF",
    "name": "YPF Sociedad Anonima",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "YRCW",
    "name": "YRC Worldwide, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YRD",
    "name": "Yirendai Ltd.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "YRIV",
    "name": "Yangtze River Port and Logistics Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YTEN",
    "name": "Yield10 Bioscience, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YTRA",
    "name": "Yatra Online, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YUM",
    "name": "Yum! Brands, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "YUMA",
    "name": "Yuma Energy, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "YUMC",
    "name": "Yum China Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "YVR",
    "name": "Liquid Media Group Ltd.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "YY",
    "name": "YY Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "Z",
    "name": "Zillow Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZAGG",
    "name": "ZAGG Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZAYO",
    "name": "Zayo Group Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZB^A",
    "name": "Zions Bancorporation N.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZB^G",
    "name": "Zions Bancorporation N.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZBH",
    "name": "Zimmer Biomet Holdings, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZB^H",
    "name": "Zions Bancorporation N.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZBIO",
    "name": "ProShares Trust",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZBK",
    "name": "Zions Bancorporation N.A.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZBRA",
    "name": "Zebra Technologies Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZDGE",
    "name": "Zedge, Inc.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ZEAL",
    "name": "Zealand Pharma A/S",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZEN",
    "name": "Zendesk, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZEUS",
    "name": "Olympic Steel, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZF",
    "name": "Virtus Total Return Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZFGN",
    "name": "Zafgen, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZG",
    "name": "Zillow Group, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZGNX",
    "name": "Zogenix, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZION",
    "name": "Zions Bancorporation N.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZIONW",
    "name": "Zions Bancorporation N.A.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZIOP",
    "name": "ZIOPHARM Oncology Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZIV",
    "name": "Credit Suisse AG",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZIXI",
    "name": "Zix Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZKIN",
    "name": "ZK International Group Co., Ltd",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZLAB",
    "name": "Zai Lab Limited",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZN",
    "name": "Zion Oil & Gas Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZNGA",
    "name": "Zynga Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZNH",
    "name": "China Southern Airlines Company Limited",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZNWAA",
    "name": "Zion Oil & Gas Inc",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZOM",
    "name": "Zomedica Pharmaceuticals Corp.",
    "is_etf": null,
    "exchange": "AMEX"
  },
  {
    "abbr": "ZS",
    "name": "Zscaler, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZSAN",
    "name": "Zosano Pharma Corporation",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZTEST",
    "name": "BATS BZX Exchange",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZTO",
    "name": "ZTO Express (Cayman) Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZTR",
    "name": "Virtus Global Dividend & Income Fund Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZTS",
    "name": "Zoetis Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZUMZ",
    "name": "Zumiez Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  },
  {
    "abbr": "ZUO",
    "name": "Zuora, Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZYME",
    "name": "Zymeworks Inc.",
    "is_etf": null,
    "exchange": "NYSE"
  },
  {
    "abbr": "ZYNE",
    "name": "Zynerba Pharmaceuticals, Inc.",
    "is_etf": null,
    "exchange": "NASDAQ"
  }
]
},{}],4:[function(require,module,exports){
'use strict';

module.exports = require('./Autocomplete');

},{"./Autocomplete":2}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.matchStateToTerm = matchStateToTerm;
exports.matchStateToTermWithHeaders = matchStateToTermWithHeaders;
exports.sortStates = sortStates;
exports.fakeRequest = fakeRequest;
exports.fakeCategorizedRequest = fakeCategorizedRequest;
exports.getStates = getStates;
exports.getCategorizedStates = getCategorizedStates;

var _csvjson = require('./csvjson.json');

var _csvjson2 = _interopRequireDefault(_csvjson);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function matchStateToTerm(state, value) {
  return state.name.toLowerCase().indexOf(value.toLowerCase()) !== -1 || state.abbr.toLowerCase().indexOf(value.toLowerCase()) !== -1;
}

function matchStateToTermWithHeaders(state, value) {
  return state.header || state.name.toLowerCase().indexOf(value.toLowerCase()) !== -1 || state.abbr.toLowerCase().indexOf(value.toLowerCase()) !== -1;
}

/**
 * An example of how to implement a relevancy-based sorting method. States are
 * sorted based on the location of the match - For example, a search for "or"
 * will return "Oregon" before "North Carolina" even though "North Carolina"
 * would normally sort above Oregon. Strings where the match is in the same
 * location (or there is no match) will be sorted alphabetically - For example,
 * a search for "or" would return "North Carolina" above "North Dakota".
 */
function sortStates(a, b, value) {
  var aLower = a.name.toLowerCase();
  var bLower = b.name.toLowerCase();
  var valueLower = value.toLowerCase();
  var queryPosA = aLower.indexOf(valueLower);
  var queryPosB = bLower.indexOf(valueLower);
  if (queryPosA !== queryPosB) {
    return queryPosA - queryPosB;
  }
  return aLower < bLower ? -1 : 1;
}

function fakeRequest(value, cb) {
  console.log("inside fake request");
  //fetch('http://d.yimg.com/autoc.finance.yahoo.com/autoc?query=yhoo&region=1&lang=en&callback=YAHOO.Finance.SymbolSuggest.ssCallback')
  //	fetch('http://d.yimg.com/autoc.finance.yahoo.com/autoc?query=yhoo&region=1&lang=en&callback=YAHOO.Finance.SymbolSuggest.ssCallback', {
  // crossDomain:true,
  //	  method: 'GET',
  //	  mode: 'no-cors',
  //	  headers: {'Content-Type':'application/json', 'Access-Control-Allow-Origin': 'http://[::]:8080'},
  //	})
  //	.then(response => response.json())
  //	.then(jsondata => console.log(jsondata))
  //	.then(response => console.log(response))
  //	  console.log(getStates());	
  return setTimeout(cb, 500, value ? getStates().filter(function (state) {
    return matchStateToTerm(state, value);
  }) : getStates());
}

function fakeCategorizedRequest(value, cb) {
  setTimeout(cb, 500, value ? getCategorizedStates().filter(function (state) {
    return matchStateToTermWithHeaders(state, value);
  }) : getCategorizedStates());
}

function getStates() {
  return _csvjson2.default;
}

/*
export function getStates() {
  return [
    { abbr: 'AL', name: 'Alabama' },
    { abbr: 'AK', name: 'Alaska' },
    { abbr: 'AZ', name: 'Arizona' },
    { abbr: 'AR', name: 'Arkansas' },
    { abbr: 'CA', name: 'California' },
    { abbr: 'CO', name: 'Colorado' },
    { abbr: 'CT', name: 'Connecticut' },
    { abbr: 'DE', name: 'Delaware' },
    { abbr: 'FL', name: 'Florida' },
    { abbr: 'GA', name: 'Georgia' },
    { abbr: 'HI', name: 'Hawaii' },
    { abbr: 'ID', name: 'Idaho' },
    { abbr: 'IL', name: 'Illinois' },
    { abbr: 'IN', name: 'Indiana' },
    { abbr: 'IA', name: 'Iowa' },
    { abbr: 'KS', name: 'Kansas' },
    { abbr: 'KY', name: 'Kentucky' },
    { abbr: 'LA', name: 'Louisiana' },
    { abbr: 'ME', name: 'Maine' },
    { abbr: 'MD', name: 'Maryland' },
    { abbr: 'MA', name: 'Massachusetts' },
    { abbr: 'MI', name: 'Michigan' },
    { abbr: 'MN', name: 'Minnesota' },
    { abbr: 'MS', name: 'Mississippi' },
    { abbr: 'MO', name: 'Missouri' },
    { abbr: 'MT', name: 'Montana' },
    { abbr: 'NE', name: 'Nebraska' },
    { abbr: 'NV', name: 'Nevada' },
    { abbr: 'NH', name: 'New Hampshire' },
    { abbr: 'NJ', name: 'New Jersey' },
    { abbr: 'NM', name: 'New Mexico' },
    { abbr: 'NY', name: 'New York' },
    { abbr: 'NC', name: 'North Carolina' },
    { abbr: 'ND', name: 'North Dakota' },
    { abbr: 'OH', name: 'Ohio' },
    { abbr: 'OK', name: 'Oklahoma' },
    { abbr: 'OR', name: 'Oregon' },
    { abbr: 'PA', name: 'Pennsylvania' },
    { abbr: 'RI', name: 'Rhode Island' },
    { abbr: 'SC', name: 'South Carolina' },
    { abbr: 'SD', name: 'South Dakota' },
    { abbr: 'TN', name: 'Tennessee' },
    { abbr: 'TX', name: 'Texas' },
    { abbr: 'UT', name: 'Utah' },
    { abbr: 'VT', name: 'Vermont' },
    { abbr: 'VA', name: 'Virginia' },
    { abbr: 'WA', name: 'Washington' },
    { abbr: 'WV', name: 'West Virginia' },
    { abbr: 'WI', name: 'Wisconsin' },
    { abbr: 'WY', name: 'Wyoming' }
  ]
}
*/

function getCategorizedStates() {
  return [{ header: 'West' }, { abbr: 'AZ', name: 'Arizona' }, { abbr: 'CA', name: 'California' }, { abbr: 'CO', name: 'Colorado' }, { abbr: 'ID', name: 'Idaho' }, { abbr: 'MT', name: 'Montana' }, { abbr: 'NV', name: 'Nevada' }, { abbr: 'NM', name: 'New Mexico' }, { abbr: 'OK', name: 'Oklahoma' }, { abbr: 'OR', name: 'Oregon' }, { abbr: 'TX', name: 'Texas' }, { abbr: 'UT', name: 'Utah' }, { abbr: 'WA', name: 'Washington' }, { abbr: 'WY', name: 'Wyoming' }, { header: 'Southeast' }, { abbr: 'AL', name: 'Alabama' }, { abbr: 'AR', name: 'Arkansas' }, { abbr: 'FL', name: 'Florida' }, { abbr: 'GA', name: 'Georgia' }, { abbr: 'KY', name: 'Kentucky' }, { abbr: 'LA', name: 'Louisiana' }, { abbr: 'MS', name: 'Mississippi' }, { abbr: 'NC', name: 'North Carolina' }, { abbr: 'SC', name: 'South Carolina' }, { abbr: 'TN', name: 'Tennessee' }, { abbr: 'VA', name: 'Virginia' }, { abbr: 'WV', name: 'West Virginia' }, { header: 'Midwest' }, { abbr: 'IL', name: 'Illinois' }, { abbr: 'IN', name: 'Indiana' }, { abbr: 'IA', name: 'Iowa' }, { abbr: 'KS', name: 'Kansas' }, { abbr: 'MI', name: 'Michigan' }, { abbr: 'MN', name: 'Minnesota' }, { abbr: 'MO', name: 'Missouri' }, { abbr: 'NE', name: 'Nebraska' }, { abbr: 'OH', name: 'Ohio' }, { abbr: 'ND', name: 'North Dakota' }, { abbr: 'SD', name: 'South Dakota' }, { abbr: 'WI', name: 'Wisconsin' }, { header: 'Northeast' }, { abbr: 'CT', name: 'Connecticut' }, { abbr: 'DE', name: 'Delaware' }, { abbr: 'ME', name: 'Maine' }, { abbr: 'MD', name: 'Maryland' }, { abbr: 'MA', name: 'Massachusetts' }, { abbr: 'NH', name: 'New Hampshire' }, { abbr: 'NJ', name: 'New Jersey' }, { abbr: 'NY', name: 'New York' }, { abbr: 'PA', name: 'Pennsylvania' }, { abbr: 'RI', name: 'Rhode Island' }, { abbr: 'VT', name: 'Vermont' }, { header: 'Pacific' }, { abbr: 'AK', name: 'Alaska' }, { abbr: 'HI', name: 'Hawaii' }];
}

},{"./csvjson.json":3}],6:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyObject = require('fbjs/lib/emptyObject');
var _invariant = require('fbjs/lib/invariant');

if ("production" !== 'production') {
  var warning = require('fbjs/lib/warning');
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if ("production" !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillMount`.
     *
     * @optional
     */
    UNSAFE_componentWillMount: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillReceiveProps`.
     *
     * @optional
     */
    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Replacement for (deprecated) `componentWillUpdate`.
     *
     * @optional
     */
    UNSAFE_componentWillUpdate: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Similar to ReactClassInterface but for static methods.
   */
  var ReactClassStaticInterface = {
    /**
     * This method is invoked after a component is instantiated and when it
     * receives new props. Return an object to update state in response to
     * prop changes. Return null to indicate no change to state.
     *
     * If an object is returned, its keys will be merged into the existing state.
     *
     * @return {object || null}
     * @optional
     */
    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if ("production" !== 'production') {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if ("production" !== 'production') {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if ("production" !== 'production') {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if ("production" !== 'production') {
          warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if ("production" !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if ("production" !== 'production') {
          warning(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    _invariant(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    _invariant(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if ("production" !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }

    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isAlreadyDefined = name in Constructor;
      if (isAlreadyDefined) {
        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
          ? ReactClassStaticInterface[name]
          : null;

        _invariant(
          specPolicy === 'DEFINE_MANY_MERGED',
          'ReactClass: You are attempting to define ' +
            '`%s` on your component more than once. This conflict may be ' +
            'due to a mixin.',
          name
        );

        Constructor[name] = createMergedResultFunction(Constructor[name], property);

        return;
      }

      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if ("production" !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if ("production" !== 'production') {
            warning(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          if ("production" !== 'production') {
            warning(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if ("production" !== 'production') {
        warning(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  _assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if ("production" !== 'production') {
        warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("production" !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if ("production" !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    if ("production" !== 'production') {
      warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.UNSAFE_componentWillRecieveProps,
        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
          'Did you mean UNSAFE_componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;

},{"fbjs/lib/emptyObject":18,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"object-assign":33}],7:[function(require,module,exports){
module.exports = require('./lib/dom-scroll-into-view');

},{"./lib/dom-scroll-into-view":8}],8:[function(require,module,exports){
var util = require('./util');

function scrollIntoView(elem, container, config) {
  config = config || {};
  // document 归一化到 window
  if (container.nodeType === 9) {
    container = util.getWindow(container);
  }

  var allowHorizontalScroll = config.allowHorizontalScroll;
  var onlyScrollIfNeeded = config.onlyScrollIfNeeded;
  var alignWithTop = config.alignWithTop;
  var alignWithLeft = config.alignWithLeft;

  allowHorizontalScroll = allowHorizontalScroll === undefined ? true : allowHorizontalScroll;

  var isWin = util.isWindow(container);
  var elemOffset = util.offset(elem);
  var eh = util.outerHeight(elem);
  var ew = util.outerWidth(elem);
  var containerOffset, ch, cw, containerScroll,
    diffTop, diffBottom, win,
    winScroll, ww, wh;

  if (isWin) {
    win = container;
    wh = util.height(win);
    ww = util.width(win);
    winScroll = {
      left: util.scrollLeft(win),
      top: util.scrollTop(win)
    };
    // elem 相对 container 可视视窗的距离
    diffTop = {
      left: elemOffset.left - winScroll.left,
      top: elemOffset.top - winScroll.top
    };
    diffBottom = {
      left: elemOffset.left + ew - (winScroll.left + ww),
      top: elemOffset.top + eh - (winScroll.top + wh)
    };
    containerScroll = winScroll;
  } else {
    containerOffset = util.offset(container);
    ch = container.clientHeight;
    cw = container.clientWidth;
    containerScroll = {
      left: container.scrollLeft,
      top: container.scrollTop
    };
    // elem 相对 container 可视视窗的距离
    // 注意边框, offset 是边框到根节点
    diffTop = {
      left: elemOffset.left - (containerOffset.left +
      (parseFloat(util.css(container, 'borderLeftWidth')) || 0)),
      top: elemOffset.top - (containerOffset.top +
      (parseFloat(util.css(container, 'borderTopWidth')) || 0))
    };
    diffBottom = {
      left: elemOffset.left + ew -
      (containerOffset.left + cw +
      (parseFloat(util.css(container, 'borderRightWidth')) || 0)),
      top: elemOffset.top + eh -
      (containerOffset.top + ch +
      (parseFloat(util.css(container, 'borderBottomWidth')) || 0))
    };
  }

  if (diffTop.top < 0 || diffBottom.top > 0) {
    // 强制向上
    if (alignWithTop === true) {
      util.scrollTop(container, containerScroll.top + diffTop.top);
    } else if (alignWithTop === false) {
      util.scrollTop(container, containerScroll.top + diffBottom.top);
    } else {
      // 自动调整
      if (diffTop.top < 0) {
        util.scrollTop(container, containerScroll.top + diffTop.top);
      } else {
        util.scrollTop(container, containerScroll.top + diffBottom.top);
      }
    }
  } else {
    if (!onlyScrollIfNeeded) {
      alignWithTop = alignWithTop === undefined ? true : !!alignWithTop;
      if (alignWithTop) {
        util.scrollTop(container, containerScroll.top + diffTop.top);
      } else {
        util.scrollTop(container, containerScroll.top + diffBottom.top);
      }
    }
  }

  if (allowHorizontalScroll) {
    if (diffTop.left < 0 || diffBottom.left > 0) {
      // 强制向上
      if (alignWithLeft === true) {
        util.scrollLeft(container, containerScroll.left + diffTop.left);
      } else if (alignWithLeft === false) {
        util.scrollLeft(container, containerScroll.left + diffBottom.left);
      } else {
        // 自动调整
        if (diffTop.left < 0) {
          util.scrollLeft(container, containerScroll.left + diffTop.left);
        } else {
          util.scrollLeft(container, containerScroll.left + diffBottom.left);
        }
      }
    } else {
      if (!onlyScrollIfNeeded) {
        alignWithLeft = alignWithLeft === undefined ? true : !!alignWithLeft;
        if (alignWithLeft) {
          util.scrollLeft(container, containerScroll.left + diffTop.left);
        } else {
          util.scrollLeft(container, containerScroll.left + diffBottom.left);
        }
      }
    }
  }
}

module.exports = scrollIntoView;

},{"./util":9}],9:[function(require,module,exports){
var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

function getClientPosition(elem) {
  var box, x, y;
  var doc = elem.ownerDocument;
  var body = doc.body;
  var docElem = doc && doc.documentElement;
  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
  box = elem.getBoundingClientRect();

  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

  x = box.left;
  y = box.top;

  // In IE, most of the time, 2 extra pixels are added to the top and left
  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
  // IE6 standards mode, this border can be overridden by setting the
  // document element's border to zero -- thus, we cannot rely on the
  // offset always being 2 pixels.

  // In quirks mode, the offset can be determined by querying the body's
  // clientLeft/clientTop, but in standards mode, it is found by querying
  // the document element's clientLeft/clientTop.  Since we already called
  // getClientBoundingRect we have already forced a reflow, so it is not
  // too expensive just to query them all.

  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
  // 窗口边框标准是设 documentElement ,quirks 时设置 body
  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
  // 标准 ie 下 docElem.clientTop 就是 border-top
  // ie7 html 即窗口边框改变不了。永远为 2
  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

  x -= docElem.clientLeft || body.clientLeft || 0;
  y -= docElem.clientTop || body.clientTop || 0;

  return {left: x, top: y};
}

function getScroll(w, top) {
  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
  var method = 'scroll' + (top ? 'Top' : 'Left');
  if (typeof ret !== 'number') {
    var d = w.document;
    //ie6,7,8 standard mode
    ret = d.documentElement[method];
    if (typeof ret !== 'number') {
      //quirks mode
      ret = d.body[method];
    }
  }
  return ret;
}

function getScrollLeft(w) {
  return getScroll(w);
}

function getScrollTop(w) {
  return getScroll(w, true);
}

function getOffset(el) {
  var pos = getClientPosition(el);
  var doc = el.ownerDocument;
  var w = doc.defaultView || doc.parentWindow;
  pos.left += getScrollLeft(w);
  pos.top += getScrollTop(w);
  return pos;
}
function _getComputedStyle(elem, name, computedStyle) {
  var val = '';
  var d = elem.ownerDocument;

  // https://github.com/kissyteam/kissy/issues/61
  if ((computedStyle = (computedStyle || d.defaultView.getComputedStyle(elem, null)))) {
    val = computedStyle.getPropertyValue(name) || computedStyle[name];
  }

  return val;
}

var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
var RE_POS = /^(top|right|bottom|left)$/,
  CURRENT_STYLE = 'currentStyle',
  RUNTIME_STYLE = 'runtimeStyle',
  LEFT = 'left',
  PX = 'px';

function _getComputedStyleIE(elem, name) {
  // currentStyle maybe null
  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
  // 在 ie 下不对，需要直接用 offset 方式
  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

  // From the awesome hack by Dean Edwards
  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
  // If we're not dealing with a regular pixel number
  // but a number that has a weird ending, we need to convert it to pixels
  // exclude left right for relativity
  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
    // Remember the original values
    var style = elem.style,
      left = style[LEFT],
      rsLeft = elem[RUNTIME_STYLE][LEFT];

    // prevent flashing of content
    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

    // Put in the new values to get a computed value out
    style[LEFT] = name === 'fontSize' ? '1em' : (ret || 0);
    ret = style.pixelLeft + PX;

    // Revert the changed values
    style[LEFT] = left;

    elem[RUNTIME_STYLE][LEFT] = rsLeft;
  }
  return ret === '' ? 'auto' : ret;
}

var getComputedStyleX;
if (typeof window !== 'undefined') {
  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
}

// 设置 elem 相对 elem.ownerDocument 的坐标
function setOffset(elem, offset) {
  // set position first, in-case top/left are set even on static elem
  if (css(elem, 'position') === 'static') {
    elem.style.position = 'relative';
  }

  var old = getOffset(elem),
    ret = {},
    current, key;

  for (key in offset) {
    current = parseFloat(css(elem, key)) || 0;
    ret[key] = current + offset[key] - old[key];
  }
  css(elem, ret);
}

function each(arr, fn) {
  for (var i = 0; i < arr.length; i++) {
    fn(arr[i]);
  }
}

function isBorderBoxFn(elem) {
  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
}

var BOX_MODELS = ['margin', 'border', 'padding'],
  CONTENT_INDEX = -1,
  PADDING_INDEX = 2,
  BORDER_INDEX = 1,
  MARGIN_INDEX = 0;

function swap(elem, options, callback) {
  var old = {},
    style = elem.style,
    name;

  // Remember the old values, and insert the new ones
  for (name in options) {
    old[name] = style[name];
    style[name] = options[name];
  }

  callback.call(elem);

  // Revert the old values
  for (name in options) {
    style[name] = old[name];
  }
}

function getPBMWidth(elem, props, which) {
  var value = 0, prop, j, i;
  for (j = 0; j < props.length; j++) {
    prop = props[j];
    if (prop) {
      for (i = 0; i < which.length; i++) {
        var cssProp;
        if (prop === 'border') {
          cssProp = prop + which[i] + 'Width';
        } else {
          cssProp = prop + which[i];
        }
        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
      }
    }
  }
  return value;
}

/**
 * A crude way of determining if an object is a window
 * @member util
 */
function isWindow(obj) {
  // must use == for ie8
  /*jshint eqeqeq:false*/
  return obj != null && obj == obj.window;
}

var domUtils = {};

each(['Width', 'Height'], function (name) {
  domUtils['doc' + name] = function (refWin) {
    var d = refWin.document;
    return Math.max(
      //firefox chrome documentElement.scrollHeight< body.scrollHeight
      //ie standard mode : documentElement.scrollHeight> body.scrollHeight
      d.documentElement['scroll' + name],
      //quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
      d.body['scroll' + name],
      domUtils['viewport' + name](d));
  };

  domUtils['viewport' + name] = function (win) {
    // pc browser includes scrollbar in window.innerWidth
    var prop = 'client' + name,
      doc = win.document,
      body = doc.body,
      documentElement = doc.documentElement,
      documentElementProp = documentElement[prop];
    // 标准模式取 documentElement
    // backcompat 取 body
    return doc.compatMode === 'CSS1Compat' && documentElementProp ||
      body && body[prop] || documentElementProp;
  };
});

/*
 得到元素的大小信息
 @param elem
 @param name
 @param {String} [extra]  'padding' : (css width) + padding
 'border' : (css width) + padding + border
 'margin' : (css width) + padding + border + margin
 */
function getWH(elem, name, extra) {
  if (isWindow(elem)) {
    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
  } else if (elem.nodeType === 9) {
    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
  }
  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'],
    borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
  var computedStyle = getComputedStyleX(elem);
  var isBorderBox = isBorderBoxFn(elem, computedStyle);
  var cssBoxValue = 0;
  if (borderBoxValue == null || borderBoxValue <= 0) {
    borderBoxValue = undefined;
    // Fall back to computed then un computed css if necessary
    cssBoxValue = getComputedStyleX(elem, name);
    if (cssBoxValue == null || (Number(cssBoxValue)) < 0) {
      cssBoxValue = elem.style[name] || 0;
    }
    // Normalize '', auto, and prepare for extra
    cssBoxValue = parseFloat(cssBoxValue) || 0;
  }
  if (extra === undefined) {
    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
  }
  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
  var val = borderBoxValue || cssBoxValue;
  if (extra === CONTENT_INDEX) {
    if (borderBoxValueOrIsBorderBox) {
      return val - getPBMWidth(elem, ['border', 'padding'],
          which, computedStyle);
    } else {
      return cssBoxValue;
    }
  } else if (borderBoxValueOrIsBorderBox) {
    return val + (extra === BORDER_INDEX ? 0 :
        (extra === PADDING_INDEX ?
          -getPBMWidth(elem, ['border'], which, computedStyle) :
          getPBMWidth(elem, ['margin'], which, computedStyle)));
  } else {
    return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra),
        which, computedStyle);
  }
}

var cssShow = {position: 'absolute', visibility: 'hidden', display: 'block'};

// fix #119 : https://github.com/kissyteam/kissy/issues/119
function getWHIgnoreDisplay(elem) {
  var val, args = arguments;
  // in case elem is window
  // elem.offsetWidth === undefined
  if (elem.offsetWidth !== 0) {
    val = getWH.apply(undefined, args);
  } else {
    swap(elem, cssShow, function () {
      val = getWH.apply(undefined, args);
    });
  }
  return val;
}

each(['width', 'height'], function (name) {
  var first = name.charAt(0).toUpperCase() + name.slice(1);
  domUtils['outer' + first] = function (el, includeMargin) {
    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
  };
  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

  domUtils[name] = function (elem, val) {
    if (val !== undefined) {
      if (elem) {
        var computedStyle = getComputedStyleX(elem);
        var isBorderBox = isBorderBoxFn(elem);
        if (isBorderBox) {
          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
        }
        return css(elem, name, val);
      }
      return;
    }
    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
  };
});

function css(el, name, value) {
  if (typeof name === 'object') {
    for (var i in name) {
      css(el, i, name[i]);
    }
    return;
  }
  if (typeof value !== 'undefined') {
    if (typeof value === 'number') {
      value = value + 'px';
    }
    el.style[name] = value;
  } else {
    return getComputedStyleX(el, name);
  }
}

function mix(to, from) {
  for (var i in from) {
    to[i] = from[i];
  }
  return to;
}

var utils = module.exports = {
  getWindow: function (node) {
    var doc = node.ownerDocument || node;
    return doc.defaultView || doc.parentWindow;
  },
  offset: function (el, value) {
    if (typeof value !== 'undefined') {
      setOffset(el, value);
    } else {
      return getOffset(el);
    }
  },
  isWindow: isWindow,
  each: each,
  css: css,
  clone: function (obj) {
    var ret = {};
    for (var i in obj) {
      ret[i] = obj[i];
    }
    var overflow = obj.overflow;
    if (overflow) {
      for (i in obj) {
        ret.overflow[i] = obj.overflow[i];
      }
    }
    return ret;
  },
  mix: mix,
  scrollLeft: function (w, v) {
    if (isWindow(w)) {
      if (v === undefined) {
        return getScrollLeft(w);
      } else {
        window.scrollTo(v, getScrollTop(w));
      }
    } else {
      if (v === undefined) {
        return w.scrollLeft;
      } else {
        w.scrollLeft = v;
      }
    }
  },
  scrollTop: function (w, v) {
    if (isWindow(w)) {
      if (v === undefined) {
        return getScrollTop(w);
      } else {
        window.scrollTo(getScrollLeft(w), v);
      }
    } else {
      if (v === undefined) {
        return w.scrollTop;
      } else {
        w.scrollTop = v;
      }
    }
  },
  merge: function () {
    var ret = {};
    for (var i = 0; i < arguments.length; i++) {
      utils.mix(ret, arguments[i]);
    }
    return ret;
  },
  viewportWidth: 0,
  viewportHeight: 0
};

mix(utils, domUtils);

},{}],10:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if ("production" !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
},{"./emptyFunction":17}],11:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],12:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],13:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":12}],14:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;
},{"./isTextNode":27}],15:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? "production" !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? "production" !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? "production" !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? "production" !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./invariant":25}],16:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? "production" !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? "production" !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
},{"./ExecutionEnvironment":11,"./createArrayFromMixed":15,"./getMarkupWrap":21,"./invariant":25}],17:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],18:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyObject = {};

if ("production" !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
},{}],19:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],20:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;
},{}],21:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? "production" !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
},{"./ExecutionEnvironment":11,"./invariant":25}],22:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],23:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],24:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":23}],25:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if ("production" !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
},{}],26:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],27:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":26}],28:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],29:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":11}],30:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 */

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":29}],31:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],32:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
},{"./emptyFunction":17}],33:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],34:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],35:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var printWarning = function() {};

if ("production" !== 'production') {
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if ("production" !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          )

        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

module.exports = checkPropTypes;

},{"./lib/ReactPropTypesSecret":40}],36:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = require('./factoryWithTypeCheckers');
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};

},{"./factoryWithTypeCheckers":38}],37:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

function emptyFunction() {}

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"./lib/ReactPropTypesSecret":40}],38:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

var printWarning = function() {};

if ("production" !== 'production') {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if ("production" !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ("production" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      "production" !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "production" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"./checkPropTypes":35,"./lib/ReactPropTypesSecret":40,"object-assign":33}],39:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if ("production" !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}

},{"./factoryWithThrowingShims":37,"./factoryWithTypeCheckers":38}],40:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],41:[function(require,module,exports){
'use strict';

module.exports = require('./lib/ReactDOM');

},{"./lib/ReactDOM":71}],42:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;
},{}],43:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var focusNode = require('fbjs/lib/focusNode');

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactDOMComponentTree":74,"fbjs/lib/focusNode":19}],44:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventPropagators":60,"./FallbackCompositionState":61,"./SyntheticCompositionEvent":125,"./SyntheticInputEvent":129,"fbjs/lib/ExecutionEnvironment":11}],45:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],46:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInstrumentation = require('./ReactInstrumentation');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    "production" !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    "production" !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    "production" !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    "production" !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {
  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      var styleValue = styles[styleName];
      if ("production" !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styleValue, component);
        }
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if ("production" !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      if ("production" !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styles[styleName], component);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }
};

module.exports = CSSPropertyOperations;
},{"./CSSProperty":45,"./ReactInstrumentation":103,"./dangerousStyleValue":142,"fbjs/lib/ExecutionEnvironment":11,"fbjs/lib/camelizeStyleName":13,"fbjs/lib/hyphenateStyleName":24,"fbjs/lib/memoizeStringOnly":28,"fbjs/lib/warning":32}],47:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = require('./PooledClass');

var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? "production" !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
},{"./PooledClass":65,"./reactProdInvariant":161,"fbjs/lib/invariant":25}],48:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var inputValueTracking = require('./inputValueTracking');
var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
  event.type = 'change';
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getInstIfValueChanged(targetInst, nativeEvent) {
  var updated = inputValueTracking.updateValueIfChanged(targetInst);
  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

  if (updated || simulated) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.

  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst, nativeEvent);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes,

  _allowSimulatedPassThrough: true,
  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

module.exports = ChangeEventPlugin;
},{"./EventPluginHub":57,"./EventPropagators":60,"./ReactDOMComponentTree":74,"./ReactUpdates":118,"./SyntheticEvent":127,"./getEventTarget":150,"./inputValueTracking":156,"./isEventSupported":158,"./isTextInputElement":159,"fbjs/lib/ExecutionEnvironment":11}],49:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMLazyTree = require('./DOMLazyTree');
var Danger = require('./Danger');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstrumentation = require('./ReactInstrumentation');

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if ("production" !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if ("production" !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {
  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if ("production" !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if ("production" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: {
                toIndex: update.toIndex,
                content: update.content.toString()
              }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if ("production" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if ("production" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if ("production" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if ("production" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }
};

module.exports = DOMChildrenOperations;
},{"./DOMLazyTree":50,"./Danger":54,"./ReactDOMComponentTree":74,"./ReactInstrumentation":103,"./createMicrosoftUnsafeLocalFunction":141,"./setInnerHTML":163,"./setTextContent":164}],50:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMNamespaces = require('./DOMNamespaces');
var setInnerHTML = require('./setInnerHTML');

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
var setTextContent = require('./setTextContent');

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;
},{"./DOMNamespaces":51,"./createMicrosoftUnsafeLocalFunction":141,"./setInnerHTML":163,"./setTextContent":164}],51:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;
},{}],52:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? "production" !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? "production" !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if ("production" !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if ("production" !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {
  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: "production" !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25}],53:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstrumentation = require('./ReactInstrumentation');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  "production" !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {
  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if ("production" !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if ("production" !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if ("production" !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if ("production" !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }
};

module.exports = DOMPropertyOperations;
},{"./DOMProperty":52,"./ReactDOMComponentTree":74,"./ReactInstrumentation":103,"./quoteAttributeValueForBrowser":160,"fbjs/lib/warning":32}],54:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMLazyTree = require('./DOMLazyTree');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');

var Danger = {
  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? "production" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? "production" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? "production" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }
};

module.exports = Danger;
},{"./DOMLazyTree":50,"./reactProdInvariant":161,"fbjs/lib/ExecutionEnvironment":11,"fbjs/lib/createNodesFromMarkup":16,"fbjs/lib/emptyFunction":17,"fbjs/lib/invariant":25}],55:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;
},{}],56:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

module.exports = EnterLeaveEventPlugin;
},{"./EventPropagators":60,"./ReactDOMComponentTree":74,"./SyntheticMouseEvent":131}],57:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {
  /**
   * Methods for injecting dependencies.
   */
  injection: {
    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? "production" !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? "production" !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }
};

module.exports = EventPluginHub;
},{"./EventPluginRegistry":58,"./EventPluginUtils":59,"./ReactErrorUtils":94,"./accumulateInto":138,"./forEachAccumulated":146,"./reactProdInvariant":161,"fbjs/lib/invariant":25}],58:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? "production" !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? "production" !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if ("production" !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {
  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: "production" !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? "production" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if ("production" !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }
};

module.exports = EventPluginRegistry;
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25}],59:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if ("production" !== 'production') {
      "production" !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if ("production" !== 'production') {
      "production" !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if ("production" !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    "production" !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if ("production" !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if ("production" !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? "production" !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
},{"./ReactErrorUtils":94,"./reactProdInvariant":161,"fbjs/lib/invariant":25,"fbjs/lib/warning":32}],60:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');
var EventPluginUtils = require('./EventPluginUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var warning = require('fbjs/lib/warning');

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
},{"./EventPluginHub":57,"./EventPluginUtils":59,"./accumulateInto":138,"./forEachAccumulated":146,"fbjs/lib/warning":32}],61:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');

var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./PooledClass":65,"./getTextContentAccessor":154,"object-assign":33}],62:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    controlsList: 0,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":52}],63:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
},{}],64:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypesSecret = require('./ReactPropTypesSecret');
var propTypesFactory = require('prop-types/factory');

var React = require('react/lib/React');
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? "production" !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? "production" !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? "production" !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        "production" !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
},{"./ReactPropTypesSecret":111,"./reactProdInvariant":161,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"prop-types/factory":36,"react/lib/React":170}],65:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? "production" !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25}],66:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ViewportMetrics = require('./ViewportMetrics');

var getVendorPrefixedEventName = require('./getVendorPrefixedEventName');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {
          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }
});

module.exports = ReactBrowserEventEmitter;
},{"./EventPluginRegistry":58,"./ReactEventEmitterMixin":95,"./ViewportMetrics":137,"./getVendorPrefixedEventName":155,"./isEventSupported":158,"object-assign":33}],67:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "production" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if ("production" !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
    }
    if (!keyUnique) {
      "production" !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
  {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if ("production" !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
  {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }
};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":63,"./ReactReconciler":113,"./instantiateReactComponent":157,"./shouldUpdateReactComponent":165,"./traverseAllChildren":166,"_process":34,"fbjs/lib/warning":32,"react/lib/ReactComponentTreeHook":173}],68:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {
  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
};

module.exports = ReactComponentBrowserEnvironment;
},{"./DOMChildrenOperations":49,"./ReactDOMIDOperations":78}],69:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {
  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? "production" !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }
};

module.exports = ReactComponentEnvironment;
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25}],70:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var React = require('react/lib/React');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactErrorUtils = require('./ReactErrorUtils');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactNodeTypes = require('./ReactNodeTypes');
var ReactReconciler = require('./ReactReconciler');

if ("production" !== 'production') {
  var checkReactTypeSpec = require('./checkReactTypeSpec');
}

var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shallowEqual = require('fbjs/lib/shallowEqual');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    "production" !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {
  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if ("production" !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? "production" !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if ("production" !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        "production" !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      "production" !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if ("production" !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      "production" !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      "production" !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      "production" !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      "production" !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      "production" !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      "production" !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      "production" !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? "production" !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if ("production" !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if ("production" !== 'production' && !doConstruct) {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if ("production" !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if ("production" !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if ("production" !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if ("production" !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if ("production" !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if ("production" !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if ("production" !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if ("production" !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? "production" !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if ("production" !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? "production" !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if ("production" !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? "production" !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if ("production" !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if ("production" !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if ("production" !== 'production') {
      "production" !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if ("production" !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if ("production" !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if ("production" !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if ("production" !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if ("production" !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if ("production" !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if ("production" !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? "production" !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? "production" !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if ("production" !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      "production" !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null
};

module.exports = ReactCompositeComponent;
},{"./ReactComponentEnvironment":69,"./ReactErrorUtils":94,"./ReactInstanceMap":102,"./ReactInstrumentation":103,"./ReactNodeTypes":108,"./ReactReconciler":113,"./checkReactTypeSpec":140,"./reactProdInvariant":161,"./shouldUpdateReactComponent":165,"fbjs/lib/emptyObject":18,"fbjs/lib/invariant":25,"fbjs/lib/shallowEqual":31,"fbjs/lib/warning":32,"object-assign":33,"react/lib/React":170,"react/lib/ReactCurrentOwner":174}],71:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactMount = require('./ReactMount');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var getHostComponentFromComposite = require('./getHostComponentFromComposite');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  /* eslint-enable camelcase */
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if ("production" !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    "production" !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    "production" !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        "production" !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if ("production" !== 'production') {
  var ReactInstrumentation = require('./ReactInstrumentation');
  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');
  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');
  var ReactDOMInvalidARIAHook = require('./ReactDOMInvalidARIAHook');

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
},{"./ReactDOMComponentTree":74,"./ReactDOMInvalidARIAHook":80,"./ReactDOMNullInputValuePropHook":81,"./ReactDOMUnknownPropertyHook":88,"./ReactDefaultInjection":91,"./ReactInstrumentation":103,"./ReactMount":106,"./ReactReconciler":113,"./ReactUpdates":118,"./ReactVersion":119,"./findDOMNode":144,"./getHostComponentFromComposite":151,"./renderSubtreeIntoContainer":162,"fbjs/lib/ExecutionEnvironment":11,"fbjs/lib/warning":32}],72:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* global hasOwnProperty:true */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMLazyTree = require('./DOMLazyTree');
var DOMNamespaces = require('./DOMNamespaces');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactMultiChild = require('./ReactMultiChild');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');

var emptyFunction = require('fbjs/lib/emptyFunction');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var shallowEqual = require('fbjs/lib/shallowEqual');
var inputValueTracking = require('./inputValueTracking');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { string: true, number: true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  "production" !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? "production" !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? "production" !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? "production" !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if ("production" !== 'production') {
    "production" !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    "production" !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    "production" !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? "production" !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if ("production" !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    "production" !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if ("production" !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trackInputValue() {
  inputValueTracking.track(this);
}

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? "production" !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? "production" !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':
      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

var newlineEatingTags = {
  listing: true,
  pre: true,
  textarea: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? "production" !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if ("production" !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {
  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if ("production" !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if ("production" !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if ("production" !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if ("production" !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);

        // We also check that we haven't missed a value update, such as a
        // Radio group shifting the checked value to another named radio input.
        inputValueTracking.updateValueIfChanged(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if ("production" !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if ("production" !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if ("production" !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if ("production" !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if ("production" !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
      case 'textarea':
        inputValueTracking.stopTracking(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? "production" !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if ("production" !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }
};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
},{"./AutoFocusUtils":43,"./CSSPropertyOperations":46,"./DOMLazyTree":50,"./DOMNamespaces":51,"./DOMProperty":52,"./DOMPropertyOperations":53,"./EventPluginHub":57,"./EventPluginRegistry":58,"./ReactBrowserEventEmitter":66,"./ReactDOMComponentFlags":73,"./ReactDOMComponentTree":74,"./ReactDOMInput":79,"./ReactDOMOption":82,"./ReactDOMSelect":83,"./ReactDOMTextarea":86,"./ReactInstrumentation":103,"./ReactMultiChild":107,"./ReactServerRenderingTransaction":115,"./escapeTextContentForBrowser":143,"./inputValueTracking":156,"./isEventSupported":158,"./reactProdInvariant":161,"./validateDOMNesting":167,"fbjs/lib/emptyFunction":17,"fbjs/lib/invariant":25,"fbjs/lib/shallowEqual":31,"fbjs/lib/warning":32,"object-assign":33}],73:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;
},{}],74:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMProperty = require('./DOMProperty');
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');

var invariant = require('fbjs/lib/invariant');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
    !false ? "production" !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? "production" !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? "production" !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
},{"./DOMProperty":52,"./ReactDOMComponentFlags":73,"./reactProdInvariant":161,"fbjs/lib/invariant":25}],75:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var validateDOMNesting = require('./validateDOMNesting');

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if ("production" !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
},{"./validateDOMNesting":167}],76:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var DOMLazyTree = require('./DOMLazyTree');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;
},{"./DOMLazyTree":50,"./ReactDOMComponentTree":74,"object-assign":33}],77:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;
},{}],78:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {
  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;
},{"./DOMChildrenOperations":49,"./ReactDOMComponentTree":74}],79:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var DOMPropertyOperations = require('./DOMPropertyOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if ("production" !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        "production" !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        "production" !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        "production" !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        "production" !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if ("production" !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        "production" !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        "production" !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        if (
        // eslint-disable-next-line
        value != valueAsNumber ||
        // eslint-disable-next-line
        value == valueAsNumber && node.value != value) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
      } else if (node.value !== '' + value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? "production" !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
},{"./DOMPropertyOperations":53,"./LinkedValueUtils":64,"./ReactDOMComponentTree":74,"./ReactUpdates":118,"./reactProdInvariant":161,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"object-assign":33}],80:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      "production" !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    "production" !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    "production" !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if ("production" !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if ("production" !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
},{"./DOMProperty":52,"fbjs/lib/warning":32,"react/lib/ReactComponentTreeHook":173}],81:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    "production" !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
},{"fbjs/lib/warning":32,"react/lib/ReactComponentTreeHook":173}],82:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var React = require('react/lib/React');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMSelect = require('./ReactDOMSelect');

var warning = require('fbjs/lib/warning');
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      "production" !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== 'production') {
      "production" !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }
};

module.exports = ReactDOMOption;
},{"./ReactDOMComponentTree":74,"./ReactDOMSelect":83,"fbjs/lib/warning":32,"object-assign":33,"react/lib/React":170}],83:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    "production" !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      "production" !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      "production" !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if ("production" !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      "production" !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
},{"./LinkedValueUtils":64,"./ReactDOMComponentTree":74,"./ReactUpdates":118,"fbjs/lib/warning":32,"object-assign":33}],84:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":153,"./getTextContentAccessor":154,"fbjs/lib/ExecutionEnvironment":11}],85:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMLazyTree = require('./DOMLazyTree');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {
  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if ("production" !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? "production" !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMTextComponent;
},{"./DOMChildrenOperations":49,"./DOMLazyTree":50,"./ReactDOMComponentTree":74,"./escapeTextContentForBrowser":143,"./reactProdInvariant":161,"./validateDOMNesting":167,"fbjs/lib/invariant":25,"object-assign":33}],86:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? "production" !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if ("production" !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        "production" !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        "production" !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if ("production" !== 'production') {
          "production" !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? "production" !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? "production" !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
},{"./LinkedValueUtils":64,"./ReactDOMComponentTree":74,"./ReactUpdates":118,"./reactProdInvariant":161,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"object-assign":33}],87:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? "production" !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? "production" !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? "production" !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? "production" !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? "production" !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25}],88:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

if ("production" !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      "production" !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      "production" !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    "production" !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    "production" !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
},{"./DOMProperty":52,"./EventPluginRegistry":58,"fbjs/lib/warning":32,"react/lib/ReactComponentTreeHook":173}],89:[function(require,module,exports){
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var ReactInvalidSetStateWarningHook = require('./ReactInvalidSetStateWarningHook');
var ReactHostOperationHistoryHook = require('./ReactHostOperationHistoryHook');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var performanceNow = require('fbjs/lib/performanceNow');
var warning = require('fbjs/lib/warning');

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    "production" !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    "production" !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    "production" !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    "production" !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  if (measurementName) {
    performance.clearMeasures(measurementName);
  }
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
},{"./ReactHostOperationHistoryHook":99,"./ReactInvalidSetStateWarningHook":104,"fbjs/lib/ExecutionEnvironment":11,"fbjs/lib/performanceNow":30,"fbjs/lib/warning":32,"react/lib/ReactComponentTreeHook":173}],90:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./ReactUpdates":118,"./Transaction":136,"fbjs/lib/emptyFunction":17,"object-assign":33}],91:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ARIADOMPropertyConfig = require('./ARIADOMPropertyConfig');
var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMEmptyComponent = require('./ReactDOMEmptyComponent');
var ReactDOMTreeTraversal = require('./ReactDOMTreeTraversal');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');
var SelectEventPlugin = require('./SelectEventPlugin');
var SimpleEventPlugin = require('./SimpleEventPlugin');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};
},{"./ARIADOMPropertyConfig":42,"./BeforeInputEventPlugin":44,"./ChangeEventPlugin":48,"./DefaultEventPluginOrder":55,"./EnterLeaveEventPlugin":56,"./HTMLDOMPropertyConfig":62,"./ReactComponentBrowserEnvironment":68,"./ReactDOMComponent":72,"./ReactDOMComponentTree":74,"./ReactDOMEmptyComponent":76,"./ReactDOMTextComponent":85,"./ReactDOMTreeTraversal":87,"./ReactDefaultBatchingStrategy":90,"./ReactEventListener":96,"./ReactInjection":100,"./ReactReconcileTransaction":112,"./SVGDOMPropertyConfig":120,"./SelectEventPlugin":121,"./SimpleEventPlugin":122}],92:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
},{}],93:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{}],94:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if ("production" !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = function () {
        func(a);
      };
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
},{}],95:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":57}],96:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./PooledClass":65,"./ReactDOMComponentTree":74,"./ReactUpdates":118,"./getEventTarget":150,"fbjs/lib/EventListener":10,"fbjs/lib/ExecutionEnvironment":11,"fbjs/lib/getUnboundedScrollPosition":22,"object-assign":33}],97:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;
},{}],98:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? "production" !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25}],99:[function(require,module,exports){
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;
},{}],100:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var EventPluginUtils = require('./EventPluginUtils');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactHostComponent = require('./ReactHostComponent');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":52,"./EventPluginHub":57,"./EventPluginUtils":59,"./ReactBrowserEventEmitter":66,"./ReactComponentEnvironment":69,"./ReactEmptyComponent":93,"./ReactHostComponent":98,"./ReactUpdates":118}],101:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {
  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":84,"fbjs/lib/containsNode":14,"fbjs/lib/focusNode":19,"fbjs/lib/getActiveElement":20}],102:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {
  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }
};

module.exports = ReactInstanceMap;
},{}],103:[function(require,module,exports){
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if ("production" !== 'production') {
  var ReactDebugTool = require('./ReactDebugTool');
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
},{"./ReactDebugTool":89}],104:[function(require,module,exports){
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var warning = require('fbjs/lib/warning');

if ("production" !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    "production" !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
},{"fbjs/lib/warning":32}],105:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":139}],106:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMLazyTree = require('./DOMLazyTree');
var DOMProperty = require('./DOMProperty');
var React = require('react/lib/React');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMContainerInfo = require('./ReactDOMContainerInfo');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactFeatureFlags = require('./ReactFeatureFlags');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if ("production" !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if ("production" !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if ("production" !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    "production" !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? "production" !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? "production" !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? "production" !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    "production" !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, {
      child: nextElement
    });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if ("production" !== 'production') {
      "production" !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            "production" !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    "production" !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? "production" !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if ("production" !== 'production') {
      "production" !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if ("production" !== 'production') {
        "production" !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? "production" !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if ("production" !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? "production" !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if ("production" !== 'production') {
          "production" !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? "production" !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if ("production" !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
},{"./DOMLazyTree":50,"./DOMProperty":52,"./ReactBrowserEventEmitter":66,"./ReactDOMComponentTree":74,"./ReactDOMContainerInfo":75,"./ReactDOMFeatureFlags":77,"./ReactFeatureFlags":97,"./ReactInstanceMap":102,"./ReactInstrumentation":103,"./ReactMarkupChecksum":105,"./ReactReconciler":113,"./ReactUpdateQueue":117,"./ReactUpdates":118,"./instantiateReactComponent":157,"./reactProdInvariant":161,"./setInnerHTML":163,"./shouldUpdateReactComponent":165,"fbjs/lib/emptyObject":18,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"react/lib/React":170,"react/lib/ReactCurrentOwner":174}],107:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var emptyFunction = require('fbjs/lib/emptyFunction');
var flattenChildren = require('./flattenChildren');
var invariant = require('fbjs/lib/invariant');

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if ("production" !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {
  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {
    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if ("production" !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if ("production" !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if ("production" !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if ("production" !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? "production" !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? "production" !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if ("production" !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }
  }
};

module.exports = ReactMultiChild;
},{"./ReactChildReconciler":67,"./ReactComponentEnvironment":69,"./ReactInstanceMap":102,"./ReactInstrumentation":103,"./ReactReconciler":113,"./flattenChildren":145,"./reactProdInvariant":161,"fbjs/lib/emptyFunction":17,"fbjs/lib/invariant":25,"react/lib/ReactCurrentOwner":174}],108:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var React = require('react/lib/React');

var invariant = require('fbjs/lib/invariant');

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
    !false ? "production" !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25,"react/lib/React":170}],109:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? "production" !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? "production" !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }
};

module.exports = ReactOwner;
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25}],110:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var ReactPropTypeLocationNames = {};

if ("production" !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
},{}],111:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
},{}],112:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactInputSelection = require('./ReactInputSelection');
var ReactInstrumentation = require('./ReactInstrumentation');
var Transaction = require('./Transaction');
var ReactUpdateQueue = require('./ReactUpdateQueue');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if ("production" !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"./CallbackQueue":47,"./PooledClass":65,"./ReactBrowserEventEmitter":66,"./ReactInputSelection":101,"./ReactInstrumentation":103,"./ReactUpdateQueue":117,"./Transaction":136,"object-assign":33}],113:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactRef = require('./ReactRef');
var ReactInstrumentation = require('./ReactInstrumentation');

var warning = require('fbjs/lib/warning');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
  {
    if ("production" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if ("production" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if ("production" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if ("production" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if ("production" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if ("production" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      "production" !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if ("production" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if ("production" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }
};

module.exports = ReactReconciler;
},{"./ReactInstrumentation":103,"./ReactRef":114,"fbjs/lib/warning":32}],114:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":109}],115:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');
var Transaction = require('./Transaction');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactServerUpdateQueue = require('./ReactServerUpdateQueue');

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if ("production" !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"./PooledClass":65,"./ReactInstrumentation":103,"./ReactServerUpdateQueue":116,"./Transaction":136,"object-assign":33}],116:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = require('./ReactUpdateQueue');

var warning = require('fbjs/lib/warning');

function warnNoop(publicInstance, callerName) {
  if ("production" !== 'production') {
    var constructor = publicInstance.constructor;
    "production" !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
},{"./ReactUpdateQueue":117,"fbjs/lib/warning":32}],117:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if ("production" !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      "production" !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if ("production" !== 'production') {
    "production" !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if ("production" !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        "production" !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if ("production" !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      "production" !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? "production" !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }
};

module.exports = ReactUpdateQueue;
},{"./ReactInstanceMap":102,"./ReactInstrumentation":103,"./ReactUpdates":118,"./reactProdInvariant":161,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"react/lib/ReactCurrentOwner":174}],118:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactFeatureFlags = require('./ReactFeatureFlags');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? "production" !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  invariant(batchingStrategy.isBatchingUpdates, "ReactUpdates.asap: Can't enqueue an asap callback in a context where" + 'updates are not being batched.');
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? "production" !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
},{"./CallbackQueue":47,"./PooledClass":65,"./ReactFeatureFlags":97,"./ReactReconciler":113,"./Transaction":136,"./reactProdInvariant":161,"fbjs/lib/invariant":25,"object-assign":33}],119:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

module.exports = '15.6.2';
},{}],120:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;
},{}],121:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var shallowEqual = require('fbjs/lib/shallowEqual');

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventPropagators":60,"./ReactDOMComponentTree":74,"./ReactInputSelection":101,"./SyntheticEvent":127,"./isTextInputElement":159,"fbjs/lib/ExecutionEnvironment":11,"fbjs/lib/getActiveElement":20,"fbjs/lib/shallowEqual":31}],122:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var SyntheticAnimationEvent = require('./SyntheticAnimationEvent');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticTransitionEvent = require('./SyntheticTransitionEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? "production" !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }
};

module.exports = SimpleEventPlugin;
},{"./EventPropagators":60,"./ReactDOMComponentTree":74,"./SyntheticAnimationEvent":123,"./SyntheticClipboardEvent":124,"./SyntheticDragEvent":126,"./SyntheticEvent":127,"./SyntheticFocusEvent":128,"./SyntheticKeyboardEvent":130,"./SyntheticMouseEvent":131,"./SyntheticTouchEvent":132,"./SyntheticTransitionEvent":133,"./SyntheticUIEvent":134,"./SyntheticWheelEvent":135,"./getEventCharCode":147,"./reactProdInvariant":161,"fbjs/lib/EventListener":10,"fbjs/lib/emptyFunction":17,"fbjs/lib/invariant":25}],123:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;
},{"./SyntheticEvent":127}],124:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":127}],125:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":127}],126:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":131}],127:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if ("production" !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if ("production" !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if ("production" !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if ("production" !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

/** Proxying after everything set on SyntheticEvent
  * to resolve Proxy issue on some WebKit browsers
  * in which some Event properties are set to undefined (GH#10010)
  */
if ("production" !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              "production" !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    "production" !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
},{"./PooledClass":65,"fbjs/lib/emptyFunction":17,"fbjs/lib/warning":32,"object-assign":33}],128:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":134}],129:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":127}],130:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":134,"./getEventCharCode":147,"./getEventKey":148,"./getEventModifierState":149}],131:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":134,"./ViewportMetrics":137,"./getEventModifierState":149}],132:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":134,"./getEventModifierState":149}],133:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;
},{"./SyntheticEvent":127}],134:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":127,"./getEventTarget":150}],135:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":131}],136:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /* eslint-disable space-before-function-paren */

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    /* eslint-enable space-before-function-paren */
    !!this.isInTransaction() ? "production" !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? "production" !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25}],137:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ViewportMetrics = {
  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }
};

module.exports = ViewportMetrics;
},{}],138:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? "production" !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
},{"./reactProdInvariant":161,"fbjs/lib/invariant":25}],139:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],140:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactPropTypesSecret = require('./ReactPropTypesSecret');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "production" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? "production" !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      "production" !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if ("production" !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        "production" !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,require('_process'))
},{"./ReactPropTypeLocationNames":110,"./ReactPropTypesSecret":111,"./reactProdInvariant":161,"_process":34,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"react/lib/ReactComponentTreeHook":173}],141:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/* globals MSApp */

'use strict';

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;
},{}],142:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var warning = require('fbjs/lib/warning');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if ("production" !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          "production" !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"./CSSProperty":45,"fbjs/lib/warning":32}],143:[function(require,module,exports){
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

'use strict';

// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;
},{}],144:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstanceMap = require('./ReactInstanceMap');

var getHostComponentFromComposite = require('./getHostComponentFromComposite');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if ("production" !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      "production" !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
    !false ? "production" !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
    !false ? "production" !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
},{"./ReactDOMComponentTree":74,"./ReactInstanceMap":102,"./getHostComponentFromComposite":151,"./reactProdInvariant":161,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"react/lib/ReactCurrentOwner":174}],145:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var KeyEscapeUtils = require('./KeyEscapeUtils');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "production" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if ("production" !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
      }
      if (!keyUnique) {
        "production" !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if ("production" !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":63,"./traverseAllChildren":166,"_process":34,"fbjs/lib/warning":32,"react/lib/ReactComponentTreeHook":173}],146:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;
},{}],147:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],148:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1',
  113: 'F2',
  114: 'F3',
  115: 'F4',
  116: 'F5',
  117: 'F6',
  118: 'F7',
  119: 'F8',
  120: 'F9',
  121: 'F10',
  122: 'F11',
  123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":147}],149:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],150:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],151:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactNodeTypes = require('./ReactNodeTypes');

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;
},{"./ReactNodeTypes":108}],152:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],153:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],154:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":11}],155:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;
},{"fbjs/lib/ExecutionEnvironment":11}],156:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(inst) {
  return inst._wrapperState.valueTracker;
}

function attachTracker(inst, tracker) {
  inst._wrapperState.valueTracker = tracker;
}

function detachTracker(inst) {
  inst._wrapperState.valueTracker = null;
}

function getValueFromNode(node) {
  var value;
  if (node) {
    value = isCheckable(node) ? '' + node.checked : node.value;
  }
  return value;
}

var inputValueTracking = {
  // exposed for testing
  _getTrackerFromNode: function (node) {
    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
  },


  track: function (inst) {
    if (getTracker(inst)) {
      return;
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

    var currentValue = '' + node[valueField];

    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }

    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable,
      configurable: true,
      get: function () {
        return descriptor.get.call(this);
      },
      set: function (value) {
        currentValue = '' + value;
        descriptor.set.call(this, value);
      }
    });

    attachTracker(inst, {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = '' + value;
      },
      stopTracking: function () {
        detachTracker(inst);
        delete node[valueField];
      }
    });
  },

  updateValueIfChanged: function (inst) {
    if (!inst) {
      return false;
    }
    var tracker = getTracker(inst);

    if (!tracker) {
      inputValueTracking.track(inst);
      return true;
    }

    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }

    return false;
  },
  stopTracking: function (inst) {
    var tracker = getTracker(inst);
    if (tracker) {
      tracker.stopTracking();
    }
  }
};

module.exports = inputValueTracking;
},{"./ReactDOMComponentTree":74}],157:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactHostComponent = require('./ReactHostComponent');

var getNextDebugID = require('react/lib/getNextDebugID');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if ("production" !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
      !false ? "production" !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
    !false ? "production" !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if ("production" !== 'production') {
    "production" !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if ("production" !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if ("production" !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;
},{"./ReactCompositeComponent":70,"./ReactEmptyComponent":93,"./ReactHostComponent":98,"./reactProdInvariant":161,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"object-assign":33,"react/lib/getNextDebugID":188}],158:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":11}],159:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;
},{}],160:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":143}],161:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
'use strict';

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;
},{}],162:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":106}],163:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var DOMNamespaces = require('./DOMNamespaces');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xfeff) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;
},{"./DOMNamespaces":51,"./createMicrosoftUnsafeLocalFunction":141,"fbjs/lib/ExecutionEnvironment":11}],164:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":143,"./setInnerHTML":163,"fbjs/lib/ExecutionEnvironment":11}],165:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;
},{}],166:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if ("production" !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          "production" !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if ("production" !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? "production" !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
},{"./KeyEscapeUtils":63,"./ReactElementSymbol":92,"./getIteratorFn":152,"./reactProdInvariant":161,"fbjs/lib/invariant":25,"fbjs/lib/warning":32,"react/lib/ReactCurrentOwner":174}],167:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if ("production" !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      "production" !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        "production" !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        "production" !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
},{"fbjs/lib/emptyFunction":17,"fbjs/lib/warning":32,"object-assign":33}],168:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"dup":63}],169:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"./reactProdInvariant":191,"dup":65,"fbjs/lib/invariant":25}],170:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactBaseClasses = require('./ReactBaseClasses');
var ReactChildren = require('./ReactChildren');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var createReactClass = require('./createClass');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if ("production" !== 'production') {
  var lowPriorityWarning = require('./lowPriorityWarning');
  var canDefineProperty = require('./canDefineProperty');
  var ReactElementValidator = require('./ReactElementValidator');
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function (mixin) {
  return mixin;
};

if ("production" !== 'production') {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function () {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function (mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if ("production" !== 'production') {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function () {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;
},{"./ReactBaseClasses":171,"./ReactChildren":172,"./ReactDOMFactories":175,"./ReactElement":176,"./ReactElementValidator":178,"./ReactPropTypes":181,"./ReactVersion":183,"./canDefineProperty":184,"./createClass":186,"./lowPriorityWarning":189,"./onlyChild":190,"object-assign":33}],171:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var lowPriorityWarning = require('./lowPriorityWarning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? "production" !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if ("production" !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};
},{"./ReactNoopUpdateQueue":179,"./canDefineProperty":184,"./lowPriorityWarning":189,"./reactProdInvariant":191,"fbjs/lib/emptyObject":18,"fbjs/lib/invariant":25,"object-assign":33}],172:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":169,"./ReactElement":176,"./traverseAllChildren":192,"fbjs/lib/emptyFunction":17}],173:[function(require,module,exports){
/**
 * Copyright (c) 2016-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  "production" !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? "production" !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? "production" !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? "production" !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? "production" !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? "production" !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? "production" !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function () {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;
},{"./ReactCurrentOwner":174,"./reactProdInvariant":191,"fbjs/lib/invariant":25,"fbjs/lib/warning":32}],174:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;
},{}],175:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var ReactElement = require('./ReactElement');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if ("production" !== 'production') {
  var ReactElementValidator = require('./ReactElementValidator');
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
},{"./ReactElement":176,"./ReactElementValidator":178}],176:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var warning = require('fbjs/lib/warning');
var canDefineProperty = require('./canDefineProperty');
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if ("production" !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if ("production" !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      "production" !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      "production" !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if ("production" !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if ("production" !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if ("production" !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
},{"./ReactCurrentOwner":174,"./ReactElementSymbol":177,"./canDefineProperty":184,"fbjs/lib/warning":32,"object-assign":33}],177:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"dup":92}],178:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactComponentTreeHook = require('./ReactComponentTreeHook');
var ReactElement = require('./ReactElement');

var checkReactTypeSpec = require('./checkReactTypeSpec');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var warning = require('fbjs/lib/warning');
var lowPriorityWarning = require('./lowPriorityWarning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  "production" !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    "production" !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
        "production" !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if ("production" !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;
},{"./ReactComponentTreeHook":173,"./ReactCurrentOwner":174,"./ReactElement":176,"./canDefineProperty":184,"./checkReactTypeSpec":185,"./getIteratorFn":187,"./lowPriorityWarning":189,"fbjs/lib/warning":32}],179:[function(require,module,exports){
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnNoop(publicInstance, callerName) {
  if ("production" !== 'production') {
    var constructor = publicInstance.constructor;
    "production" !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
},{"fbjs/lib/warning":32}],180:[function(require,module,exports){
arguments[4][110][0].apply(exports,arguments)
},{"dup":110}],181:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _require = require('./ReactElement'),
    isValidElement = _require.isValidElement;

var factory = require('prop-types/factory');

module.exports = factory(isValidElement);
},{"./ReactElement":176,"prop-types/factory":36}],182:[function(require,module,exports){
arguments[4][111][0].apply(exports,arguments)
},{"dup":111}],183:[function(require,module,exports){
arguments[4][119][0].apply(exports,arguments)
},{"dup":119}],184:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var canDefineProperty = false;
if ("production" !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
},{}],185:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactPropTypesSecret = require('./ReactPropTypesSecret');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "production" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('./ReactComponentTreeHook');
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? "production" !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      "production" !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if ("production" !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require('./ReactComponentTreeHook');
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        "production" !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,require('_process'))
},{"./ReactComponentTreeHook":173,"./ReactPropTypeLocationNames":180,"./ReactPropTypesSecret":182,"./reactProdInvariant":191,"_process":34,"fbjs/lib/invariant":25,"fbjs/lib/warning":32}],186:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _require = require('./ReactBaseClasses'),
    Component = _require.Component;

var _require2 = require('./ReactElement'),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');
var factory = require('create-react-class/factory');

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);
},{"./ReactBaseClasses":171,"./ReactElement":176,"./ReactNoopUpdateQueue":179,"create-react-class/factory":6}],187:[function(require,module,exports){
arguments[4][152][0].apply(exports,arguments)
},{"dup":152}],188:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

'use strict';

var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;
},{}],189:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

if ("production" !== 'production') {
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;
},{}],190:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? "production" !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
},{"./ReactElement":176,"./reactProdInvariant":191,"fbjs/lib/invariant":25}],191:[function(require,module,exports){
arguments[4][161][0].apply(exports,arguments)
},{"dup":161}],192:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if ("production" !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          "production" !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if ("production" !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? "production" !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
},{"./KeyEscapeUtils":168,"./ReactCurrentOwner":174,"./ReactElementSymbol":177,"./getIteratorFn":187,"./reactProdInvariant":191,"fbjs/lib/invariant":25,"fbjs/lib/warning":32}],193:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":170}]},{},[1]);
